{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>      \ud83d\udd25\ud83d\udd25\ud83d\udd25Help you transform into an Android platform framework with AOP architecture     AndroidAOP </p> <p> </p> <p>      Say goodbye to boilerplate code, free your hands with AOP, and create efficient Android applications with one line of annotations    </p> <p>      AndroidAOP, born for developers!   </p>"},{"location":"#brief-description","title":"Brief Description","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0This is a framework that helps Android App transform into AOP architecture. With just one annotation, you can request permissions, switch threads, prohibit multiple clicks, monitor all click events at once, monitor the life cycle, etc. You can also customize your own Aop code without using AspectJ.</p>"},{"location":"#special-feature","title":"Special feature","text":"<p>1 . This library has built-in some commonly used aspect annotations for your use</p> <p>2 . This library allows you to make your own aspects, and the syntax is simple and easy to use</p> <p>3 .  This library supports Java projects and Kotlin projects at the same time</p> <p>4 . This library supports cutting into third-party libraries</p> <p>5 . This library supports the case where the cutting method is a Lambda expression</p> <p>6 . This library supports the coroutine function modified by suspend for the cutting method</p> <p>7 . This library supports the generation of all cutting information json and html files, which is convenient for viewing all cutting locations Configure here</p> <p>8. This library supports multiple rapid development modes, which makes your packaging speed almost unchanged Configure here</p> <p>9. This library supports Component-based development configure here</p> <p>10. This library is pure static weaving into AOP code</p> <p>11. This library is not implemented based on AspectJ. The amount of woven code is very small and the intrusion is extremely low</p> <p>12. Rich and complete usage documentation helps you fully understand the usage rules of this library click here to go to the wiki document</p> <p>13. There are also plug-in assistants that help you generate section codes for your use click here to download</p>"},{"location":"#click-here-to-download-apk-or-scan-the-qr-code-below-to-download","title":"Click here to download apk, or scan the QR code below to download","text":""},{"location":"#star-trend-chart","title":"Star trend chart","text":"<p>Welcome to the AndroidAOP wiki document, click on the left navigation bar to see what you want to see\ud83d\udc48\ud83d\udc48\ud83d\udc48</p> <p>It is recommended that you first browse Getting Started to quickly understand how to use this library and form a general idea before reading other content.</p> <p>Choosing the right method can help you write beautiful code. If you encounter any problem, please browse the wiki document first. If you can't solve it, go to the homepage join the group to communicate</p>"},{"location":"#the-aspect-methods-provided-by-this-library-are-as-follows","title":"The aspect methods provided by this library are as follows","text":"<ul> <li> <p>@AndroidAopPointCut is an annotation aspect. The set annotation can be added to any method. When the added method is called, the aspect processing class can be entered</p> </li> <li> <p>@AndroidAopMatchClassMethod is a matching aspect. It matches certain methods of a class. When the method of the class is called, the aspect processing class can be entered</p> </li> <li> <p>@AndroidAopReplaceClass is a replacement aspect. All calls to the method of the set class will be replaced with the method of the replacement aspect class</p> </li> <li> <p>@AndroidAopModifyExtendsClass It modifies the inherited class and replaces the inherited class of the target class with the annotated class</p> </li> <li> <p>@AndroidAopCollectMethod collects inherited classes</p> </li> </ul> <p>Except @AndroidAopPointCut, you can use \u201cAOP Code Generation Assistant\u201d to assist you in using this library</p>"},{"location":"#the-differences-are-as-follows","title":"The differences are as follows:","text":"<ul> <li> <p>@AndroidAopMatchClassMethod and @AndroidAopPointCut focus on method execution</p> </li> <li> <p>@AndroidAopReplaceClass focuses on method call</p> </li> <li> <p>Note @AndroidAopReplaceClass It is essentially different from the other two. The first two focus on the execution of methods and automatically retain methods that can execute the original logic (i.e. ProceedJoinPoint);</p> </li> <li> <p>@AndroidAopReplaceClass focuses on the call of methods, replacing all call locations with static methods of the class you set, and does not automatically retain methods that execute the original logic</p> </li> <li> <p>@AndroidAopReplaceClass has the advantage of \"equivalent\" to monitoring the call of certain system methods (code in android.jar), which the first two do not have. Therefore, if it is not based on this requirement, it is recommended to use @AndroidAopMatchClassMethod</p> </li> </ul>"},{"location":"#appreciation","title":"Appreciation","text":"<p>You have read this far. If you like AndroidAOP or feel that AndroidAOP has helped you, you can click the \"Star\" in the upper right corner to support it. Your support is my motivation. Thank you~ \ud83d\ude03</p> <p>If you feel that AndroidAOP has saved you a lot of development time and added luster to your project, you can also scan the QR code below to buy the author a cup of coffee \u2615</p>"},{"location":"#donation-list","title":"Donation List","text":"<p>If you note your name in the donation message, it will be recorded in the list~ If you are also a github open source author, you can leave the github project address or personal homepage address when donating, and the link will be added to the list</p>"},{"location":"#contact-information","title":"Contact information","text":"<ul> <li>If you have any questions, you can join the group to discuss Click here to join QQ group: 641697838</li> </ul>"},{"location":"AOP_Helper/","title":"AOP-Code Helper","text":""},{"location":"AOP_Helper/#1-description","title":"1. Description","text":"<p>This \"assistant\" is a plug-in for Android Studio, which is equivalent to a small helper when you use this library. It only helps you generate some AOP code, and has no effect on your code.</p> <p>The plug-in generates AOP auxiliary code for the target class, including the following functions:</p> <ul> <li>@AndroidAopReplaceClass</li> <li>@AndroidAopMatchClassMethod</li> <li>@AndroidAopModifyExtendsClass</li> <li>@AndroidAopCollectMethod</li> </ul> <p>Although there is such a plug-in, you also need to understand how to use this library to identify and select the generated code, and don't copy it blindly~</p>"},{"location":"AOP_Helper/#2-install-the-plug-in","title":"2. Install the plug-in","text":"<ul> <li> <p>Plugin Market, search for the plug-in AndroidAOP Code Viewer in Android Studio and install it</p> </li> <li> <p>\ud83d\udc46The plug-in market needs to be reviewed and may not be the latest version </p> </li> <li> <p>Click here to download the plugin, then search for how to install the local plugin</p> </li> <li> <p>\ud83d\udc46Download link here to keep up with the latest features </p> </li> <li> <p>After installation, a plug-in named AOPCode will be displayed on the right side of the IDE</p> </li> </ul>"},{"location":"AOP_Helper/#3-use","title":"3. Use","text":"<p>Right-click the mouse on the code you want to cut into -&gt; Click AndroidAOP Code -&gt; Click AOPCode on the right to view the generated code, as shown in the figure:</p> <ul> <li>If the AOP code does not appear, you can try to find the corresponding class file and then execute this step to try again</li> </ul> <p></p>"},{"location":"AOP_Helper/#4-special-instructions","title":"4. Special instructions","text":"<ul> <li>The generated <code>@AndroidAopReplaceClass</code>, <code>@AndroidAopReplaceMethod</code> and The class name and function signature in the <code>@AndroidAopMatchClassMethod</code> code are absolutely correct (Please correct me if you have any questions).</li> <li>The generated <code>@AndroidAopReplaceMethod</code> Java method does not include the suspend function of the Kotlin source code</li> <li>The generated <code>@AndroidAopReplaceMethod</code> method may have some deviations, so you need to compare it yourself. For example: <code>nullable?</code>, <code>Is it the type of Kotlin source code</code>, <code>variable parameter type becomes array type</code>, etc., these cannot be guaranteed to be accurately copied</li> </ul>"},{"location":"About_obfuscation/","title":"About obfuscation","text":""},{"location":"About_obfuscation/#obfuscation-rules","title":"Obfuscation rules","text":"<p>This resource library comes with obfuscation rules, and it will be automatically imported. Under normal circumstances, there is no need to import it manually.</p>"},{"location":"About_obfuscation/#about-the-mapping-problem-after-obfuscation","title":"About the mapping problem after obfuscation","text":"<p>Some friends will find that before obfuscation, the line number after the error can locate the error position, but after obfuscation, the original line number cannot be mapped out through the <code>ProGuard</code> tool, but it can be mapped out before using this library. That's right! Let's talk about the solution below.</p> <ul> <li> <ol> <li>First, you need to confirm whether your class is a class that has been processed by AOP (you can check the cut point cutInfoJson), if yes, follow the next step to continue trying</li> </ol> </li> <li> <ol> <li>You just need to invalidate AndroidAOP and then generate an obfuscated package again, that is, generate a mapping file that does not contain AOP again. Configure it as follows under the application module</li> </ol> </li> </ul> <pre><code>androidAopConfig {\n    //Set to false to disable AndroidAOP\n    enabled false\n}\n</code></pre> <p>Regarding the mapping file configuration, add the following configuration to the obfuscation configuration file</p> <pre><code># Mapping file\n-printmapping proguard-map.txt\n# Keep the code line number when throwing an exception\n-keepattributes SourceFile,LineNumberTable\n</code></pre>"},{"location":"AndroidAopCollectMethod/","title":"@AndroidAopCollectMethod","text":""},{"location":"AndroidAopCollectMethod/#brief-description","title":"Brief description","text":"<p>This aspect collects inherited classes or classes that match regular expressions. Its annotated methods will be automatically called back when you use the class for the first time</p> <pre><code>@AndroidAopCollectMethod(\n    /**\n     * Collection type\n     */\n    collectType = CollectType.DIRECT_EXTENDS,\n    /**\n     * This item is a regular expression\n     * After setting the regular expression, the parameter of the annotated method can be Object or Any. If it is not set, the type must be specified\n     * After setting the regular expression, the regular expression you set will be used to find the class name that meets the requirements\n     */\n    regex = \"\"\n)\n</code></pre>"},{"location":"AndroidAopCollectMethod/#filling-requirements-for-annotated-methods","title":"Filling requirements for annotated methods","text":"<ul> <li> <p>The modified method must be a static method, and the return value type is not set</p> </li> <li> <p>It directly modifies the method, and the modified method has one and only one parameter. This function is to collect all classes in the application that inherit this parameter. If the parameter type is:</p> <ul> <li>Object, only non-abstract classes and non-interface subclasses are collected; There must be a default no-parameter constructor, otherwise there will be an exception</li> <li>Class, both interfaces and abstract classes will be collected; No restrictions on constructor parameters</li> </ul> </li> <li> <p>In addition, each class collected by its annotated method will only be initialized and called back once through this static method.</p> <ul> <li>The initialization time is when you use this class for the first time, that is, when the class is initialized.</li> <li>It will not be initialized if not used, so it is \"lazy loading\" and thread-safe!</li> <li>Pure static weaving method, without any reflection, better performance.</li> </ul> </li> <li> <p>The last point is that this method should only contain relevant saving code, and do not perform other operations, and try to avoid abnormal behavior (because you only have one chance to receive...)</p> </li> </ul>"},{"location":"AndroidAopCollectMethod/#collecttype-defaults-to-direct_extends-and-the-following-three-types-can-be-set","title":"collectType defaults to <code>DIRECT_EXTENDS</code>, and the following three types can be set","text":"<ul> <li> <p><code>EXTENDS</code> means that it matches all classes inherited from annotation method parameters set</p> </li> <li> <p><code>DIRECT_EXTENDS</code> means that it matches directly inherited from annotation method parameters set</p> </li> <li> <p><code>LEAF_EXTENDS</code> means that it matches terminal inheritance (that is, no subclasses) annotation method parameters set</p> </li> </ul> <p>\ud83d\udca1\ud83d\udca1\ud83d\udca1If the parameter is set to Object or Any, this setting will be ignored, but <code>regex</code> must be filled in</p> <pre><code>graph LR\nC(Class C) ---&gt; |Class C inherits from Class B| B{Class B};\nB ---&gt;|Class B inherits from Class A| A[Class A];\nB ---&gt;|DIRECT_EXTENDS / EXTENDS| A;\nC ----&gt;|LEAF_EXTENDS / EXTENDS| A;\nD(Class D) ---&gt;|Class D inherits from Class A| A;\nD ---&gt;|DIRECT_EXTENDS/ LEAF_EXTENDS / EXTENDS| A;</code></pre>"},{"location":"AndroidAopCollectMethod/#regex-fill-in-regular-expression","title":"regex fill in <code>Regular expression</code>","text":"<p>After setting the regular expression, the class name that meets the requirements will be found according to the regular expression you set</p> <ul> <li> <p>After setting the regular expression, the parameter of the annotation method can be Object or Any, as shown in the example below</p> </li> <li> <p>If you do not set the regular expression, you must specify the type</p> </li> </ul>"},{"location":"AndroidAopCollectMethod/#how-to-use","title":"How to use","text":"<p>It is extremely simple to use, and the sample code has already explained it</p> KotlinJava <pre><code>object InitCollect {\n    private val collects = mutableListOf&lt;SubApplication&gt;()\n    private val collectClazz: MutableList&lt;Class&lt;out SubApplication&gt;&gt; = mutableListOf()\n\n    @AndroidAopCollectMethod\n    @JvmStatic\n    //Collect classes inherited from SubApplication and call back its instance object\n    fun collect(sub: SubApplication) {\n        collects.add(sub)\n    }\n\n    @AndroidAopCollectMethod\n    @JvmStatic\n    //Collect classes inherited from SubApplication and call back its class object\n    fun collect2(sub: Class&lt;out SubApplication&gt;) {\n        collectClazz.add(sub)\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\\\$Router\")\n    @JvmStatic\n    //Collect classes that match the regex regular expression and call back their class objects. Can also be used in conjunction with inheritance\n    fun collectRouterClassRegex(sub: Class&lt;out Any&gt;) {\n        Log.e(\"InitCollect\", \"----collectRouterClassRegexClazz----$sub\")\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\\\$Router\")\n    @JvmStatic\n    //Collect classes that match the regex regular expression and call back their instance objects. Can also be used in combination with inheritance\n    fun collectRouterClassRegex(sub: Any) {\n        Log.e(\"InitCollect\", \"----collectRouterClassRegexObject----$sub\")\n    }\n\n    //Directly call this method (method name is not limited) The above functions will be called back\n    fun init(application: Application) {\n        for (collect in collects) {\n            collect.onCreate(application)\n        }\n    }\n}\n</code></pre> <pre><code>public class InitCollect {\n    private static final List&lt;SubApplication&gt; collects = new ArrayList&lt;&gt;();\n    private static final List&lt;Class&lt;? extends SubApplication&gt;&gt; collectClazz = new ArrayList&lt;&gt;();\n\n    @AndroidAopCollectMethod\n    //Collect classes inherited from SubApplication and call back its instance object\n    public static void collect(SubApplication sub) {\n        collects.add(sub);\n    }\n\n    @AndroidAopCollectMethod\n    //Collect classes inherited from SubApplication and call back its class object\n    public static void collect2(Class&lt;? extends SubApplication&gt; sub) {\n        collectClazz.add(sub);\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\$Router\")\n    //Collect classes that match the regex regular expression and call back their instance objects. Can also be used in combination with inheritance\n    public static void collectRouterClassRegex(Class&lt;?&gt; sub) {\n        Log.e(\"InitCollect2\", \"----collectRouterClassRegexClazz----\" + sub);\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\$Router\")\n    //Collect classes that match the regex regular expression and call back their class objects. Can also be used in conjunction with inheritance\n    public static void collectRouterClassRegex(Object sub) {\n        Log.e(\"InitCollect2\", \"----collectRouterClassRegexObject----\" + sub);\n    }\n\n\n    //Directly call this method (method name is not limited) The above functions will be called back in full\n    public static void init(Application application) {\n        Log.e(\"InitCollect2\", \"----init----\");\n        for (SubApplication2 collect : collects) {\n            collect.onCreate(application);\n        }\n    }\n}\n</code></pre> <p>Use this collection class <pre><code>public class MyApp extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        InitCollect.init(this);\n    }\n}\n</code></pre></p>"},{"location":"AndroidAopCollectMethod/#application-scenario","title":"Application scenario","text":"<ul> <li> <p>Multiple modules need to use Application, such as the above example</p> </li> <li> <p>For those who are interested in implementing Router by themselves, this aspect can help you find what you want</p> </li> <li> <p>Adapting routing library such as this ARouter adapts AGP8 Example</p> </li> <li> <p>Another new way to use singletons that are both thread-safe and lazy-loaded! <pre><code>public class TestInstance {\n    private static TestInstance instance;\n\n    @AndroidAopCollectMethod(regex = \"^com.flyjingfish.lightrouter.TestInstance$\")\n    public static void collectInstance(Object any) {\n        instance = (TestInstance) any;\n    }\n\n    public static TestInstance getInstance() {\n        return instance;\n    }\n\n    public void test() {\n        Log.e(\"TestInstance\", \"=====test=\");\n    }\n} \n</code></pre></p> </li> <li> <p>Custom SPI (Service Provider Interface) implementation</p> </li> <li> <p>More application scenarios are waiting for you to explore</p> </li> </ul>"},{"location":"AndroidAopMatchClassMethod/","title":"@AndroidAopMatchClassMethod","text":""},{"location":"AndroidAopMatchClassMethod/#brief-description","title":"Brief description","text":"<p>This aspect is used to match a class and its corresponding method. This aspect focuses on the execution of the method (Method Execution). Please note the difference between it and @AndroidAopReplaceClass.</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = target class name(including package name),\n    methodName = method name array,\n    type = match type, optional, default EXTENDS\n    excludeClasses = array of classes to exclude in inheritance relationship (valid only when type is not SELF), optional\n    excludeWeaving = exclude weaving range\n    includeWeaving = include weaving range\n)\n</code></pre> <ul> <li> <p>When targetClassName is an inner class, do not use the <code>$</code> character, but use <code>.</code></p> </li> <li> <p>There are four types of type (default <code>EXTENDS</code> is not set):</p> <ul> <li><code>SELF</code> means that the match is itself of the class set by targetClassName</li> <li><code>EXTENDS</code> means that the match is all classes inherited from the class set by targetClassName</li> <li><code>DIRECT_EXTENDS</code> means that the match is directly inherited from the class set by targetClassName</li> <li><code>LEAF_EXTENDS</code> means that the match is Terminal inheritance (no subclasses) The class set by targetClassName</li> </ul> <pre><code>graph LR\nC(Class C) ---&gt; |Class C inherits from Class B| B{Class B};\nB ---&gt;|Class B inherits from Class A| A[Class A];\nB ---&gt;|DIRECT_EXTENDS / EXTENDS| A;\nC ----&gt;|LEAF_EXTENDS / EXTENDS| A;\nD(Class D) ---&gt;|Class D inherits from Class A| A;\nD ---&gt;|DIRECT_EXTENDS/ LEAF_EXTENDS / EXTENDS| A;</code></pre> <p>Simply put, <code>LEAF_EXTENDS</code> and <code>DIRECT_EXTENDS</code> are two extremes. The former focuses on the last node in the inheritance relationship, while the latter focuses on the first node in the inheritance relationship. Also note that <code>EXTENDS</code> This type of match has a wide range, and all inherited intermediate classes may also add aspect codes</p> </li> <li> <p>excludeClasses</p> <ul> <li>If targetClassName is a class name, it means excluding some classes in the inheritance relationship. You can set multiple, and type is not SELF to be effective</li> <li>If targetClassName is a package name, it means excluding some matched classes. You can set multiple, and type is SELF to be effective</li> </ul> </li> <li> <p>overrideMethod defaults to false</p> <ul> <li> <p>Set to true, if there is no matching method in the subclass (non-interface, can be an abstract class), the parent class method is overwritten</p> <ul> <li>targetClassName cannot contain *</li> <li>methodName cannot define [ \"*\" ]</li> <li>The overridden method cannot be private or final</li> </ul> </li> <li> <p>Set to false, if there is no matching method in the subclass, no processing is done</p> </li> </ul> </li> <li> <p>excludeWeaving and includeWeaving are similar to exclude and include in the getting started</p> </li> </ul> <p>Note</p> <p>In addition, not all classes can be hooked in</p> <ul> <li><code>type</code> Type is <code>SELF</code> When <code>targetClassName</code> is set, the class must be the code in the installation package.For example: if this class (such as Toast) is in android.jar, it will not work. If you have such a requirement, you should use @AndroidAopReplaceClass</li> <li><code>type</code> When the type is not <code>SELF</code>, this aspect needs to have a matching method to work. If the subclass does not override the matching method, the subclass will not be matched. Use overrideMethod to ignore this restriction. But please note that the subclass must also be the code in the installation package</li> <li>When you modify the configuration of this aspect, in most cases you should clean the project and continue development</li> </ul>"},{"location":"AndroidAopMatchClassMethod/#create-an-aspect-processing-class","title":"Create an aspect processing class","text":"<p>The aspect processing class needs to implement the MatchClassMethod interface and handle the aspect logic in invoke</p> <pre><code>interface MatchClassMethod {\n    fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any?\n}\n</code></pre> <p>Note</p> <p>If the point function is suspend Click here to view</p> <ul> <li>ProceedJoinPoint Introduction</li> <li>Introduction to invoke return value</li> <li>Life Cycle </li> </ul>"},{"location":"AndroidAopMatchClassMethod/#matching-rules","title":"Matching rules","text":"<p>You can see that in the following examples, some of the method names are set with only the method name, while others also have the return value type and parameter type. The following is an introduction</p>"},{"location":"AndroidAopMatchClassMethod/#fuzzy-matching","title":"Fuzzy matching","text":"<ul> <li> <ol> <li>When targetClassName ends with <code>.*</code> and has other characters, and <code>type = MatchType.SELF</code>, it matches all classes under the package, including subpackages as shown in Example 9 below</li> </ol> </li> <li> <ol> <li>When methodName has only one method name <code>*</code>, it matches all methods in the class as shown in Example 8 below</li> </ol> </li> <li> <ol> <li>When methodName only writes the method name but does not write the return type and parameter type, it is also a fuzzy match, which will add all methods with the same name in the target class to the cut point</li> </ol> </li> </ul> <p>Note</p> <p>For matching package names, I strongly recommend not doing this, as it intrudes too much code and significantly reduces the packaging speed. It is recommended to use it only for debugging and logging, and the original method should be released in full</p>"},{"location":"AndroidAopMatchClassMethod/#precise-matching","title":"Precise matching","text":"<p>Write the return type and parameter type on the methodName method name, so that you can accurately find a method to add a cut point (it will automatically degenerate to fuzzy matching when the precise matching is abnormal)</p> <p>Matching formula: Return value type method name (parameter type, parameter type...)</p> <ul> <li>Return value type can be omitted</li> <li>Method name must be written</li> <li>Parameter type can be omitted. If written, wrap it with (). Multiple parameter types are separated by ,. If there is no parameter, just write ()</li> <li>Separate the return value type and method name with a space</li> <li>If the return value type and parameter type are not written, it means no verification</li> <li>Return value type and parameter type must be expressed in Java types. Except for the 8 basic types, other reference types are package name.class name</li> <li>If the function is modified with <code>suspend</code>, then the return value type is written regardless of the type <code>suspend</code>, parameter types should still be written according to the above points</li> <li> <p>For generic information (such as collection List), the generic information must be erased</p> </li> <li> <p>Different from targetClassName, if the method parameter and return value type are inner classes, they need to be replaced with <code>$</code> instead of <code>.</code></p> </li> </ul> <p>Note</p> <p>AOP Code Generation Assistant, which can help you generate code with one click</p> <p>Below is a comparison table of Kotlin and Java with different types. If it is Kotlin code, please check the corresponding code</p> <p>(If you find any incomplete information, please give me feedback)</p> Kotlin type Java type Int int Short short Byte byte Char char Long long Float float Double double Boolean boolean Int? java.lang.Integer Short? java.lang.Short Byte? java.lang.Byte Char? java.lang.Character Long? java.lang.Long Float? java.lang.Float Double? java.lang.Double Boolean? java.lang.Boolean String java.lang.String Unit\uff08Or do not write\uff09 void Unit? kotlin.Unit Nothing java.lang.Void Any java.lang.Object <p>Other data types not listed above are reference types, and are written as package name.class name</p> <p>Note</p> <ol> <li><code>vararg str : String</code> in Kotlin is equivalent to <code>String...</code> in Java. In this matching, no matter what kind of code is used, it is represented by <code>String[]</code> (String is used as an example here, and other types are the same)</li> <li>For types with generics, do not write generics, for example, <code>java.lang.List&lt;String&gt; methodName(java.lang.List&lt;String&gt;)</code> should be directly written as <code>java.lang.List methodName(java.lang.List)</code></li> </ol>"},{"location":"AndroidAopMatchClassMethod/#examples-of-various-scenarios","title":"Examples of various scenarios","text":""},{"location":"AndroidAopMatchClassMethod/#example-1","title":"Example 1","text":"<p>Want to monitor all startActivity jumps inherited from the AppCompatActivity class</p> <pre><code>@AndroidAopMatchClassMethod(\n        targetClassName = \"androidx.appcompat.app.AppCompatActivity\",\n        methodName = {\"startActivity\"},\n        type = MatchType.EXTENDS\n)\npublic class MatchActivityMethod implements MatchClassMethod {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull String methodName) {\n// Write your logic here\n        return joinPoint.proceed();\n    }\n}\n</code></pre> <p>Note: For matching subclass methods, if the subclass does not override the matching method, it is invalid. Use overrideMethod to ignore this limitation</p>"},{"location":"AndroidAopMatchClassMethod/#example-2","title":"Example 2","text":"<p>If you want to hook all android.view.View.OnClickListener onClick, to put it simply, is to globally monitor all click events set onClickListener, the code is as follows:</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS //type must be EXTENDS because you want to hook all classes that inherit OnClickListener\n)\nclass MatchOnClick : MatchClassMethod {\n    // @SingleClick(5000) //Combined with @SingleClick, add multi-click protection to all clicks, 6 or not\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>Here is a reminder for those who use lambda click monitoring;</p> <p>ProceedJoinPoint The target is not android.view.View.OnClickListener - For Java, the target is the object of the class that sets the lambda expression - For Kotlin, the target is null</p> <p>The methodName of the invoke callback is not onClick, but the method name automatically generated at compile time, similar to onCreate\\(lambda\\)14, which contains the lambda keyword</p> <p>For the view of onClick(view:View) - If it is Kotlin code, ProceedJoinPoint.args[1] - If it is Java code, ProceedJoinPoint.args[0]</p> <p>I will not go into details about this, you will know it after using it yourself;</p> <p>To summarize: In fact, for all lambda's ProceedJoinPoint.args</p> <ul> <li>If it is Kotlin, the first parameter is the object of the class that sets the lambda expression, and the subsequent parameters are all the parameters of the hook method</li> <li>If it is Java, starting from the first parameter, it is all the parameters of the hook method</li> </ul>"},{"location":"AndroidAopMatchClassMethod/#example-3","title":"Example 3","text":"<p>The target class has multiple methods with the same name, and you only want to match one method (the exact matching rule is mentioned above)</p> <p><pre><code>package com.flyjingfish.test_lib;\n\npublic class TestMatch {\n    public void test(int value1) {\n\n    }\n\n    public String test(int value1, String value2) {\n        return value1 + value2;\n    }\n}\n</code></pre> For example, there is a class TestMatch with two methods named test. You only want to match the method test(int value1,String value2). Then write it as follows:</p> <pre><code>package com.flyjingfish.test_lib.mycut;\n\n@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n    methodName = [\"java.lang.String test(int,java.lang.String)\"],\n    type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchTestMatchMethod\",\n            \"======\" + methodName + \",getParameterTypes=\" + joinPoint.getTargetMethod()\n                .getParameterTypes().length\n        );\n// Write your logic here\n// If you don't want to execute the original method logic, \ud83d\udc47 don't call the following sentence\n        return joinPoint.proceed()\n    }\n}\n</code></pre>"},{"location":"AndroidAopMatchClassMethod/#example-4","title":"Example 4","text":"<p>When there are many levels of inheritance relationships, you don't want to add aspects to each level</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS // type must be EXTENDS because you want to hook all classes that inherit OnClickListener\n)\nclass MatchOnClick : MatchClassMethod {\n    // @SingleClick(5000) //Join @SingleClick to add anti-multiple clicks to all clicks, 6 or 6\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <pre><code>public abstract class MyOnClickListener implements View.OnClickListener {\n    @Override\n    public void onClick(View v) {\n        ...\n        //This is the necessary logic code\n    }\n}\n</code></pre> <pre><code>binding.btnSingleClick.setOnClickListener(object : MyOnClickListener() {\n    override fun onClick(v: View?) {\n        super.onClick(v)//Especially this sentence calls the parent class onClick and wants to retain the logic of executing the parent class method\n        onSingleClick()\n    }\n})\n</code></pre> <p>Writing this way will cause the MyOnClickListener onClick above to also be added to the aspect, which is equivalent to a click that calls back twice the invoke of the aspect processing class, which may not be what we want, so we can change it like this <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS,\n    excludeClasses = [\"com.flyjingfish.androidaop.test.MyOnClickListener\"]//Adding this can exclude some classes\n)\nclass MatchOnClick : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> Or set type to LEAF_EXTENDS directly filters out the intermediate classes (this reminds me of an advertisement: no middlemen make a profit from the price difference)</p>"},{"location":"AndroidAopMatchClassMethod/#example-5","title":"Example 5","text":"<p>What if the entry point is a companion object?</p> <p>Suppose there is such a code <pre><code>package com.flyjingfish.androidaop\n\nclass ThirdActivity : BaseActivity() {\n    companion object {\n        fun start() {\n            ...\n        }\n    }\n}\n</code></pre> The first letter of the companion object modifier companion is capitalized, as shown below <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.ThirdActivity.Companion\",\n    methodName = [\"start\"],\n    type = MatchType.SELF\n)\nclass MatchCompanionStart : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchCompanionStart\", \"======$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre></p>"},{"location":"AndroidAopMatchClassMethod/#example-6","title":"Example 6","text":"<p>The entry point is Kotlin Member variables of the code, want to monitor the assignment and retrieval operations</p> <pre><code>package com.flyjingfish.androidaop.test\n\nclass TestBean {\n    var name: String = \"test\"\n}\n</code></pre> <p>In the code, we will have such operations</p> <pre><code>testBean.name = \"1111\" //Assignment operation\nval name = testBean.name //Get value operation\n</code></pre> <p>You can write like this</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.test.TestBean\",\n    methodName = [\"setName\", \"getName\"],\n    type = MatchType.SELF\n)\nclass MatchTestBean : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchTestBean\", \"======$methodName\");\n        ToastUtils.makeText(ToastUtils.app, \"MatchTestBean======$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre>"},{"location":"AndroidAopMatchClassMethod/#example-7","title":"Example 7","text":"<p>If the cut point method is <code>suspend</code> What about modified functions?</p> <ul> <li> <p>You can directly use Fuzzy Matching</p> </li> <li> <p>If you want to use Exact Matching, the writing is as follows. For specific rules, see Exact Matching</p> </li> </ul> <pre><code>package com.flyjingfish.androidaop\n\nclass MainActivity : BaseActivity2() {\n    suspend fun getData(num: Int): Int {\n        return withContext(Dispatchers.IO) {\n            getDelayResult()\n        }\n    }\n}\n</code></pre> <p>The exact match is written as follows. Regardless of the return value type of the matching function, write <code>suspend</code>. For details, see the Exact Matching Part</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.MainActivity\",\n    methodName = [\"suspend getData(int)\"],\n    type = MatchType.SELF\n)\nclass MatchSuspend : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchSuspend\", \"======$methodName\") return joinPoint.proceed()\n    }\n} \n</code></pre>"},{"location":"AndroidAopMatchClassMethod/#example-8","title":"Example 8","text":"<p>Want to match all methods of a class</p> <p><pre><code>@AndroidAopMatchClassMethod(\ntargetClassName = \"com.flyjingfish.androidaop.SecondActivity\",\nmethodName = [\"*\"],\ntype = MatchType.SELF\n)\nclass MatchAllMethod : MatchClassMethod {\noverride fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\nLog.e(\"MatchMainAllMethod\", \"AllMethod======$methodName\");\nreturn joinPoint.proceed()\n}\n}\n</code></pre> Write only one method name and fill in * to match all methods</p>"},{"location":"AndroidAopMatchClassMethod/#example-9","title":"Example 9","text":"<p>Want to match all methods of all classes in a package</p> <p><pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.*\",\n    methodName = [\"*\"],\n    type = MatchType.SELF\n)\nclass MatchAll : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\n            \"MatchAll\",\n            \"----&gt;${joinPoint.targetClass}--${joinPoint.targetMethod.name}--${joinPoint.targetMethod.parameterTypes.toList()}\"\n        );\n        return joinPoint.proceed()\n    }\n}\n</code></pre> 1. <code>*</code> replaces <code>class name</code> Or replace <code>part of the package name + class name</code>, this example represents all classes under the <code>com.flyjingfish.androidaop</code> package and its subpackages  2. Of course, the methodName part can still be filled with multiple fuzzy matching or even exact matching method names</p>"},{"location":"AndroidAopMatchClassMethod/#example-10","title":"Example 10","text":"<p>Want to match top-level functions or top-level extension functions</p> <ul> <li>Top-level functions</li> </ul> <p>Suppose the following function is located in a kotlin file named ContextEx</p> <pre><code>package com.androidaop.ktx\n\nfun toast(text: String) {\n}\n</code></pre> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.androidaop.ktx.ContextExKt\",\n    type = MatchType.SELF,\n    methodName = [\"void toast(java.lang.String)\"]\n)\nclass MatchContextKt : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>As you can see, the signature of this top-level function is nothing special, except that Kt is added to the class name</p> <ul> <li>Top-level extension functions</li> </ul> <p>Still suppose the following function is located in a kotlin file named ContextEx in the kotlin file</p> <pre><code>package com.androidaop.ktx\n\nfun Context.hasPermission(permission: String): Boolean {\n    return ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED\n}\n</code></pre> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.androidaop.ktx.ContextExKt\",\n    type = MatchType.SELF,\n    methodName = [\"boolean hasPermission(android.content.Context,java.lang.String)\"]\n)\nclass MatchContextKt : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>This top-level extension function not only adds Kt to the class name, but also adds Kt to the class name. , and the first parameter of the function signature is your extension type, and the rest are the same</p>"},{"location":"AndroidAopModifyExtendsClass/","title":"@AndroidAopModifyExtendsClass","text":""},{"location":"AndroidAopModifyExtendsClass/#brief-description","title":"Brief description","text":"<pre><code>@AndroidAopModifyExtendsClass(\n    value = \"Modify target class\",\n    isParent = false // value refers to the class name or the inherited class of the class\n    excludeWeaving = exclude weaving range\n    includeWeaving = include weaving range\n)\n</code></pre> <ul> <li><code>isParent = true</code> means modifying all classes whose inherited classes are value</li> <li><code>isParent = false</code> means modifying the class whose class name is value</li> <li>excludeWeaving and includeWeaving are similar to exclude and include in the getting started</li> </ul> <p>This function is relatively simple. It modifies the inherited class of a class. Fill in the full name of the class to be modified in the <code>value</code> position. The annotated class is the modified inherited class.</p> <p>In addition, if the class name is an internal class, do not use the <code>$</code> character, but <code>.</code></p> <p>Note</p> <ul> <li>But it should be noted that the modified inherited class cannot inherit the modified class. The inherited class of the modified class is generally set to the inherited class of the class before modification</li> <li>If the original inherited class has generic information, please note that the modified inherited class also needs to have the same generic information</li> <li>When you modify the configuration of this aspect, in most cases you should clean the project and continue development</li> </ul>"},{"location":"AndroidAopModifyExtendsClass/#usage-example","title":"Usage example","text":""},{"location":"AndroidAopModifyExtendsClass/#example-1","title":"Example 1","text":"<ul> <li> <p>As shown in the following example, the inherited class of <code>AppCompatImageView</code> is replaced with <code>ReplaceImageView</code></p> </li> <li> <p>Because <code>isParent = false</code> is set, only the inherited class of <code>AppCompatImageView</code> is replaced</p> </li> </ul> <pre><code>@AndroidAopModifyExtendsClass(\n        value = \"androidx.appcompat.widget.AppCompatImageView\",\n        isParent = false\n)\npublic class ReplaceImageView1 extends ImageView {\n    public ReplaceImageView1(@NonNull Context context) {\n        super(context);\n    }\n\n    public ReplaceImageView1(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public ReplaceImageView1(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    public void setImageDrawable(@Nullable Drawable drawable) {\n        super.setImageDrawable(drawable);\n//Do some monitoring or modify again\n    }\n}\n</code></pre> <p>Note</p> <p>The inherited class of the above <code>ReplaceImageView1</code> cannot be <code>AppCompatImageView</code>, so after the change it becomes <code>AppCompatImageView</code> \u2192 <code>ReplaceImageView1</code> \u2192 <code>AppCompatImageView</code></p>"},{"location":"AndroidAopModifyExtendsClass/#example-2","title":"Example 2","text":"<ul> <li> <p>As shown in the following example, all classes whose parent class is <code>AppCompatImageView</code> need to be replaced with <code>ReplaceImageView</code></p> </li> <li> <p>Because <code>isParent = true</code> is set, there may be more than one class that inherits from <code>AppCompatImageView</code>, and all of their inherited classes will be replaced</p> </li> </ul> <pre><code>@AndroidAopModifyExtendsClass(\nvalue = \"androidx.appcompat.widget.AppCompatImageView\",\nisParent = true\n)\npublic class ReplaceImageView2 extends ImageView {\n    public ReplaceImageView2(@NonNull Context context) {\n        super(context);\n    }\n\n    public ReplaceImageView2(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public ReplaceImageView2(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    public void setImageDrawable(@Nullable Drawable drawable) {\n        super.setImageDrawable(drawable);\n//Do some monitoring or modify again\n    }\n}\n</code></pre> <p>Note</p> <p>The inherited class of the above <code>ReplaceImageView2</code> can be <code>AppCompatImageView</code>. After this change, the original <code>A</code> \u2192 <code>AppCompatImageView</code> becomes <code>A</code> \u2192 <code>ReplaceImageView2</code> \u2192 <code>AppCompatImageView</code></p>"},{"location":"AndroidAopModifyExtendsClass/#usage-inspiration","title":"Usage Inspiration","text":"<ol> <li>In the inheritance relationship of the class, you can modify the inherited class and rewrite some methods in the middle. In this way, you can process the original logic in the middle, which is also a monitoring of the calling of some methods of the object</li> </ol>"},{"location":"AndroidAopPointCut/","title":"@AndroidAopPointCut","text":""},{"location":"AndroidAopPointCut/#brief-description","title":"Brief description","text":"<p>@AndroidAopPointCut is a method-based annotation. This annotation method focuses on the execution of the method (Method Execution). The built-in annotations in this library are all made in this way</p> <p>In addition, please try not to place the annotation on the system method, such as: Activity's onCreate() onResume(), etc. Even if it is added, there should be no time-consuming operations during the section processing. JoinPoint.proceed() should be executed normally, otherwise unexpected problems will occur, such as: ANR</p>"},{"location":"AndroidAopPointCut/#1-create-annotations","title":"1. Create annotations","text":""},{"location":"AndroidAopPointCut/#example","title":"Example","text":"<p>Create an annotation named CustomIntercept and add @AndroidAopPointCut to your annotation</p> KotlinJava <pre><code>@AndroidAopPointCut(CustomInterceptCut::class)\n@Target(AnnotationTarget.FUNCTION,AnnotationTarget.PROPERTY_GETTER,AnnotationTarget.PROPERTY_SETTER)\n@Retention(AnnotationRetention.RUNTIME)\nannotation class CustomIntercept(\n    vararg val value: String = []\n)\n</code></pre> <pre><code>@AndroidAopPointCut(CustomInterceptCut.class)\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomIntercept {\n    String[] value() default {};\n}\n</code></pre> <ul> <li> <p>@AndroidAopPointCut's CustomInterceptCut.class is the class that handles the section for you (described below)</p> </li> <li> <p>@Target only works on methods, and setting other ones has no effect</p> </li> <li>For Java, you can set <code>ElementType.METHOD</code></li> <li> <p>For Kotlin, you can set <code>AnnotationTarget.FUNCTION</code>,<code>AnnotationTarget.PROPERTY_GETTER</code>,<code>AnnotationTarget.PROPERTY_SETTER</code></p> </li> <li> <p>@Retention can only use RetentionPolicy.RUNTIME</p> </li> </ul>"},{"location":"AndroidAopPointCut/#2-create-a-section-processing-class","title":"2. Create a section processing class","text":"<p>The section processing class needs to implement the BasePointCut interface and handle the section logic in invoke</p> <pre><code>interface BasePointCut&lt;T : Annotation&gt; {\n    fun invoke(joinPoint: ProceedJoinPoint, anno: T): Any?\n}\n</code></pre> <p>Note</p> <p>If the point cutting function is suspend Click here to view</p> <ul> <li>Introduction to ProceedJoinPoint</li> <li>Introduction to invoke return value</li> <li>Life Cycle </li> </ul>"},{"location":"AndroidAopPointCut/#for-example","title":"For example","text":"<p>CustomInterceptCut inherits from BasePointCut. You can see that there is a generic on BasePointCut. This generic is the @CustomIntercept annotation above. The two are related to each other. <pre><code>class CustomInterceptCut : BasePointCut&lt;CustomIntercept&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        annotation: CustomIntercept//annotation is the annotation you added to the method\n    ): Any? {\n        // Write your logic here\n        return joinPoint.proceed()\n    }\n}\n</code></pre></p>"},{"location":"AndroidAopPointCut/#3-use","title":"3. Use","text":"<p>Add the annotation you wrote directly to any method, such as onCustomIntercept(). When onCustomIntercept() is called, it will first enter the invoke method of CustomInterceptCut mentioned above.</p> <pre><code>@CustomIntercept(\"I am custom data\")\nfun onCustomIntercept() {\n\n}\n</code></pre>"},{"location":"AndroidAopReplaceClass/","title":"@AndroidAopReplaceClass","text":""},{"location":"AndroidAopReplaceClass/#brief-description","title":"Brief description","text":"<p>This function belongs to the advanced function, special attention should be paid when using it, otherwise it will be invalid</p> <p>This aspect is used to replace the method call in the code, and needs to be used in conjunction with @AndroidAopReplaceMethod. When the replaced method is called, it will enter the method annotated with @AndroidAopReplaceMethod</p> <ul> <li>Note that this method is essentially different from the other two. The first two focus on the execution of the method, and automatically retain the method that can execute the original logic (i.e. ProceedJoinPoint);</li> <li>This focuses on the method call, which replaces all the calling places with the static methods of the class you set, and does not automatically retain the method that executes the original logic</li> <li>The advantage of this method is that it can \"equivalently\" monitor the call of certain system methods (code in android.jar), and the first two do not have this feature, so if it is not based on this requirement, it is recommended to use @AndroidAopMatchClassMethod</li> </ul> <p>Note</p> <p><li>To sum up, this function can be said to be a supplement to @AndroidAopMatchClassMethod (the code in android.jar cannot be woven into AOP code). The reason why ProceedJoinPoint is not used is that this method may be restricted by different versions of Android. It can neither use reflection to call the original method nor weave in AOP code, so it cannot be encapsulated with ProceedJoinPoint. If you really want to use it, it is recommended to use MatchClassMethodProxy </li> <li>Although some system methods can be hooked, in the final analysis, they are calls within the hook installation package, not including calls at the framework layer</li> <li>After you modify the configuration of this aspect, you should clean the project before continuing development</li></p>"},{"location":"AndroidAopReplaceClass/#1-description","title":"1. Description","text":"<p> Note: The defined replacement class should be placed within the scan rules you set here include exclude Rules, it will not work if written outside the scope</p>"},{"location":"AndroidAopReplaceClass/#androidaopreplaceclass","title":"@AndroidAopReplaceClass","text":"<p><pre><code>@AndroidAopReplaceClass(\n    value = \"Full name of the class (including package name)\"\n    type = Matching type, not required, default SELF\n    excludeClasses = An array of classes that exclude inheritance(valid only when type is not SELF), not required\n    excludeWeaving = exclude weaving range\n    includeWeaving = include weaving range\n)\n</code></pre> - If the class name filled in by value is an internal class, do not use the <code>$</code> character, but <code>.</code></p> <ul> <li> <p>The annotated class is the replacement class; the parameter is the class to be replaced</p> </li> <li> <p>If the corresponding replaced method exists in the replacement method of the annotated class, it will not participate in the method replacement</p> </li> <li> <p>There are four types of type (if the default <code>SELF</code> is not set, please note the difference from <code>@AndroidAopMatchClassMethod</code>, the default types are different when they are not set):</p> <ul> <li><code>SELF</code> means that the class set by value is matched itself</li> <li><code>EXTENDS</code> means that all classes inherited from the class set by value are matched</li> <li><code>DIRECT_EXTENDS</code> means that the class set by directly inherited is matched</li> <li><code>LEAF_EXTENDS</code> means matching the class set by terminal inheritance (no subclasses) value</li> </ul> <pre><code>graph LR\nC(Class C) ---&gt; |Class C inherits from Class B| B{Class B};\nB ---&gt;|Class B inherits from Class A| A[Class A];\nB ---&gt;|DIRECT_EXTENDS / EXTENDS| A;\nC ----&gt;|LEAF_EXTENDS / EXTENDS| A;\nD(Class D) ---&gt;|Class D inherits from Class A| A;\nD ---&gt;|DIRECT_EXTENDS/ LEAF_EXTENDS / EXTENDS| A;</code></pre> <p>In simple terms, <code>LEAF_EXTENDS</code> and <code>DIRECT_EXTENDS</code> are two extremes. The former focuses on the last node in the inheritance relationship, while the latter focuses on the first node in the inheritance relationship.</p> </li> <li> <p>excludeWeaving and includeWeaving are similar to exclude and include in the getting started</p> </li> </ul>"},{"location":"AndroidAopReplaceClass/#androidaopreplacenew","title":"@AndroidAopReplaceNew","text":"<pre><code>@AndroidAopReplaceNew\n</code></pre> <p>For example, this method changes <code>new Thread()</code> to <code>new MyThread()</code></p> <ul> <li> <p>The annotated method must be public and static, but the method name can be defined arbitrarily</p> </li> <li> <p>There can only be one method parameter, and the parameter is the replaced class</p> <ul> <li>If the replaced class does not inherit the replaced class, then there will be problems with the subsequent object method call. You need to replace all its methods with @AndroidAopReplaceMethod</li> <li>If the replaced class inherits the replaced class, then there will be no problem with the subsequent method call</li> </ul> </li> <li> <p>Is the method return type empty?</p> <ul> <li>If it is not empty, the new object will be called back to this method, and the object returned by this method will also replace the new object. Usually when the return type is not empty, you should define it the same as the parameter type.</li> <li>If it is empty, only the class name after new will be replaced.</li> <li>In any case, the class name after new will become the parameter type of the method.</li> </ul> </li> <li>This will replace all constructor calls.</li> </ul>"},{"location":"AndroidAopReplaceClass/#androidaopreplacemethod","title":"@AndroidAopReplaceMethod","text":"<pre><code>@AndroidAopReplaceMethod(\n\"Method name (including return value type and parameter type)\"\n)\n</code></pre> <ul> <li> <p>The annotated method must be public and static, but the method name can be defined arbitrarily</p> </li> <li> <p>The annotated method is the replacement method; the parameter is the method to be replaced, which must include the return type and parameter type. The matching rules are as follows matching rules</p> </li> <li> <p>If the replaced method is a static method of the class, the parameter type, order and number of the replacement method you define should be consistent</p> </li> <li> <p>If the replaced method is a member method of a class, the first parameter of the replacement method you define must be the type of the replaced class (this is the meaning of the Toast.show example below), and the remaining parameter types, order, and number are consistent with the replaced method.</p> <ul> <li>There is an exception: the first type can be set to Any (Java is Object). This function is mainly for @AndroidAopReplaceNew not to inherit the replacement class to respond, because the replaced class no longer belongs to the replaced class</li> </ul> </li> <li> <p>The return type of the annotated method is consistent with the replaced method, regardless of whether the replaced method is static or not</p> </li> <li> <p>The replaced method must belong to the replaced class filled in by @AndroidAopReplaceClass</p> </li> <li> <p>If the replaced method starts with <code>&lt;init&gt;</code>, the function is divided into two cases</p> <ul> <li>1\u3001Fill in according to the following requirements. The function is similar to @AndroidAopReplaceNew. The difference is that this will only call back the new class, will not change the new class name, and can specify the construction method. (The object has been created)<ul> <li>The method must have only one parameter, which is the defined class to be replaced (must be equal to the class of @AndroidAopReplaceClass)</li> <li>And the return type cannot be empty (must inherit or be equal to the class of @AndroidAopReplaceClass)</li> <li>The object returned by the method will replace the new object (of course, it is also possible to directly return the callback object)</li> </ul> </li> <li>2\u3001Fill in according to the following requirements. The function is completely different from the previous one. At this time, the object has not been created (this function is available in versions 2.5.8 and above)<ul> <li>The parameters must be exactly the same as the constructor's parameter type and order, and finally a Class type parameter is appended (this is to let you know which class the original constructor belongs to)</li> <li>You need to manually rewrite the code to create the object, because in this case the object has not yet been created (the constructor can be called based on the Class returned to you and the current constructor type)</li> <li>And the return type cannot be empty (must inherit or be equal to the class of @AndroidAopReplaceClass)</li> <li>The object returned by the method will be assigned to the original call</li> </ul> </li> </ul> </li> </ul> <p>For specific writing requirements, please refer to the usage method below</p>"},{"location":"AndroidAopReplaceClass/#2-matching-rules","title":"2. Matching rules","text":"<p>You can see that the return value type and parameter type are written in the example below. The following is an introduction</p> <p>The difference from @AndroidAopMatchClassMethod is that this must be an exact match, and the writing is as follows:</p> <p>Matching writing formula: Return value type method name (parameter type, parameter type...)</p> <ul> <li>The return value type, method name, and parameter type must be written in full</li> <li>Wrap the parameter type with (), separate multiple parameter types with ,, and only write () if there is no parameter</li> <li>Use a space to separate the return value type and the method name</li> <li>Both the return value type and the parameter type must be represented by Java types. Except for the 8 basic types, other reference types are package name.class name</li> <li>If the function is modified with <code>suspend</code>, then the return value type should be written as <code>suspend</code> regardless of the type, and the parameter type should still be written according to the above points</li> <li> <p>For generic information (such as the collection List), the generic information must be erased</p> </li> <li> <p>Different from the replacement class name filled in, if the method parameter and return value type are inner classes, they need to be replaced with <code>$</code> instead of <code>.</code></p> </li> </ul> <p>Note</p> <p>AOP Code Generation Assistant, can help you generate code with one click</p> <p>Below is a table showing different types of Kotlin vs. Java. If it is Kotlin code, please check the corresponding code</p> <p>(If you find any incomplete information, please give me feedback)</p> Kotlin type Java type Int int Short short Byte byte Char char Long long Float float Double double Boolean boolean Int? java.lang.Integer Short? java.lang.Short Byte? java.lang.Byte Char? java.lang.Character Long? java.lang.Long Float? java.lang.Float Double? java.lang.Double Boolean? java.lang.Boolean String java.lang.String Unit\uff08Or do not write\uff09 void Unit? kotlin.Unit Nothing java.lang.Void Any java.lang.Object <p>Other data types not in the table above are reference types, and are written as package name.class name</p> <p>Note</p> <ol> <li><code>vararg str : String</code> in Kotlin is equivalent to <code>String...</code> in Java. In this matching, no matter what kind of code is used, it is represented by <code>String[]</code> (String is used as an example here, and other types are the same)</li> <li>For types with generics, do not write generics, for example, <code>java.lang.List&lt;String&gt; methodName(java.lang.List&lt;String&gt;)</code> should be directly written as <code>java.lang.List methodName(java.lang.List)</code></li> </ol>"},{"location":"AndroidAopReplaceClass/#3-use-cases","title":"3. Use cases","text":""},{"location":"AndroidAopReplaceClass/#1-java-writing","title":"1. Java writing","text":"<pre><code>@AndroidAopReplaceClass(\n        \"android.widget.Toast\"\n)\npublic class ReplaceToast {\n    @AndroidAopReplaceMethod(\n            \"android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)\"\n    )\n// Because the replaced method is static, the parameter type and order correspond to the replaced method\n    public static Toast makeText(Context context, CharSequence text, int duration) {\n        return Toast.makeText(context, \"ReplaceToast-\" + text, duration);\n    }\n\n    @AndroidAopReplaceMethod(\n            \"void setGravity(int , int , int )\"\n    )\n// Because the replaced method is not a static method, the first parameter is the replaced class, and the subsequent parameters correspond to the replaced method\n    public static void setGravity(Toast toast, int gravity, int xOffset, int yOffset) {\n        toast.setGravity(Gravity.CENTER, xOffset, yOffset);\n    }\n\n    @AndroidAopReplaceMethod(\n            \"void show()\"\n    )\n// Although the replaced method has no parameters, because it is not a static method, the first parameter is still the replaced class\n    public static void show(Toast toast) {\n        toast.show();\n    }\n}\n</code></pre> <p>This example means that all places where <code>Toast.makeText</code> and <code>Toast.show</code> in the code are replaced with <code>ReplaceToast.makeText</code> and <code>ReplaceToast.show</code></p>"},{"location":"AndroidAopReplaceClass/#2-kotlin-writing-method","title":"2. Kotlin writing method","text":"<pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String,java.lang.String)\")\n    @JvmStatic\n    fun e(tag: String, msg: String): Int {\n        return Log.e(tag, \"ReplaceLog-$msg\")\n    }\n}\n</code></pre> <p>This example means that all places where <code>Log.e</code> are written in the code are replaced with <code>ReplaceLog.e</code></p>"},{"location":"AndroidAopReplaceClass/#if-the-replaced-function-is-modified-with-suspend-then-you-can-only-write-it-in-kotlin-code-and-the-replacement-function-must-also-be-modified-with-suspend","title":"If the replaced function is modified with <code>suspend</code>, then you can only write it in Kotlin code, and the replacement function must also be modified with <code>suspend</code>","text":"<pre><code>@AndroidAopReplaceClass(\"com.flyjingfish.androidaop.MainActivity\")\nobject ReplaceGetData {\n    //The only change in the annotation parameter is the return type, which is changed to suspend, and the rest remain unchanged\n    @AndroidAopReplaceMethod(\"suspend getData(int)\")\n    @JvmStatic\n// The function definition writing rules here remain unchanged, just add an additional suspend modifier\n    suspend fun getData(mainActivity: MainActivity, num: Int): Int {\n        Log.e(\"ReplaceGetData\", \"getData\")\n        return mainActivity.getData(num + 1)\n    }\n}\n</code></pre>"},{"location":"AndroidAopReplaceClass/#3-construction-method","title":"3. Construction method","text":"<pre><code>@AndroidAopReplaceClass(value = \"com.flyjingfish.test_lib.TestMatch\", type = MatchType.EXTENDS)\nobject ReplaceTestMatch {\n\n    @AndroidAopReplaceNew\n    @JvmStatic\n    fun newTestMatch1(testBean: TestMatch3) {\n        //Replace the class name after new, the parameter type is the replaced type, the return type of this method is empty, and this method will not be called back\n    }\n\n    @AndroidAopReplaceNew\n    @JvmStatic\n    fun newTestMatch2(testBean: TestMatch3): TestMatch {\n        //Replace the class name after new, the parameter type is the replaced type, and the return type of this method is not empty, then this method will be called back, and the returned object will replace the new object\n        return new TestMatch ()\n    }\n\n    @AndroidAopReplaceMethod(\"&lt;init&gt;(int)\")\n    @JvmStatic\n    fun getTestBean(testBean: TestMatch): TestMatch {\n        //Only one parameter can be the replaced class, the return type cannot be empty, and the object returned by the method will replace the newly created object\n        return TestMatch(2)\n    }\n\n    @AndroidAopReplaceMethod(\"&lt;init&gt;(int)\")\n    @JvmStatic\n    fun getTestBean(num: Int,clazz :Class&lt;*&gt;) : TestMatch{\n        //The last parameter is of type Class. The types and order of the remaining parameters are exactly the same as the original constructor. The object is created in this method. No object has been created before.\n        return TestMatch(num)\n    }\n\n}\n</code></pre> <p>The above three usage methods can replace the new object. The difference is</p> <ul> <li> <p>The first method directly replaces the new class name (directly replaces the type)</p> </li> <li> <p>The second method not only replaces the new class name, but also calls back to the method. The object returned here will also replace the newly created object (the difference between the two is whether the return type is empty)</p> </li> <li> <p>The third method is different from the first two in that it does not replace the new class name, but calls back to the method. The object returned here will replace the newly created object. And the defined parameter must be one and only one type defined by @AndroidAopReplaceClass, and the return type cannot be null</p> </li> <li> <p>The fourth type is different from the first three in that it will neither replace the new class name nor have an object callback, you need to manually create this object. Its advantage is that it gets all the parameters for creating the object before the object is created, so that you can modify the parameters in advance and then create the object, so its advantage is that it has a pre-effect</p> </li> <li> <p>The function defined by @AndroidAopReplaceNew has one and only one parameter, and the parameter type can be any type except the basic type</p> </li> </ul>"},{"location":"AndroidAopReplaceClass/#4-proxy-usage-of-androidaopmatchclassmethod","title":"4. Proxy usage of @AndroidAopMatchClassMethod","text":"<ul> <li> <ol> <li>First, you must still use <code>@AndroidAopReplaceClass</code> to replace the method call, and use <code>@ProxyMethod</code> to add annotations to the replacement method</li> </ol> </li> <li> <p>The replaced method needs to be called in the method implementation</p> </li> <li>In addition to the requirements mentioned above, the definition of the method must be consistent with the original method, such as the name, annotations, parameter names, annotations on parameters, etc. of the original method. If you don't use this information, it doesn't matter. If you want to use it, you must do so</li> </ul> <pre><code>package com.flyjingfish.test_lib.replace;\n\n@AndroidAopReplaceClass(\n        \"android.widget.Toast\"\n)\npublic class ReplaceToast {\n    @AndroidAopReplaceMethod(\n            \"android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)\"\n    )\n    @ProxyMethod(proxyClass = Toast.class, type = ProxyType.STATIC_METHOD)\n    public static Toast makeText(Context context, CharSequence text, int duration) {\n        return Toast.makeText(context, text, duration);\n    }\n\n    @AndroidAopReplaceMethod(\n            \"void setGravity(int , int , int )\"\n    )\n    @ProxyMethod(proxyClass = Toast.class, type = ProxyType.METHOD)\n    public static void setGravity(Toast toast, int gravity, int xOffset, int yOffset) {\n        toast.setGravity(gravity, xOffset, yOffset);\n    }\n\n    @AndroidAopReplaceMethod(\n            \"void show()\"\n    )\n    @ProxyMethod(proxyClass = Toast.class, type = ProxyType.METHOD)\n    public static void show(Toast toast) {\n        toast.show();\n    }\n}\n</code></pre> <ul> <li> <ol> <li>Use <code>@AndroidAopMatchClassMethod</code> to define the <code>ReplaceToast</code> proxy class</li> </ol> </li> <li>type needs to be MatchType.SELF</li> <li>Use MatchClassMethodProxy or MatchClassMethodSuspendProxy class as the aspect processing class</li> <li>Implement the invokeProxy or invokeSuspendProxy method to handle the logic</li> </ul> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test_lib.replace.ReplaceToast\",\n    type = MatchType.SELF,\n    methodName = [\"*\"]\n)\nclass ReplaceToastProxy : MatchClassMethodProxy() {\n    override fun invokeProxy(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\n            \"ReplaceToastProxy\",\n            \"methodName=$methodName,\" + \"parameterNames=${joinPoint.targetMethod.parameterNames.toList()},\" + \"parameterTypes=${joinPoint.targetMethod.parameterTypes.toList()},\" + \"returnType=${joinPoint.targetMethod.returnType},\" + \"args=${joinPoint.args?.toList()},target=${joinPoint.target},targetClass=${joinPoint.targetClass},\"\n        )\n\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>So you can For some system methods, <code>ProceedJoinPoint</code> is used to control the method call. The key is to use <code>@ProxyMethod</code> to mark the method, so that the information returned by <code>ProceedJoinPoint</code> is the method information of the replaced class&gt; </p> <p>Note</p> <p>AOP code generation assistant, which can help you generate proxy usage code with one click</p>"},{"location":"AspectJ_Migration_Guide/","title":"AspectJ Migration Guide","text":"<p>Migrating from AspectJ is also very simple</p>"},{"location":"AspectJ_Migration_Guide/#1-annotation-based-aspects","title":"1. Annotation-based aspects","text":""},{"location":"AspectJ_Migration_Guide/#aspectj-code","title":"AspectJ code","text":"<p>Take click annotation as an example, you may have such a code</p> <p>Click annotation</p> <pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SingleClick {\n\n    long DEFAULT_INTERVAL_MILLIS = 1000;\n\n    /**\n     * @return The interval between quick clicks (ms), the default is 1000ms\n     */\n    long value() default DEFAULT_INTERVAL_MILLIS;\n}\n</code></pre> <p>Click annotation aspect</p> <pre><code>@Aspect\npublic final class SingleClick$$AspectJ {\n    @Pointcut(\"within(@com.flyjingfish.light_aop_core.annotations.SingleClick *)\")\n    public final void withinAnnotatedClass() {\n    }\n\n    @Pointcut(\"execution(!synthetic * *(..)) &amp;&amp; withinAnnotatedClass()\")\n    public final void methodInsideAnnotatedType() {\n    }\n\n    @Pointcut(\"execution(@com.flyjingfish.light_aop_core.annotations.SingleClick * *(..)) || methodInsideAnnotatedType()\")\n    public final void method() {\n    }\n\n    @Around(\"method() &amp;&amp; @annotation(vSingleClick)\")\n    public final Object cutExecute(final ProceedingJoinPoint joinPoint,\n                                   final SingleClick vSingleClick) {\n// Section processing logic\n        return result;\n    }\n}\n</code></pre>"},{"location":"AspectJ_Migration_Guide/#androidaop-code","title":"AndroidAOP code","text":"<p>First create a class to handle sections</p> <pre><code>class SingleClickCut : BasePointCut&lt;SingleClick&gt;() {\n    //Fill in your original annotations for this pattern\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: SingleClick): Any? {\n//Copy the logic code here and make some changes\n        return null\n    }\n\n}\n</code></pre> <p>Then add the @AndroidAopPointCut(SingleClickCut.class) annotation on top of your original annotation. The annotation <code>@Retention</code> can only set <code>RUNTIME</code>, and <code>@Target</code> can only set <code>METHOD</code></p> <pre><code>//Just add such an annotation. The parameter is the section processing class SingleClickCut.class created above\n@AndroidAopPointCut(SingleClickCut.class)\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SingleClick {\n\n    long DEFAULT_INTERVAL_MILLIS = 1000;\n\n    /**\n     * @return The interval between quick clicks (ms), the default is 1000ms\n     */\n    long value() default DEFAULT_INTERVAL_MILLIS;\n}\n</code></pre> Kotlin writing <pre><code>@AndroidAopPointCut(SingleClickCut::class)\n@Retention(AnnotationRetention.RUNTIME)\n@Target(\n    AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER\n)\nannotation class SingleClick(\n    /**\n     * The interval between quick clicks (ms), the default is 1000ms\n     */\n    val value: Long = DEFAULT_INTERVAL_MILLIS\n) {\n    companion object {\n        const val DEFAULT_INTERVAL_MILLIS: Long = 1000\n    }\n}\n</code></pre>"},{"location":"AspectJ_Migration_Guide/#2-aspects-that-match-the-execution-process-of-a-class-method","title":"2. Aspects that match the execution process of a class method","text":"<p>@AndroidAopMatchClassMethod is similar to the execution matching type in AspectJ, focusing on the execution of methods</p> <p>AndroidAOP currently only matches methods of a class, not just a method regardless of the class. Because the author thinks that doing so is almost meaningless, and doing so often leads to the addition of many classes that do not want to be added to the aspect, which is not conducive to everyone's management and control of their own code (a bit out of control~)</p>"},{"location":"AspectJ_Migration_Guide/#aspectj-code_1","title":"AspectJ code","text":"<p>For example, you originally set the aspect code for <code>threadTest</code> of <code>MainActivity</code>, as shown below:</p> <pre><code>package com.flyjingfish.test\n\nclass MainActivity : BaseActivity() {\n    fun threadTest() {\n        Log.e(\"threadTest\", \"------\")\n    }\n}\n</code></pre> <p>The matching aspect code of AspectJ is as follows:</p> <pre><code>@Aspect\npublic class CheckAspectJ {\n    private static final String TAG = \"CheckAspectJ\";\n\n    @Pointcut(\"execution(* com.flyjingfish.test.MainActivity.threadTest())\")\n    public void pointcutThreadTest() {\n    }\n\n    @Around(\"pointcutThreadTest()\")\n    public void calculateFunctionTime(ProceedingJoinPoint joinPoint) throws Throwable {\n        Log.i(TAG, \"pointcut1 ---------calculateFunctionTime---------@Around\");\n        long beginTime = System.currentTimeMillis();\n        joinPoint.proceed();\n        long endTime = System.currentTimeMillis();\n        Log.i(TAG, \"pointcut1 ----------calculateFunctionTime-- -----Running time: \" + (endTime - beginTime));\n    }\n} \n</code></pre>"},{"location":"AspectJ_Migration_Guide/#androidaop-code_1","title":"AndroidAOP code","text":"<p>@AndroidAopMatchClassMethod <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test.MainActivity\",\n    methodName = [\"threadTest\"],\n    type = MatchType.SELF\n)\nclass MatchActivityMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchActivityMethod\", \"=====invoke=====$methodName\")\n        long beginTime = System . currentTimeMillis ();\n        joinPoint.proceed();\n        long endTime = System . currentTimeMillis ();\n        return null\n    }\n}\n</code></pre></p>"},{"location":"AspectJ_Migration_Guide/#3-match-the-called-aspect-of-a-class-method","title":"3. Match the called aspect of a class method","text":"<p>@AndroidAopReplaceClass is similar to the call matching type in AspectJ, focusing on the method call</p>"},{"location":"AspectJ_Migration_Guide/#aspectj-code_2","title":"AspectJ code","text":"<p>Those who have used AspectJ should know that some system methods can only be matched through call. For example, you originally targeted <code>e</code> of <code>android.util.Log</code> sets the aspect code, and the matching aspect code of AspectJ is as follows:</p> <pre><code>@Aspect\npublic final class TestAspectJ {\n    @Pointcut(\"call(* android.util.Log.e(..))\")\n    public void pointcutThreadTest() {\n    }\n\n    @Around(\"pointcutThreadTest()\")\n    public final Object cutExecute(final JoinPoint joinPoint) throws Throwable {\n        Log.e(\"TestAspectJ\", \"====cutExecute\");\n        return null;\n    }\n}\n</code></pre>"},{"location":"AspectJ_Migration_Guide/#androidaop-code_2","title":"AndroidAOP code","text":"<p>Click here to see detailed usage of @AndroidAopReplaceClass</p> <pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String tag, java.lang.String msg)\")\n    @JvmStatic\n    fun logE(String tag, String msg): Int {\n        return Log.e(tag, msg)\n    }\n} \n</code></pre> <p>Note</p> <p>Unlike AspectJ, AndroidAOP does not retain the way to execute the original method, but you can call the original method yourself without causing infinite recursive calls (indirect calls to the original method will cause infinite recursion here is a solution), Click here for detailed usage</p>"},{"location":"AspectJ_Migration_Guide/#4-other-aspect-methods","title":"4. Other aspect methods","text":"<ul> <li>@Before: Execute code before method execution.</li> <li>@After: Execute code after method execution, regardless of whether an exception is thrown.</li> <li>@AfterReturning: Execute code after method execution, only when the method returns successfully.</li> <li>@AfterThrowing: Execute code when a method throws an exception.</li> </ul> <p>All of the above can be indirectly implemented through several existing annotation aspects click here to refer to FAQ #5 Want to insert code before and after the method</p>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#1-what-to-do-when-there-are-multiple-annotations-or-matching-aspects-on-the-same-method","title":"1. What to do when there are multiple annotations or matching aspects on the same method","text":"<ul> <li>When multiple aspects are superimposed on a method, annotations take precedence over matching   aspects, and annotation aspects are executed from top to bottom</li> <li>The next aspect will be executed only after proceed is called, and the   code in the aspect method will be called only after proceed is executed on the   last aspect among multiple aspects</li> <li>Calling proceed(args) in   the previous aspect can update the parameters passed in the method, and the updated parameters of   the previous layer will also be obtained in the next aspect</li> <li>When there is an asynchronous   call proceed, the return value   of the first asynchronous   call proceed (that is, the   return value of invoke) is the return value of the cut-in method; otherwise, if there is no   asynchronous call proceed, the   return value is the return value of the last cut-in method</li> </ul>"},{"location":"FAQ/#2-error-zipfile-invalid-loc-header-bad-signature-when-building","title":"2. Error \"ZipFile invalid LOC header (bad signature)\" when building","text":"<ul> <li>Please restart Android Studio and then clean the project</li> </ul>"},{"location":"FAQ/#3-memory-leak-occurs-in-the-cut-in-processing-class","title":"3. Memory leak occurs in the cut-in processing class?","text":"<ul> <li>This situation is usually because you have made a strong reference in the aspect processing class \uff08Handling class lifecycle\uff09</li> </ul>"},{"location":"FAQ/#4-want-to-see-all-the-locations-where-the-aspect-code-is-added","title":"4. Want to see all the locations where the aspect code is added","text":"<ul> <li>Add the androidAopConfig configuration item in the app's build.gradle, and set cutInfoJson to true</li> </ul> <pre><code>plugins {\n...\n}\nandroidAopConfig {\n  //Closed by default, enabled after build or packaging, a cut information json file will be generated in app/build/tmp/cutInfo.json\n  cutInfoJson true\n}\nandroid {\n...\n}\n</code></pre>"},{"location":"FAQ/#5-want-to-insert-code-before-and-after-the-method","title":"5. Want to insert code before and after the method","text":"<ul> <li>Matching aspect</li> </ul> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n    methodName = [\"test2\"],\n    type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        //Insert code before the method\n        val value = joinPoint.proceed()\n        //Insert code after the method\n        return value\n    }\n}\n</code></pre> Click here for more details <ul> <li>Annotation aspect</li> </ul> <pre><code>class CustomInterceptCut : BasePointCut&lt;CustomIntercept&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        annotation: CustomIntercept //annotation is the annotation you add to the method\n    ): Any? {\n        //Insert code before the method\n        val value = joinPoint.proceed()\n        //Insert code after the method\n        return value\n    }\n}\n</code></pre> <ul> <li>Replace the aspect</li> </ul> <pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String,java.lang.String)\")\n    @JvmStatic\n    fun e(tag: String, msg: String): Int {\n        //Insert code before the method\n        val log = Log.e(tag, \"ReplaceLog-$msg\")\n        //Insert code after the method\n        return log\n    }\n}\n</code></pre> <ul> <li><code>AspectJ</code>'s <code>@AfterReturning</code> and <code>@AfterThrowing</code> We will match the aspect Let's take an example</li> </ul> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n    methodName = [\"test2\"],\n    type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: TryCatch): Any? {\n        return try {\n            val value = joinPoint.proceed()\n            // Here is @AfterReturning\n            value\n        } catch (e: Throwable) {\n            // Here is @AfterThrowing\n            throw RuntimeException(e)\n        }\n    }\n}\n</code></pre>"},{"location":"FAQ/#6-what-is-the-life-cycle-of-the-aspect-processing-class-of-the-matching-aspect-and-the-annotation-aspect","title":"6. What is the life cycle of the aspect processing class of the matching aspect and the annotation aspect?","text":"<p>The aspect processing class is bound to the corresponding method of the class, which can be divided into two cases</p> <ul> <li>a. If the pointcut method is not static<ul> <li>The aspect processing class will be recycled as the object where the method is located is recycled, and it is timely (starting from 2.5.4, it is optimized to be timely).</li> <li>And each object's pointcut method corresponds to an object of the aspect processing class, that   is, there are as many objects as the class where the pointcut method is located creates.</li> </ul> </li> <li>b. If the pointcut method is static<ul> <li>Because the aspect method is static, the aspect processing class will always exist once it is created.</li> <li>And a class method only corresponds to one aspect processing class</li> </ul> </li> </ul> <p>No matter which type a or b is, the aspect processing class object will only be created when the method is executed.</p> <p>This is different from Aspectj, because we often want to set some member variables in the aspect processing class to facilitate the use of the next aspect processing; if you want to do this in Aspectj, you need to save the \"member variable\" as a \"static variable\", and you also need to distinguish what object executes the pointcut method. You need to write a lot of code. AndroidAOP just optimizes and solves this problem.</p>"},{"location":"FAQ/#7-compilation-error-or-file-usage-on-windows-computer","title":"7. Compilation error or file usage on Windows computer","text":"<ul> <li>Try upgrading <code>Gradle</code> to <code>8.7 or above</code> to see if it can be solved</li> </ul> <ul> <li>Then make sure that this library is the latest version, and then make sure        that <code>id 'android.aop'</code> is in the last line of <code>build.gradle</code> of the app module</li> </ul> <ul> <li>Otherwise, please try the following steps (Please note that the following is only for        Windows computers, and Mac computers should not have this problem)</li> </ul> Click here for more details <ul> <li> <p>First, make sure that running <code>./gradlew --stop</code> directly can succeed. If it fails, please check it online and then proceed to the following steps </p> </li> <li> <p>Click on the run configuration        </p> </li> <li> <p>Add the <code>Run External tool</code> task type based on the original one        </p> </li> <li> <p>Configure as follows        </p> </li> </ul> <p>Parameters: Program: <code>The absolute path of the project\\gradlew.bat</code> Arguments: <code>./gradlew --stop</code> Working directory: <code>The absolute path of the project\\</code></p> <ul> <li> <p>Adjust the order to the top        </p> </li> <li> <p>Click OK to complete       </p> </li> <li> <p>Run the project directly. If the following situation occurs, it means that the configuration is successful        </p> </li> <li> <p>In addition, some netizens mentioned that changing <code>ksp</code> to <code>kapt</code> can also solve the problem</p> </li> </ul>"},{"location":"FAQ/#8-caused-by-javalangsecurityexception-digest-error-related-errors-the-bug-has-been-fixed-in-155-version-and-it-is-recommended-to-upgrade-first","title":"8. \"Caused by: java.lang.SecurityException: digest error\" related errors (The bug has been fixed in 1.5.5 version, and it is recommended to upgrade first)","text":"Click here for more details <p>The jar package you added contains the following files, please delete them and import the jar package locally instead </p> <p> </p> <p>Operation steps</p> <ul> <li> <p>Open the directory where the jar package is located<code>cd /Users/a111/Downloads/ida-android-new/app/libs</code></p> </li> <li> <p>Unzip the jar package <code>jar -xvf bcprov-jdk15on-1.69.jar</code></p> </li> </ul> <p></p> <ul> <li>After unzipping</li> </ul> <p></p> <ul> <li>Open META-INF and delete the following files</li> </ul> <p></p> <ul> <li>Packaging, you can use it later<code>jar -cfm0 bcprov-jdk15on-1.69.jar META-INF/MANIFEST.MF org</code></li> </ul> <p></p>"},{"location":"FAQ/#9-why-do-i-still-feel-that-the-package-compilation-is-slow-even-though-i-have-enabled-androidaopdebugmode-true","title":"9. Why do I still feel that the package compilation is slow even though I have enabled <code>androidAop.debugMode = true</code>?","text":"<p>The main reason for this is that you may have used some <code>Router</code> libraries or other plugins that change the packaging method. You can refer to here to transform your project click here, here is how to remove the plugin part of these libraries and use AndroidAOP to complete its plugin work, so you can delete these plugins to speed up packaging</p>"},{"location":"FAQ/#10-how-to-match-variable-parameters","title":"10. How to match variable parameters?","text":"<p><code>vararg str : String</code> in Kotlin is equivalent to <code>String...</code> in Java. In this matching, no matter what kind of code is represented by <code>String[]</code> (String is used as an example here, and other types are the same)</p>"},{"location":"FAQ/#11-after-adding-this-library-it-prompts-that-the-file-cannot-be-found-when-installing-the-app","title":"11. After adding this library, it prompts that the file cannot be found when installing the app","text":"<p>Check whether the configuration in your build.gradle contains Chinese. If there is Chinese, please try to change it to English and install it again</p>"},{"location":"FAQ/#12-will-calling-the-original-method-in-the-method-annotated-with-androidaopreplacemethod-cause-recursion","title":"12. Will calling the original method in the method annotated with @AndroidAopReplaceMethod cause recursion?","text":"<ul> <li> <p>If it is a direct call, it will not cause recursion, and the framework has already handled it</p> </li> <li> <p>If it is an indirect call, it will cause recursion. For example, calling methods of other classes that contain the original method will not be processed by the framework. If you need to do this, you can combine excludeWeaving of @AndroidAopReplaceClass or use exclude in the fourth step of homepage access to exclude the indirect call class.</p> </li> </ul>"},{"location":"FAQ/#13-what-should-i-do-if-i-dont-want-to-introduce-the-built-in-annotation-aspect","title":"13. What should I do if I don\u2019t want to introduce the built-in annotation aspect?","text":"<p>Please upgrade to version 2.1.5 or later, and check the access step 3</p>"},{"location":"FAQ/#14-different-modules-of-componentized-projects-use-products-such-as-aar-for-compilation-how-to-speed-up-the-packaging-speed","title":"14. Different modules of componentized projects use products such as aar for compilation. How to speed up the packaging speed?","text":"<ul> <li>The answer is still to use debugMode, which has been explained in \"Getting Started\" Step 5 - debugMode Mode. In this case, you should configure it as follows</li> </ul> <pre><code>//\ud83d\udc47This item is undoubtedly, it must be turned on! !\nandroidAop.debugMode=true\n//\ud83d\udc47This item needs to be turned off when you release the aar package. You can't turn it on again, because the release of aar is actually the release of the release package, don't you think?\nandroidAop.debugMode.variantOnlyDebug=false\n</code></pre> <ul> <li>As for whether to use reflection, it depends on the person. It depends on your choice</li> </ul> <pre><code>//\ud83d\udc47Turn it on to use reflection\nandroidAop.reflectInvokeMethod=true\n//\ud83d\udc47This item is similar to androidAop.debugMode.variantOnlyDebug. If you use reflection in the release package, turn this item off! !\nandroidAop.reflectInvokeMethod.variantOnlyDebug=false\n</code></pre> <p>In summary, releasing aar is actually the same as releasing apk, and the understanding of the above configurations is actually the same</p> <p>Some people may still have questions, how should they be used in the final packaging?</p> <ul> <li>In fact, it is okay to continue using debugMode, and the configuration is basically the same as   above.</li> <li>If you do not use debugMode, the aar packages of your different modules have actually been   processed by AOP according to the above steps. You do not need to do it again when packaging. You   can remove it under the app module, for example:</li> </ul> <pre><code>androidAopConfig {\n    //\ud83d\udc47 Exclude the aar packages that have been processed by AOP, and you can still read the aspect configuration of these packages\n    exclude 'aar package name 1', 'aar package name 2'\n    //\u2757\ufe0f\u2757\ufe0f\u2757\ufe0fIt is worth mentioning that when you publish aar, do not configure the package name of the aar you want to publish here, otherwise the aar will not be processed by AOP\n}\n</code></pre>"},{"location":"FAQ/#15-compile-time-error-caused-by-javalangruntimeexception-cannot-find-comxxxyyytest-comxxxyyytest-found-in-comxxxyyytestclass","title":"15. Compile-time error <code>Caused by: java.lang.RuntimeException: cannot find com.xxx.yyy.test: com.xxx.yyy.Test found in com/xxx/yyy/test.class</code>","text":"<ul> <li>This is usually caused by a package and class with the same name. You should change one of the names.</li> </ul>"},{"location":"Implications/","title":"Implications","text":""},{"location":"Implications/#1-i-dont-know-if-you-have-such-a-requirement-there-is-an-interface-used-in-multiple-places-in-this-case-you-may-write-a-tool-class-to-encapsulate-it","title":"1. I don\u2019t know if you have such a requirement. There is an interface used in multiple places. In this case, you may write a tool class to encapsulate it.","text":"<p>In fact, for this kind of demand, you can make an annotation aspect. When processing the aspect, you can pass the data back to the aspect method after requesting it, for example:</p> <p><pre><code>@AndroidAopPointCut(CommonDataCut::class)\n@Target(\n    AnnotationTarget.FUNCTION\n)\n@Retention(AnnotationRetention.RUNTIME)\n@Keep\nannotation class CommonData\n</code></pre> <pre><code>class CommonDataCut : BasePointCut&lt;CommonData&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        anno: CommonData\n    ): Any? {\n        if (joinPoint.args[0] != null) {\n// If there is data, continue to execute the method directly\n            joinPoint.proceed()\n        } else {\n// If there is no data, write the network request data here, and call joinPoint.proceed(data) after the data is returned to pass the data back to the method\n            HttpData.getInstance().getCountryList(req, new HttpResponeListener &lt; Data &gt;() {\n\n                @Override\n                public void onSuccess(String url, Data response) {\n                    joinPoint.proceed(response)\n                }\n\n            });\n        }\n\n        return null\n    }\n}\n</code></pre> <pre><code>@CommonData\nfun onTest(data: Data) {\n//Because the facet has passed the data back, the data is no longer null\n}\n//When calling the method, just pass null, and get the data after entering the facet. After entering the method, the data will be available\nbinding.btnSingleClick.setOnClickListener {\n    onTest(null)\n}\n</code></pre></p>"},{"location":"Implications/#2-in-addition-there-is-no-way-to-pass-objects-to-the-facet-annotation-or-the-data-is-dynamic-so-what-should-i-do","title":"2. In addition, there is no way to pass objects to the facet annotation, or the data is dynamic, so what should I do?","text":"<p><pre><code>@AndroidAopPointCut(CommonDataCut::class)\n@Target(\n    AnnotationTarget.FUNCTION\n)\n@Retention(AnnotationRetention.RUNTIME)\n@Keep\nannotation class CommonData\n</code></pre> <pre><code>class CommonDataCut : BasePointCut&lt;CommonData&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        anno: CommonData\n    ): Any? {\n        if (!joinPoint.args.isNullOrEmpty()) {\n            val arg1 =\n                joinPoint.args[0] // This is the incoming data, so you can pass data to the slice at will\n\n        }\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <pre><code>@CommonData\nfun onTest(number: Int) {//num is the dynamic data of the incoming slice, regardless of type\n\n}\n\nbinding.btnSingleClick.setOnClickListener {\n//Input dynamic data when calling the method\n    onTest(1)\n}\n</code></pre></p>"},{"location":"Implications/#3-if-you-want-to-hook-all-onclick-of-androidviewviewonclicklistener-in-other-words-you-want-to-globally-monitor-all-click-events-of-onclicklistener-the-code-is-as-follows","title":"3. If you want to hook all onClick of android.view.View.OnClickListener, in other words, you want to globally monitor all click events of OnClickListener. The code is as follows:","text":"<p><pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS //type must be EXTENDS because you want to hook all classes that inherit OnClickListener\n)\nclass MatchOnClick : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> Here is a tip for using lambda click listener;</p> <p>The target of ProceedJoinPoint is not android.view.View.OnClickListener</p> <ul> <li>For Java, the target is the object of the outermost class of the file</li> <li>For Kotlin, the target is null</li> </ul> <p>The methodName of the invoke callback is not onClick but the method name automatically generated during compilation, similar to onCreate\\(lambda\\)14, which contains the lambda keyword</p> <p>For the view of onClick(view:View)</p> <ul> <li>If it is Kotlin code, ProceedJoinPoint.args[1]</li> <li>If it is Java code, ProceedJoinPoint.args[0]</li> </ul> <p>I will not go into details about this, you will know it after using it yourself;</p> <p>To summarize: In fact, for all lambda's ProceedJoinPoint.args</p> <ul> <li>If it is Kotlin, the first parameter is the object of the outermost class of the file where the cut point is located, and the subsequent parameters are all the parameters of the hook method</li> <li>If it is Java, it starts from the first parameter and is hook All parameters of the method</li> </ul>"},{"location":"Implications/#4-i-believe-that-when-you-use-the-permission-permission-you-may-think-that-now-you-only-get-permission-to-enter-the-method-but-there-is-no-callback-without-permission-the-following-example-teaches-you-how-to-do-it","title":"4. I believe that when you use the permission <code>@Permission</code>, you may think that now you only get permission to enter the method, but there is no callback without permission. The following example teaches you how to do it","text":"<ul> <li>First, define an interface for permission rejection. Here, I define one callback as <code>@Permission</code> and the other as the result returned by the permission framework (here I use rxpermissions, you can use it at will)     <pre><code>interface PermissionRejectListener {\n    fun onReject(\n        permission: com.flyjingfish.android_aop_core.annotations.Permission,\n        permissionResult: Permission\n    )\n}\n</code></pre></li> <li>Use the <code>@Permission</code> permission annotation and implement the <code>PermissionRejectListener</code> interface for the object where its method is located     <pre><code>// Implement PermissionRejectListener on the object using @Permission Interface \nclass MainActivity : BaseActivity2(), PermissionRejectListener {\n    lateinit var binding: ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState) binding = ActivityMainBinding . inflate (layoutInflater) setContentView (binding.root) binding . btnPermission . setOnClickenerListener { toGetPicture() } binding . btnPermission2 . setOnClickListener { toOpenCamera() }\n    }\n\n    @Permission(\n        tag = \"toGetPicture\",\n        value = [Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE]\n    )\n    fun toGetPicture() { //Find pictures } @Permission(tag = \"toOpenCamera\",value = [Manifest.permission.CAMERA]) fun toOpenCamera(){\n//Open the camera\n    }\n\n    override fun onReject(\n        permission: Permission,\n        permissionResult: com.tbruyelle.rxpermissions3.Permission\n    ) {\n//Use the tag to distinguish which method's permission is denied\n        if (permission.tag == \"toGetPicture\") {\n\n        } else if (permission.tag == \"toOpenCamera\") {\n\n        }\n    }\n}\n</code></pre></li> <li>Set the code for requesting permissions on your <code>Application</code> <pre><code>class MyApp2 : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        AndroidAop.setOnPermissionsInterceptListener(object : OnPermissionsInterceptListener {\n            @SuppressLint(\"CheckResult\")\n            override fun requestPermission(\n                joinPoint: ProceedJoinPoint,\n                permission: Permission,\n                call: OnRequestPermissionListener\n            ) {\n                val target = joinPoint.getTarget()\n                val permissions: Array&lt;out String&gt; = permission.value\n                when (target) {\n                    is FragmentActivity -&gt; {\n                        val rxPermissions = RxPermissions((target as FragmentActivity?)!!)\n                        rxPermissions.requestEach(*permissions)\n                            .subscribe { permissionResult: com.tbruyelle.rxpermissions3.Permission -&gt;\n                                call.onCall(permissionResult.granted)\n                                //\ud83d\udc47The key is here\ud83d\udc47\n                                if (!permissionResult.granted &amp;&amp; target is PermissionRejectListener) {\n                                    (target as PermissionRejectListener).onReject(\n                                        permission,\n                                        permissionResult\n                                    )\n                                }\n                            }\n                    }\n\n                    is Fragment -&gt; {\n                        val rxPermissions = RxPermissions((target as Fragment?)!!)\n                        rxPermissions.requestEach(*permissions)\n                            .subscribe { permissionResult: com.tbruyelle.rxpermissions3.Permission -&gt;\n                                call.onCall(permissionResult.granted)\n                                //\ud83d\udc47The key is here\ud83d\udc47\n                                if (!permissionResult.granted &amp;&amp; target is PermissionRejectListener) {\n                                    (target as PermissionRejectListener).onReject(\n                                        permission,\n                                        permissionResult\n                                    )\n                                }\n                            }\n                    }\n\n                    else -&gt; {\n                        // TODO: target is not FragmentActivity or Fragment, indicating that the method where the annotation is located is not in it. Please handle this situation yourself.\n                        // Suggestion: The first parameter of the cut point method can be set to FragmentActivity or Fragment, and then joinPoint.args[0] can be obtained\n                    }\n                }\n            }\n        })\n\n    }\n}\n</code></pre></li> </ul> <p>Note</p> <p>The core of this technique is \"solving the problem of not being able to call the method of the object where the pointcut method is located\", solving this problem by adding an interface to the object where the pointcut method is located, and most importantly, making it universal</p>"},{"location":"Implications/#5-is-the-third-party-routing-library-not-compatible-with-agp8-here-is-an-example-of-arouter-to-teach-you-how-to-use-androidaop-to-solve-this-problem","title":"5. Is the third-party routing library not compatible with AGP8? Here is an example of ARouter to teach you how to use AndroidAOP to solve this problem","text":"<p>What does the ARouter plugin library mainly do? Why can AndroidAOP solve this problem? In fact, its plugin library does two things:</p> <ol> <li>Find three categories.</li> <li>Automatically register these three categories.</li> </ol> <p>No more nonsense, let\u2019s go straight to the code <pre><code>object AlibabaCollect {\n    private val classNameSet =\n        mutableSetOf&lt;String&gt;() @AndroidAopCollectMethod(regex = \"com.alibaba.android.arouter.routes.*?\", collectType = CollectType.DIRECT_EXTENDS) @JvmStatic\n    fun collectIRouteRoot(sub: Class&lt;out IRouteRoot&gt;) {\n        Log.e(\"A libabaCollect\", \"collectIRouteRoot=$sub\") classNameSet . add (sub.name)\n    }\n    @AndroidAopCollectMethod(\n        regex = \"com.alibaba.android.arouter.routes.*?\",\n        collectType = CollectType.DIRECT_EXTENDS\n    )\n    @JvmStatic\n    fun collectIProviderGroup(sub: Class&lt;out IProviderGroup&gt;) {\n        Log.e(\"AlibabaCollect\", \"collectIProviderGroup=$sub\")\n        classNameSet.add(sub.name)\n    }\n\n    @AndroidAopCollectMethod(\n        regex = \"com.alibaba.android.arouter.routes.*?\",\n        collectType = CollectType.DIRECT_EXTENDS\n    )\n    @JvmStatic\n    fun collectIInterceptorGroup(sub: Class&lt;out IInterceptorGroup&gt;) {\n        Log.e(\"AlibabaCollect\", \"collectIInterceptorGroup=$sub\")\n        classNameSet.add(sub.name)\n    }\n\n    fun getClassNameSet(): MutableSet&lt;String&gt; {\n        return classNameSet\n    }\n}\n</code></pre></p> <p>The code above is the first thing that the ARouter plugin does, which is to search for these three categories</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.alibaba.android.arouter.core.LogisticsCenter\",\n    methodName = [\"loadRouterMap\"],\n    type = MatchType.SELF\n)\nclass ARouterMatch : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        val any = joinPoint.proceed()\n        val registerMethod = LogisticsCenter::class.java.getDeclaredMethod(\n            \"register\",\n            java.lang.String::class.java\n        ) registerMethod . isAccessible = true\n        val classNameSet = AlibabaCollect.getClassNameSet() classNameSet . forEach {\n            registerMethod.invoke(\n                null,\n                it\n            ) Log . e (\"ARouterMatch\", \"registerMethod=$it\")\n        } return any\n    }\n} \n</code></pre> <p>The above is the second thing done by the ARouter plug-in. <code>ARouter.init(this)</code> code calls <code>LogisticsCenter.loadRouterMap()</code> to register all three types. That's all.</p> <p>After these two steps of configuration, you can delete <code>classpath \"com.alibaba:arouter-register:?\"</code>. It is worth noting that the above configuration is only effective if you turn off <code>androidAop.debugMode = false</code>. In addition, because ARouter can be used without plugins, you can still turn on debugMode after testing and turn it off when you build the release package (the latest version adds this sentence <code>androidAop.debugMode.variantOnlyDebug = true</code> without manual closing)</p> <p>Note</p> <p>Finally, when you call <code>ARouter.init(this)</code>, you will see the log below, which means the code has taken effect! Finally, don't forget to do anti-obfuscation processing on <code>com.alibaba.android.arouter.core.LogisticsCenter</code>, because reflection is used above</p> <pre><code>Load router map by arouter-auto-register plugin.\n</code></pre>"},{"location":"Implications/#in-summary-in-fact-the-aspect-can-bring-a-lot-of-portability-to-our-development-the-key-is-to-see-how-everyone-uses-it","title":"In summary, in fact, the aspect can bring a lot of portability to our development, the key is to see how everyone uses it","text":""},{"location":"Pointcut_return/","title":"Pointcut method return value","text":""},{"location":"Pointcut_return/#ordinary-function","title":"Ordinary function","text":"<p>For @AndroidAopPointCut and @AndroidAopMatchClassMethod, both aspects have their aspect callback processing classes respectively</p> <ul> <li>@AndroidAopPointCut corresponds to BasePointCut <pre><code>interface BasePointCut&lt;T : Annotation&gt; {\n    fun invoke(joinPoint: ProceedJoinPoint, anno: T): Any?\n}\n</code></pre></li> <li>@AndroidAopMatchClassMethod corresponds to MatchClassMethod <pre><code>interface MatchClassMethod {\n    fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any?\n}\n</code></pre></li> </ul> <p>Note</p> <p>You can see that both invoke methods have a return value, which will replace the return value of the entry point method and will be automatically converted to the return type of the original method, but the following two types have no return value</p>"},{"location":"Pointcut_return/#what-is-the-return-value","title":"What is the return value","text":"<ul> <li>If the section method has a return value, the return value of invoke is the section method return value</li> <li>In addition, if the section method has a return value, the return value type of invoke must be consistent with the section method return type</li> <li>If the section method does not have a return value, it doesn\u2019t matter what is returned</li> </ul> <p><pre><code>@MyAnno\npublic int numberAdd(int value1,int value2){\n        int result=value1+value2;\n        return result;\n        }\n</code></pre> <pre><code>public class MyAnnoCut implements BasePointCut&lt;MyAnno&gt; {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull MyAnno anno) {\n        int value1 = (int) joinPoint.args[0];\n        int value2 = (int) joinPoint.args[1];\n        int result = value1 * value2;\n        return result;\n    }\n}\n</code></pre> For example, the numberAdd method above returns the addition of two parameters. After entering the section, I want to change it to multiplication of two numbers, so what is the return value? I believe you already know it</p>"},{"location":"Pointcut_return/#suspend-function","title":"suspend function","text":"<ul> <li>BasePointCutSuspend inherits from BasePointCut <pre><code>interface BasePointCutSuspend&lt;T : Annotation&gt; : BasePointCut&lt;T&gt; {\n    suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: T)\n}\n</code></pre></li> <li>MatchClassMethodSuspend inherits from MatchClassMethod <pre><code>interface MatchClassMethodSuspend : MatchClassMethod {\n    suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, methodName: String)\n    ...\n}\n</code></pre></li> </ul> <p>Note</p> <p>For the suspend function of the cut point function, it is better to use the above two types. If you continue to use <code>BasePointCut</code> and <code>MatchClassMethod</code>, its return value must be <code>joinPoint.proceed()</code> The return value of the onReturn function. If you need to modify the return value, please see the following code:</p> <pre><code>class MyAnnoCut5 : BasePointCutSuspend&lt;MyAnno5&gt; {\n    override suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: MyAnno5) {\n        withContext(Dispatchers.IO) {\n//Modify the return value by setting OnSuspendReturnListener The return value of onReturn is the return value of the suspend point function\n            joinPoint.proceed(object : OnSuspendReturnListener {\n                override fun onReturn(proceedReturn: ProceedReturn): Any? {\n                    return (proceedReturn.proceed() as Int) + 100\n                }\n            })\n        }\n\n    }\n}\n</code></pre> <p>Note</p> <p>Here onReturn The explanation is the same as What is the return value here</p>"},{"location":"ProceedJoinPoint/","title":"ProceedJoinPoint","text":""},{"location":"ProceedJoinPoint/#brief-description","title":"Brief description","text":"<p>Information related to the pointcut method, including pointcut method parameters, pointcut object, and continued execution of the original method logic, etc.</p>"},{"location":"ProceedJoinPoint/#proceed","title":"proceed","text":""},{"location":"ProceedJoinPoint/#1-execute-the-logic-of-the-original-method","title":"1. Execute the logic of the original method","text":"<p>In this introduction, <code>proceed()</code> or <code>proceed(args)</code> of the <code>ProceedJoinPoint</code> object is used to execute the logic of the original method. The difference is:</p> <ul> <li><code>proceed()</code> does not pass parameters, indicating that the original incoming parameters are not changed</li> <li><code>proceed(args)</code> has parameters, indicating that the parameters passed in at the time are rewritten. Note that the number of parameters passed in and the type of each parameter must be consistent with the aspect method</li> <li>If <code>proceed</code> is not called, the code in the interception aspect method will not be executed</li> </ul>"},{"location":"ProceedJoinPoint/#2-execute-the-next-aspect","title":"2. Execute the next aspect","text":"<p>When there are multiple annotations or matching aspects for the same method, <code>proceed</code> means entering the next aspect. How to deal with it specifically?</p> <ul> <li>When multiple facets are superimposed on a method, annotations take precedence over matching facets, and annotated facets are executed from top to bottom</li> <li>The next facet will be executed only after <code>proceed</code> is called, and the code in the entry method will be called only after the last facet among multiple facets executes <code>proceed</code></li> <li>Calling <code>proceed(args)</code> in the previous facet can update the parameters passed in by the method, and the next facet will also get the parameters updated in the previous layer</li> <li>When there is an asynchronous call <code>proceed</code>, the return value of the first asynchronous call <code>proceed</code> facet (that is, the return value of invoke) is the return value of the entry method; otherwise, if there is no asynchronous call <code>proceed</code>, the return value is the return value of the last facet</li> </ul> <p> \ud83d\udc47Execution order and return diagram\ud83d\udc47 </p> <pre><code>graph LR\nCall[Calling method] --&gt; |Enter section| A[Annotation section 1];\nA --&gt; |Synchronous proceed| B[Annotation section 2];\nB --&gt; |Synchronous proceed| C[Matching section];\nC --&gt; |Synchronous proceed| From[Execute original method];\nFrom --&gt; |return| C;\nC --&gt; |return| B;\nB --&gt; |return| A;\nA --&gt; |return| Call;</code></pre> <p> \ud83d\udc47Schematic diagram of asynchronous call\ud83d\udc47 </p> <pre><code>graph LR\nCall[Calling method] --&gt; |Enter section| A[Section];\nA --&gt; |Start asynchronous thread| B[thread];\nB --&gt; |asynchronous proceed| From[other aspects];\nFrom --&gt; |return| B;\nA --&gt; |&lt;span style='color:red'&gt;because asynchronous threads will return directly&lt;/span&gt;| Call;</code></pre> <p> \ud83d\udc47Sketch of not calling proceed\ud83d\udc47 </p> <pre><code>graph LR\nCall[Calling method] --&gt; |Enter section| A[Section 1];\nA --&gt; |proceed| B[Section 2];\nB -..-&gt; |&lt;span style='color:red'&gt;X&lt;/span&gt;| C[Section 3];\nC -..-&gt; |&lt;span style='color:red'&gt;X&lt;/span&gt;| From[Execute original method];\nB --&gt; |&lt;span style='color:red'&gt;Do not call proceed directly return&lt;/span&gt;| A;\nA --&gt; |return| Call;</code></pre>"},{"location":"ProceedJoinPoint/#3-proceedjoinpointsuspends-proceed-method","title":"3. <code>ProceedJoinPointSuspend</code>'s <code>proceed</code> method","text":"<p>ProceedJoinPointSuspend adds two new methods including <code>OnSuspendReturnListener</code> <code>proceed</code> method, two <code>proceedIgnoreOther</code> methods containing <code>OnSuspendReturnListener2</code> are added</p> <ul> <li>The logic of the two new <code>proceed</code> methods and the original <code>proceed</code> method is different from that of ordinary functions. The return value after calling is not the return value of the pointcut function, but the other logic is the same as the two points mentioned above</li> <li>The <code>OnSuspendReturnListener</code> passed in by the two new <code>proceed</code> methods can get the return value of the pointcut function through the callback <code>ProceedReturn</code>, and the return value of the pointcut function can be modified through <code>onReturn</code></li> <li>The two new <code>proceedIgnoreOther</code> methods are to stop executing the code in the pointcut function and modify the return value of the pointcut function Click here for details </li> </ul> <p>Note</p> <p><code>ProceedJoinPointSuspend</code> The newly added methods are used to modify the return value of the call point suspend function. The suspend function can no longer modify the return value of the call point by modifying the return value  1. Calling the newly added proceed function Using <code>ProceedReturn.proceed</code> in the callback is equivalent to the process of calling <code>proceed</code> between each section in the above figure  2. Calling the newly added proceedIgnoreOther function in the callback is equivalent to Do not call proceed directly return in the above figure  3. The above two methods must be called in the suspend aspect, otherwise problems will occur</p>"},{"location":"ProceedJoinPoint/#getargs","title":"getArgs","text":"<p>All the parameters passed in when the pointcut method is called</p> <p>This is an introduction to the args of lambda expressions</p>"},{"location":"ProceedJoinPoint/#getoriginalargs","title":"getOriginalArgs()","text":"<p>Same as args, but with a different reference address. The object reference addresses in the array are the same. When there are multiple annotations or matching aspects in the same method, calling proceed(args) will change the reference address of args, or change the reference address in args. Through getOriginalArgs(), you can get the parameters when the pointcut method is first entered</p>"},{"location":"ProceedJoinPoint/#gettarget","title":"getTarget","text":"<p>If the pointcut method is not a static method, target is the object where the pointcut method is located. If the pointcut method is a static method, target is null</p> <p>PS: If ProceedJoinPoint.target is null, it is because the injected method is static, usually Java This situation will occur in static methods of Kotlin and functions modified by @JvmStatic, top-level functions, and lamba expressions</p> <p>Here is an introduction to the target of lambda expressions</p>"},{"location":"ProceedJoinPoint/#gettargetmethod","title":"getTargetMethod()","text":"<p>Returns information related to the point-cut method, such as method name, parameter name, parameter type, return type, etc. ... You can check the specific information in the class returned by the method (AopMethod)</p> <p>Here is an introduction to the getTargetMethod of lambda expressions</p>"},{"location":"ProceedJoinPoint/#gettargetclass","title":"getTargetClass()","text":"<p>Returns the Class&lt;?&gt; object of the class where the point-cut method is located</p>"},{"location":"ProceedReturn/","title":"ProceedReturn","text":""},{"location":"ProceedReturn/#proceed","title":"proceed()","text":"<p>Continue to execute the code of the return value code block. The return value is the actual return value of the suspend function. If you need to modify the passed parameters, you can still use <code>ProceedJoinPoint</code> to modify it</p>"},{"location":"Suspend_cut/","title":"Suspend pointcut function","text":"<p>When you use <code>@AndroidAopPointCut</code> and <code>@AndroidAopMatchClassMethod</code>, if the entry function is modified by <code>suspend</code>, you have two choices of aspect processing classes</p>"},{"location":"Suspend_cut/#1-basepointcut-and-matchclassmethod-that-do-not-fully-support-suspend","title":"1. BasePointCut and MatchClassMethod that do not fully support <code>suspend</code>","text":"<p>When you choose the first option, AndroidAOP will treat it as a normal function, but remember that the return value cannot be modified. It can only return the result of <code>joinPoint.proceed()</code>, so this method cannot modify the return result, for example:</p> <pre><code>class MyAnnoCut3 : BasePointCut&lt;MyAnno3&gt; {\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: MyAnno3): Any? {\n        Log.e(\"MyAnnoCut3\", \"====invoke=====\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>Note</p> <p>Although the return result cannot be modified, you can call <code>joinPoint.proceed()</code> instead, and you can also modify the input parameters, such as <code>joinPoint.proceed(1,2)</code></p>"},{"location":"Suspend_cut/#2-basepointcutsuspend-and-matchclassmethodsuspend-that-support-suspend","title":"2. BasePointCutSuspend and MatchClassMethodSuspend that support <code>suspend</code>","text":"<p>When you choose the second option, you need to specify the thread in invokeSuspend, such as using the <code>withContext</code> function, for example</p> <pre><code>class MyAnnoCut3 : BasePointCutSuspend&lt;MyAnno3&gt; {\n    override suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: MyAnno3) {\n        withContext(Dispatchers.Main) {\n            ...\n            joinPoint.proceed(object : OnSuspendReturnListener {\n                override fun onReturn(proceedReturn: ProceedReturn): Any? {\n                    val result = proceedReturn.proceed()\n                    Log.e(\n                        \"MyAnnoCut3\",\n                        \"====onReturn=====${proceedReturn.returnType},result=$result\"\n                    )\n                    return (result as Int) + 100\n                }\n\n            })\n        }\n\n    }\n}\n</code></pre> <p>Note</p> <ol> <li>If you do not use the <code>withContext</code> function, a <code>ClassCastException</code> exception may occur when the cut point function returns the result. The advantage of using this aspect processing class is that you can modify the return result (detailed introduction), and call other suspend functions </li> <li>Try to use <code>joinPoint.proceed</code> or <code>joinPoint.proceedIgnoreOther</code> in the last line of the withContext function</li> </ol> <p>Warning</p> <p>If the cut point function is not a <code>suspend</code> function, even if <code>BasePointCutSuspend</code> and <code>MatchClassMethodSuspend</code> are used, the <code>invoke</code> method will still be called back instead of the <code>invokeSuspend</code> method</p>"},{"location":"Suspend_cut/#in-addition-for-ordinary-aspect-processing-classes-proceed-is-not-called-and-returns-directly-for-example","title":"In addition, for ordinary aspect processing classes, <code>proceed()</code> is not called and returns directly, for example:","text":"<p><pre><code>class MyAnnoCut3 : BasePointCut&lt;MyAnno3&gt; {\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: MyAnno3): Any? {\n        Log.e(\"MyAnnoCut3\", \"====invoke=====\")\n        return null\n    }\n}\n</code></pre> The processing method of suspend is</p> <pre><code>class MyAnnoCut3 : BasePointCutSuspend&lt;MyAnno3&gt; {\n    override suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: MyAnno3) {\n        withContext(Dispatchers.Main) {\n            ...\n            joinPoint.proceedIgnoreOther(object : OnSuspendReturnListener2 {\n                override fun onReturn(proceedReturn: ProceedReturn2): Any? {\n                    Log.e(\"MyAnnoCut3\", \"====invokeSuspend=====\") return null\n                }\n            })\n        }\n    }\n} \n</code></pre>"},{"location":"android_aop_extra/","title":"Extension Library","text":""},{"location":"android_aop_extra/#introduce-dependent-libraries","title":"Introduce dependent libraries","text":"GroovyKotlin <pre><code>dependencies {\n     //Optional \ud83d\udc47This package provides some common annotation aspects\n     implementation \"io.github.flyjingfish:androidaop-extra:2.7.1\"\n}\n</code></pre> <pre><code>dependencies {\n     //Optional \ud83d\udc47This package provides some common annotation aspects\n     implementation(\"io.github.flyjingfish:androidaop-extra:2.7.1\")\n}\n</code></pre>"},{"location":"android_aop_extra/#this-library-has-some-built-in-functional-annotations-for-you-to-use-directly","title":"This library has some built-in functional annotations for you to use directly.","text":"Annotation name Parameter description Function description @SingleClick value = interval of quick clicks, default 1000ms Click the annotation and add this annotation to make your method accessible only when clicked @DoubleClick value = maximum time between two clicks, default 300ms Double-click annotation, add this annotation to make your method enterable only when double-clicked @IOThread ThreadType = thread type Switch to the sub-thread operation. Adding this annotation can switch the code in your method to the sub-thread for execution @MainThread No parameters The operation of switching to the main thread. Adding this annotation can switch the code in your method to the main thread for execution @OnLifecycle<sup>*</sup> value = Lifecycle.Event Monitor life cycle operations. Adding this annotation allows the code in your method to be executed only during the corresponding life cycle @TryCatch value = a flag you customized Adding this annotation can wrap a layer of try catch code for your method @Permission<sup>*</sup> value = String array of permissions The operation of applying for permissions. Adding this annotation will enable your code to be executed only after obtaining permissions @Scheduled initialDelay = delayed start timeinterval = intervalrepeatCount = number of repetitionsisOnMainThread = whether to be the main threadid = unique identifier Scheduled tasks, add this annotation to make your method Executed every once in a while, call AndroidAop.shutdownNow(id) or AndroidAop.shutdown(id) to stop @Delay delay = delay timeisOnMainThread = whether the main threadid = unique identifier Delay task, add this annotation to delay the execution of your method for a period of time, call AndroidAop.shutdownNow(id) or AndroidAop .shutdown(id) can be canceled @CheckNetwork tag = custom tagtoastText = toast prompt when there is no networkinvokeListener = whether to take over the check network logic Check whether the network is available, adding this annotation will allow your method to enter only when there is a network @CustomIntercept value = a flag of a string array that you customized Custom interception, used with AndroidAop.setOnCustomInterceptListener, is a panacea <p>( * Supports suspend functions, returns results when conditions are met, and supports suspend functions whose return type is not Unit type)</p> <p>All examples of the above annotations are here,Also This</p>"},{"location":"android_aop_extra/#let-me-emphasize-this-onlifecycle","title":"Let me emphasize this @OnLifecycle","text":"<ul> <li> <ol> <li>The object to which the method added by @OnLifecycle must belong is a method directly or indirectly inherited from FragmentActivity or Fragment to be useful, or the object annotated method can also implement LifecycleOwner</li> </ol> </li> <li> <ol> <li>If the first point is not met, you can set the first parameter of the aspect method to the type of point 1, and you can also pass it in when calling the aspect method, for example:</li> </ol> <pre><code>public class StaticClass {\n     @SingleClick(5000)\n     @OnLifecycle(Lifecycle.Event.ON_RESUME)\n     public static void onStaticPermission(MainActivity activity, int maxSelect, ThirdActivity.OnPhotoSelectListener back){\n         back.onBack();\n     }\n\n}\n</code></pre> </li> </ul>"},{"location":"android_aop_extra/#lets-focus-on-trycatch-permission-customintercept-checknetwork","title":"Let\u2019s focus on @TryCatch @Permission @CustomIntercept @CheckNetwork","text":"<ul> <li> <p>@TryCatch Using this annotation you can set the following settings (not required) <pre><code>AndroidAop.INSTANCE.setOnThrowableListener(new OnThrowableListener() {\n     @Nullable\n     @Override\n     public Object handleThrowable(@NonNull String flag, @Nullable Throwable throwable,TryCatch tryCatch) {\n         // TODO: 2023/11/11 If an exception occurs, you can handle it accordingly according to the flag you passed in at the time. If you need to rewrite the return value, just return at return\n         return 3;\n     }\n});\n</code></pre></p> </li> <li> <p>@Permission Use of this annotation must match the following settings (This step is required, otherwise it will have no effect)Perfect usage inspiration <pre><code>AndroidAop.INSTANCE.setOnPermissionsInterceptListener(new OnPermissionsInterceptListener() {\n     @SuppressLint(\"CheckResult\")\n     @Override\n     public void requestPermission(@NonNull ProceedJoinPoint joinPoint, @NonNull Permission permission, @NonNull OnRequestPermissionListener call) {\n         Object target = joinPoint.getTarget();\n         if (target instanceof FragmentActivity){\n             RxPermissions rxPermissions = new RxPermissions((FragmentActivity) target);\n             rxPermissions.request(permission.value()).subscribe(call::onCall);\n         }else if (target instanceof Fragment){\n             RxPermissions rxPermissions = new RxPermissions((Fragment) target);\n             rxPermissions.request(permission.value()).subscribe(call::onCall);\n         }else{\n             // TODO: target is not FragmentActivity or Fragment, which means the method where the annotation is located is not among them. Please handle this situation yourself.\n             // Suggestion: The first parameter of the pointcut method can be set to FragmentActivity or Fragment, and then joinPoint.args[0] can be obtained\n         }\n     }\n});\n</code></pre></p> </li> <li> <p>@CustomIntercept To use this annotation you must match the following settings (This step is required, otherwise what\u2019s the point?) <pre><code>AndroidAop.INSTANCE.setOnCustomInterceptListener(new OnCustomInterceptListener() {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull CustomIntercept customIntercept) {\n        // TODO: 2023/11/11 \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91 \u5728\u5408\u9002\u7684\u5730\u65b9\u8c03\u7528 joinPoint.proceed()\uff0c\n        //  joinPoint.proceed(args)\u53ef\u4ee5\u4fee\u6539\u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u6539\u5199\u8fd4\u56de\u503c\uff0c\u5219\u5728 return \u5904\u8fd4\u56de\u5373\u53ef\n\n        return null;\n    }\n});\n</code></pre></p> </li> <li>@CheckNetwork Using this annotation you can match the following settings (not required) <pre><code>AndroidAop.INSTANCE.setOnCheckNetworkListener(new OnCheckNetworkListener() {\n     @Nullable\n     @Override\n     public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull CheckNetwork checkNetwork, boolean availableNetwork) {\n         return null;\n     }\n});\n</code></pre> When using invokeListener, set it to true to enter the callback above. <pre><code>@CheckNetwork(invokeListener = true)\nfun toSecondActivity(){\n     startActivity(Intent(this,SecondActivity::class.java))\n}\n</code></pre> In addition, the built-in Toast allows you to take over <pre><code>AndroidAop.INSTANCE.setOnToastListener(new OnToastListener() {\n     @Override\n     public void onToast(@NonNull Context context, @NonNull CharSequence text, int duration) {\n\n     }\n});\n</code></pre></li> </ul> <p>\ud83d\udc46The above three monitors are best placed in your application</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#version-restrictions","title":"Version restrictions","text":"<p>Minimum Gradle version: 7.6\ud83d\udc47 (supports 8.0 and above)</p> <p></p> <p>Minimum SDK version: minSdkVersion &gt;= 21</p>"},{"location":"getting_started/#steps-for-usage","title":"Steps for usage","text":"<p>Can you give the project a Star before starting? Thank you very much, your support is my only motivation. Stars and Issues are welcome!</p> <p>The repository address of this library is in Maven central. If you cannot get the dependent package, please put the mirror address such as Alibaba after mavenCentral()</p>"},{"location":"getting_started/#1-introduce-the-plug-in-choose-one-of-the-two-methods-below-required","title":"1. Introduce the plug-in, choose one of the two methods below (required)","text":""},{"location":"getting_started/#method-1-apply-method","title":"Method 1: <code>apply</code> method","text":"<p>  Depend on the plug-in in <code>build.gradle</code> in the project root directory</p> GroovyKotlin <ul> <li> <p>Using the plugins DSL:     <pre><code>plugins {\n  //\ud83d\udc47Required item (1)\ud83d\udc48 apply is set to true to automatically apply debugMode to all modules, If false, follow step 5 below to configure debugMode in manual mode.\n  id \"io.github.flyjingfish.androidaop\" version \"2.7.1\" apply true\n}\n</code></pre></p> <ol> <li> If you have the <code>com.google.dagger.hilt.android</code> plugin in your project, put this plugin before it.</li> </ol> </li> <li> <p>Using legacy plugin application:</p> <pre><code>buildscript {\n     dependencies {\n         //\ud83d\udc47equired items (1)\ud83d\udc48\n         classpath \"io.github.flyjingfish:androidaop-plugin:2.7.1\"\n     }\n}\n//\ud83d\udc47Add this sentence to automatically apply debugMode to all modules. If not, follow step 5 below to configure debugMode in manual mode.\napply plugin: \"android.aop\"\n</code></pre> <ol> <li> If you have the <code>com.google.dagger:hilt-android-gradle-plugin</code> plugin in your project, put this plugin before it.</li> </ol> </li> </ul> <ul> <li> <p>Using the plugins DSL:     <pre><code>plugins {\n  //\ud83d\udc47Required item (1)\ud83d\udc48 apply is set to true to automatically apply debugMode to all modules, If false, follow step 5 below to configure debugMode in manual mode.\n  id(\"io.github.flyjingfish.androidaop\") version \"2.7.1\" apply true\n}\n</code></pre></p> <ol> <li> If you have the <code>com.google.dagger.hilt.android</code> plugin in your project, put this plugin before it.</li> </ol> </li> <li> <p>Using legacy plugin application:</p> <pre><code>buildscript {\n     dependencies {\n         //\ud83d\udc47Required items (1)\ud83d\udc48\n         classpath(\"io.github.flyjingfish:androidaop-plugin:2.7.1\")\n     }\n}\n//\ud83d\udc47Add this sentence to automatically apply debugMode to all modules. If not, follow step 5 below to configure debugMode in manual mode.\napply(plugin = \"android.aop\")\n</code></pre> <ol> <li> If you have the <code>com.google.dagger:hilt-android-gradle-plugin</code> plugin in your project, put this plugin before it.</li> </ol> </li> </ul> <p>Note</p> <p>If you use the hilt plugin in your project, pay attention to the order of importing plugins mentioned in the article (click the \"+\" above to see more information)</p> <p>  Add in <code>build.gradle</code> of com.android.application\uff08com.android.dynamic-feature\uff09</p> GroovyKotlin <ul> <li> <p>Using the plugins DSL:</p> <pre><code>//Required items \ud83d\udc47\nplugins {\n    ...\n    id 'android.aop'//It is best to put it on the last line\n}\n</code></pre> </li> <li> <p>Using legacy plugin application:</p> <pre><code>//Required items \ud83d\udc47\napply plugin: 'android.aop' //It's best to put it on the last line\n</code></pre> </li> </ul> <ul> <li> <p>Using the plugins DSL:</p> <pre><code>//Required items \ud83d\udc47\nplugins {\n    ...\n    id(\"android.aop\")//It is best to put it on the last line\n}\n</code></pre> </li> <li> <p>Using legacy plugin application:</p> <pre><code>//Required items \ud83d\udc47\napply(plugin = \"android.aop\") //It's best to put it on the last line\n</code></pre> </li> </ul> <p>Warning</p> <p><code>id 'android.aop'</code> should be placed on the last line, especially after <code>id 'com.android.application'</code>, <code>id 'com.android.library'</code> or <code>id 'com.android.dynamic-feature'</code>.</p>"},{"location":"getting_started/#method-2-plugins-method","title":"Method 2: <code>plugins</code> method","text":"<ul> <li>Add directly to <code>build.gradle</code> of com.android.application\uff08com.android.dynamic-feature\uff09</li> </ul> GroovyKotlin <pre><code>//Required items \ud83d\udc47\nplugins {\n   ...\n   id \"io.github.flyjingfish.androidaop\" version \"2.7.1\"\n}\n</code></pre> <pre><code>//Required items \ud83d\udc47\nplugins {\n   ...\n   id(\"io.github.flyjingfish.androidaop\") version \"2.7.1\"\n}\n</code></pre>"},{"location":"getting_started/#2-if-you-need-to-customize-aspects-and-the-code-is-kotlin-optional","title":"2. If you need to customize aspects, and the code is <code>Kotlin</code> (optional)","text":"<ul> <li>Depend on the plug-in in <code>build.gradle</code> in the project root directory</li> </ul> GroovyKotlin <pre><code>plugins {\n    //Optional \ud83d\udc47, if you need to customize aspects and use the android-aop-ksp library, you need to configure it. The version number below is determined according to the Kotlin version of your project\n    id 'com.google.devtools.ksp' version '1.8.0-1.0.9' apply false\n}\n</code></pre> <pre><code>plugins {\n    //Optional \ud83d\udc47, if you need to customize aspects and use the android-aop-ksp library, you need to configure it. The version number below is determined according to the Kotlin version of your project\n    id(\"com.google.devtools.ksp\") version \"1.8.0-1.0.9\" apply false\n}\n</code></pre> <p>List of matching version numbers for Kotlin and KSP Github</p>"},{"location":"getting_started/#3-introduce-dependent-libraries-required","title":"3. Introduce dependent libraries (required)","text":"GroovyKotlin <pre><code>plugins {\n     //Optional \ud83d\udc47, if you need to customize aspects and use the android-aop-ksp library, you need to configure it\n     id 'com.google.devtools.ksp'\n}\n\ndependencies {\n     //\ud83d\udc47Required items \n     implementation \"io.github.flyjingfish:androidaop-core:2.7.1\"\n     //\ud83d\udc47Optional (1)\ud83d\udc48 This package provides some common annotation aspects\n     implementation \"io.github.flyjingfish:androidaop-extra:2.7.1\"\n\n     //\ud83d\udc47Required item  If you already have this item in your project, you don\u2019t need to add it.\n     implementation \"androidx.appcompat:appcompat:1.3.0\" // At least in 1.3.0 and above\n\n     //\ud83d\udc47Choose one (2)\ud83d\udc48Click + to view detailed description, \u26a0\ufe0fsupports aspects written in Java and Kotlin code\n     ksp \"io.github.flyjingfish:androidaop-apt:2.7.1\"\n     //\ud83d\udc47Choose one (3)\ud83d\udc48Click + to view detailed description, \u26a0\ufe0fonly applies to aspects written in Java code\n     annotationProcessor \"io.github.flyjingfish:androidaop-apt:2.7.1\"\n     //\u26a0\ufe0fChoose one of the above ksp and annotationProcessor\n     //If you only use the functions in android-aop-extra, you don't need to select these two options\n}\n</code></pre> <ol> <li> This library has built-in annotations for some functions defined using @AndroidAopPointCut</li> <li> When you use the five custom aspect annotations described here, it means you must use <code>androidaop-apt</code></li> <li> When you use the five custom aspect annotations described here, it means you must use <code>androidaop-apt</code></li> </ol> <pre><code>plugins {\n     //Optional \ud83d\udc47, if you need to customize aspects and use the android-aop-ksp library, you need to configure it\n     id(\"com.google.devtools.ksp\")\n}\n\ndependencies {\n     //\ud83d\udc47Required items \n     implementation(\"io.github.flyjingfish:androidaop-core:2.7.1\")\n     //\ud83d\udc47Optional (1)\ud83d\udc48 This package provides some common annotation aspects\n     implementation(\"io.github.flyjingfish:androidaop-extra:2.7.1\")\n\n     //\ud83d\udc47Required item  If you already have this item in your project, you don\u2019t need to add it.\n     implementation(\"androidx.appcompat:appcompat:1.3.0\") // At least in 1.3.0 and above\n\n     //\ud83d\udc47Choose one (2)\ud83d\udc48Click + to view detailed description, \u26a0\ufe0fsupports aspects written in Java and Kotlin code\n     ksp(\"io.github.flyjingfish:androidaop-apt:2.7.1\")\n     //\ud83d\udc47Choose one (3)\ud83d\udc48Click + to view detailed description, \u26a0\ufe0fonly applies to aspects written in Java code\n     annotationProcessor(\"io.github.flyjingfish:androidaop-apt:2.7.1\")\n     //\u26a0\ufe0fChoose one of the above ksp and annotationProcessor\n     //If you only use the functions in android-aop-extra, you don't need to select these two options\n}\n</code></pre> <ol> <li> This library has built-in annotations for some functions defined using @AndroidAopPointCut</li> <li> When you use the five custom aspect annotations described here, it means you must use <code>androidaop-apt</code></li> <li> When you use the five custom aspect annotations described here, it means you must use <code>androidaop-apt</code></li> </ol> <p>Note</p> <p>Tip: ksp or annotationProcessor can only scan the current module. Custom aspect codes are added to the module where they are located. But custom aspect codes are globally effective; required dependencies can be added only to public modules through the API.</p>"},{"location":"getting_started/#4-add-the-androidaopconfig-configuration-item-in-apps-buildgradle-this-step-is-an-optional-configuration-item","title":"4. Add the androidAopConfig configuration item in app\u2019s build.gradle (this step is an optional configuration item)","text":"<ul> <li>Related development configurations</li> </ul> GroovyKotlin <pre><code>plugins {\n     ...\n     id 'android.aop'//It is best to put it on the last line\n}\nandroidAopConfig {\n     // enabled is false, the aspect no longer works, the default is not written as true\n     enabled true\n     // include does not set all scans by default. After setting, only the code of the set package name will be scanned.\n     include 'Package name of your project', 'Package name of custom module', 'Package name of custom module'\n     // exclude is the package excluded during scanning\n     // Can exclude kotlin related and improve speed\n     exclude 'kotlin.jvm', 'kotlin.internal','kotlinx.coroutines.internal', 'kotlinx.coroutines.android'\n     // Exclude packaged entity names\n     excludePackaging 'license/NOTICE' , 'license/LICENSE.dom-software.txt' , 'license/LICENSE'\n\n     // verifyLeafExtends Whether to turn on verification leaf inheritance, it is turned on by default. If type = MatchType.LEAF_EXTENDS of @AndroidAopMatchClassMethod is not set, it can be turned off.\n     verifyLeafExtends true\n     //Disabled by default. Enabled after Build or Packaging, a cut information file will be generated in app/build/tmp/ (cutInfo.json, cutInfo.html)\n     cutInfoJson false\n}\nandroid {\n     ...\n}\n</code></pre> <pre><code>plugins {\n     ...\n     id(\"android.aop\")//It is best to put it on the last line\n}\nandroidAopConfig {\n     // enabled is false, the aspect no longer works, the default is not written as true\n     enabled = true\n     // include does not set all scans by default. After setting, only the code of the set package name will be scanned.\n     include(\"Package name of your project\", \"Package name of custom module\", \"Package name of custom module\")\n     // exclude is the package excluded during scanning\n     // Can exclude kotlin related and improve speed\n     exclude(\"kotlin.jvm\", \"kotlin.internal\",\"kotlinx.coroutines.internal\", \"kotlinx.coroutines.android\")\n     // Exclude the entity name of the package\n     excludePackaging(\"license/NOTICE\" , \"license/LICENSE.dom-software.txt\" , \"license/LICENSE\")\n\n     // verifyLeafExtends Whether to turn on verification leaf inheritance, it is turned on by default. If type = MatchType.LEAF_EXTENDS of @AndroidAopMatchClassMethod is not set, it can be turned off.\n     verifyLeafExtends = true\n     //Disabled by default. Enabled after Build or Packaging, a cut information file will be generated in app/build/tmp/ (cutInfo.json, cutInfo.html)\n     cutInfoJson = false\n}\nandroid {\n     ...\n}\n</code></pre> <p>Note</p> <ol> <li>Include and exclude support precise setting to a class</li> <li>Reasonable use of include and exclude can improve compilation speed. It is recommended to use include to set the relevant package name of your project (including app and custom module)</li> <li>If <code>LEAF_EXTENDS</code> is not set for <code>@AndroidAopMatchClassMethod</code> and <code>@AndroidAopCollectMethod</code>, setting <code>verifyLeafExtends</code> to false can also speed up</li> </ol> <p>Warning</p> <p>After setting include and exclude, all aspects are only valid within the rules you set. Please remember your settings! In addition, since Android Studio may have cache after setting here, it is recommended to clean before continuing development</p>"},{"location":"getting_started/#5-you-can-set-the-packaging-method-during-development-this-step-is-an-optional-configuration-item-it-is-recommended-to-configure-this-item-to-speed-up-development","title":"5. You can set the packaging method during development (this step is an optional configuration item, it is recommended to configure this item to speed up development)","text":""},{"location":"getting_started/#method-1-fastdex-mode","title":"Method 1 (fastDex mode)","text":"<p>Add the following settings to <code>gradle.properties</code> in the root directory (optional)</p> <pre><code>androidAop.fastDex = true //Accelerate the dexBuilder phase (default false)\nandroidAop.fastDex.variantOnlyDebug = false //Only works in debug (default false)\n</code></pre> <p>Note</p> <p>1\u3001When <code>androidAop.fastDex</code> is set to true, the dexBuilder task will be optimized and accelerated by incremental compilation. Please note that this setting will only work when not in debugMode mode 2\u3001When <code>androidAop.fastDex.variantOnlyDebug</code> is set to true, the release package will ignore <code>androidAop.fastDex = true</code> Settings 3\u3001If there are other plugins using <code>toTransform</code> in your project, please adjust the task execution order and put the <code>xxAssembleAndroidAopTask</code> task at the end, otherwise the effect will be discounted. 4\u3001If your project has other plugins that use <code>toTransform</code>, such as some Routers, it is recommended to use this method.</p>"},{"location":"getting_started/#method-2-debugmode","title":"Method 2 (debugMode)","text":"<p>If you configure DebugMode in this step, please read the instructions in each line below carefully and do not copy them blindly, especially if you want to cut third-party jar packages.</p> <p>The following configuration steps also apply to componentized scenarios Click here to view </p> <p>  For all sub-modules also rely on plug-ins, please follow the above step 1 method 1 to configure the project, then choose one of the following methods</p> <ul> <li> <p>Method 1 (recommended):</p> <p>Follow the above Step 1 Method 1 Configuration Project and you are done. This method automatically applies debugMode to all Android modules (excluding <code>com.android.dynamic-feature</code> modules)</p> </li> <li> <p>Method 2:</p> <p>Please configure the project according to the above Step 1 Method 1 to configure the project, and then manually set the required sub-module module, for example:</p> GroovyKotlin <pre><code>plugins {\n     ...\n     id 'android.aop'//It is best to put it on the last line\n}\n</code></pre> <pre><code>plugins {\n     ...\n     id(\"android.aop\")//It is best to put it on the last line\n}\n</code></pre> </li> </ul> <p>Note</p> <ol> <li>This method can only apply debugMode to the modules you have added, and the related aspects in the modules that have not been added will not take effect </li> <li>If your module is a Java or Kotlin library, the automatic mode can only enable all Android libraries. You need to use manual mode to configure your module separately for it to take effect. <code>com.android.dynamic-feature</code> needs to be manually added to this plugin.</li> </ol> <p>  Add the following settings in <code>gradle.properties</code> in the root directory</p> <pre><code>androidAop.debugMode=true //Set to true to use the current packaging method of your project, false to use the full packaging method, otherwise the default is false\n</code></pre> <p>Warning</p> <p>1\u3001 Please note that when set to true, the compilation speed will be faster but some functions will be invalid. Only the aop code will be woven into the set module. The third-party jar package will not weave in the code, so please be careful to turn it off when building the official package. Configure this and clean the project  2\u3001If <code>org.gradle.parallel = true</code> is set, please pay attention to adjust the order of each module compileXXJavaWithJavac task if there is a bug. If not, you can choose to turn off this configuration directly.</p> <p>  Add the following settings in <code>gradle.properties</code> in the root directory</p> <pre><code>androidAop.debugMode.variantOnlyDebug = true //If this is not written by default, it is true\n</code></pre> <p>Note</p> <p>1.If this option is not set, it will be true by default. Please note that when it is set to true, the release package will ignore the setting of <code>androidAop.debugMode = true</code> and automatically use the full packaging method. When it is set to false, there will be no such effect  2.This feature is enabled by default, so the release package does not need to manually disable <code>androidAop.debugMode</code> 3. This feature is only valid for Android libraries, not for Java or Kotlin libraries</p> <p>  Add the following settings to <code>gradle.properties</code> in the root directory (optional)</p> <pre><code>androidAop.debugMode.buildConfig = true //If set to true, it means exporting a DebugModeBuildConfig.java file. If not set, the default value is true.\n</code></pre> <p>Note</p> <p>1\u3001Because some modules have only Kotlin code, debugMode cannot take effect. You can insert a Java code to make it effective by setting it to true. If you don't need it, you can set it to false, but you need to manually create a Java code. 2\u3001If debugMode does not work, consider turning this off by adding the setting <code>android.defaults.buildfeatures.buildconfig=true</code></p>"},{"location":"getting_started/#other-configurations-optional-you-can-configure-this-if-you-want-to-be-the-best","title":"Other configurations (optional, you can configure this if you want to be the best)","text":"<p>Add the following settings to <code>gradle.properties</code> in the root directory </p> <pre><code>androidAop.reflectInvokeMethod = true //Set to true to reflect the execution of the facet method, if not set, the default is false\nandroidAop.reflectInvokeMethod.variantOnlyDebug = true //Set to true to be effective only in debug, if not set, the default is false\nandroidAop.reflectInvokeMethod.static = true // Set to true to simulate non-reflective situations. If not set, the default value is true.\n</code></pre> <p>Note</p> <ol> <li><code>androidAop.reflectInvokeMethod</code> is set to true to reflect the execution of the section method, which will speed up the packaging speed. If it is set to false, the secondary compilation speed is basically the same as the reflection speed. </li> <li>Please note that when <code>androidAop.reflectInvokeMethod.variantOnlyDebug</code> is set to true, the release package will ignore the setting of <code>androidAop.reflectInvokeMethod = true</code> and automatically not reflect. If it is set to false, there will be no such effect (default false if not written) </li> <li><code>androidAop.reflectInvokeMethod.static</code> is set to true to simulate the non-reflective situation and take into account the compilation speed of reflection. If it is not written, the default is true. If you want to use reflection, it is recommended to set this to true. Set it to false for pure reflection </li> <li><code>androidAop.reflectInvokeMethod.variantOnlyDebug</code> is only valid for Android libraries, not for Java or Kotlin libraries</li> </ol>"},{"location":"getting_started/#cleankeepaopcache","title":"CleanKeepAopCache","text":"<p>When you want to clean the project, you can use this command to reduce the compilation time after cleaning</p> <ul> <li> <p>Use in the command line</p> <pre><code>./gradlew aaaCleanKeepAopCache\n</code></pre> </li> <li> <p>Double-click the command</p> <p></p> </li> </ul> <p>If you can't find the <code>aaaCleanKeepAopCache</code> command, you need to add the following settings to the <code>build.gradle</code> in the root directory</p> GroovyKotlin <pre><code>apply plugin: 'android.aop.clean'\n</code></pre> <pre><code>apply(plugin = \"android.aop.clean\")\n</code></pre>"},{"location":"getting_started/#this-library-has-some-built-in-functional-annotations-for-you-to-use-directly","title":"This library has some built-in functional annotations for you to use directly.","text":"Annotation name Parameter description Function description @SingleClick value = interval of quick clicks, default 1000ms Click the annotation and add this annotation to make your method accessible only when clicked @DoubleClick value = maximum time between two clicks, default 300ms Double-click annotation, add this annotation to make your method enterable only when double-clicked @IOThread ThreadType = thread type Switch to the sub-thread operation. Adding this annotation can switch the code in your method to the sub-thread for execution @MainThread No parameters The operation of switching to the main thread. Adding this annotation can switch the code in your method to the main thread for execution @OnLifecycle<sup>*</sup> value = Lifecycle.Event Monitor life cycle operations. Adding this annotation allows the code in your method to be executed only during the corresponding life cycle @TryCatch value = a flag you customized Adding this annotation can wrap a layer of try catch code for your method @Permission<sup>*</sup> value = String array of permissions The operation of applying for permissions. Adding this annotation will enable your code to be executed only after obtaining permissions @Scheduled initialDelay = delayed start timeinterval = intervalrepeatCount = number of repetitionsisOnMainThread = whether to be the main threadid = unique identifier Scheduled tasks, add this annotation to make your method Executed every once in a while, call AndroidAop.shutdownNow(id) or AndroidAop.shutdown(id) to stop @Delay delay = delay timeisOnMainThread = whether the main threadid = unique identifier Delay task, add this annotation to delay the execution of your method for a period of time, call AndroidAop.shutdownNow(id) or AndroidAop .shutdown(id) can be canceled @CheckNetwork tag = custom tagtoastText = toast prompt when there is no networkinvokeListener = whether to take over the check network logic Check whether the network is available, adding this annotation will allow your method to enter only when there is a network @CustomIntercept value = a flag of a string array that you customized Custom interception, used with AndroidAop.setOnCustomInterceptListener, is a panacea <p>Note</p> <p>The above functions are located in the <code>android-aop-extra</code> library. For detailed instructions, please see the documentation</p>"},{"location":"getting_started/#custom-aspects","title":"Custom Aspects","text":"<p>This introduction is a general outline.</p> <ul> <li>@AndroidAopPointCut is an aspect that annotates methods</li> <li>@AndroidAopMatchClassMethod is the aspect of matching class methods</li> <li>@AndroidAopReplaceClass is called by the replacement method</li> <li>@AndroidAopModifyExtendsClass is a modified inherited class</li> <li>@AndroidAopCollectMethod Is a collection inheritance class</li> </ul>"},{"location":"getting_started/#androidaoppointcut","title":"@AndroidAopPointCut","text":"<p>\u2003\u2003It is used to make aspects in the form of annotations on the method. The above annotations are all made through this. Please see the wiki document for detailed usage</p> <p>\u2003\u2003The following uses @CustomIntercept as an example to introduce how to use it.</p> <ul> <li> <p>Create annotations(You need to implement the BasePointCut interface, and fill in the annotations above for its generic type)</p> KotlinJava <pre><code>@AndroidAopPointCut(CustomInterceptCut::class)\n@Target(\n    AnnotationTarget.FUNCTION,\n    AnnotationTarget.PROPERTY_GETTER,\n    AnnotationTarget.PROPERTY_SETTER\n)\n@Retention(\n    AnnotationRetention.RUNTIME\n)\nannotation class CustomIntercept(vararg val value: String = [])\n</code></pre> <pre><code>@AndroidAopPointCut(CustomInterceptCut.class)\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomIntercept {\n    String[] value() default {};\n}\n</code></pre> </li> <li> <p>Create a class that annotates the aspect (needs to implement the BasePointCut interface, and fill in the above annotation with its generic type)</p> <pre><code>class CustomInterceptCut : BasePointCut&lt;CustomIntercept&gt; {\n     override fun invoke(\n         joinPoint: ProceedJoinPoint,\n         annotation: CustomIntercept //annotation is the annotation you add to the method\n     ): Any? {\n         //Write your logic here\n         // joinPoint.proceed() means to continue executing the logic of the point-cut method. If this method is not called, the code in the point-cut method will not be executed.\n         // About ProceedJoinPoint, you can see the wiki document, click the link below for details\n         return joinPoint.proceed()\n     }\n}\n</code></pre> <p>About ProceedJoinPoint usage instructions, the same applies to ProceedJoinPoint below</p> </li> <li> <p>use</p> <p>Directly add the annotation you wrote to any method, for example, to onCustomIntercept(). When onCustomIntercept() is called, it will first enter the invoke method of CustomInterceptCut mentioned above.</p> <pre><code>@CustomIntercept(\"I am custom data\")\nfun onCustomIntercept(){\n\n}\n</code></pre> </li> </ul>"},{"location":"getting_started/#androidaopmatchclassmethod","title":"@AndroidAopMatchClassMethod","text":"<p>\u2003\u2003It is used to match aspects of a certain class and its corresponding method.</p> <p> The matching method supports accurate matching, click here to see detailed usage documentation on the wiki</p> <ul> <li> <p>Example 1</p> <pre><code>package com.flyjingfish.test_lib;\n\npublic class TestMatch {\n     public void test1(int value1,String value2){\n\n     }\n\n     public String test2(int value1,String value2){\n         return value1+value2;\n     }\n}\n</code></pre> <p>If TestMatch is the class to be matched, and you want to match the test2 method, the following is how to write the match:</p> <pre><code>package com.flyjingfish.test_lib.mycut;\n\n@AndroidAopMatchClassMethod(\n         targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n         methodName = [\"test2\"],\n         type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n   override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n     Log.e(\"MatchTestMatchMethod\",\"======\"+methodName+\",getParameterTypes=\"+joinPoint.getTargetMethod().getParameterTypes().length);\n     //Write your logic here\n     //If you don\u2019t want to execute the original method logic, \ud83d\udc47 don\u2019t call the following sentence\n     return joinPoint.proceed()\n   }\n}\n</code></pre> <p>You can see that the type set by AndroidAopMatchClassMethod above is MatchType.SELF, which means that it only matches the TestMatch class itself, regardless of its subclasses. - Example 2</p> <p>If you want to Hook all onClicks of android.view.View.OnClickListener, to put it bluntly, you want to globally monitor all click events of OnClickListener. The code is as follows:</p> <pre><code>@AndroidAopMatchClassMethod(\n     targetClassName = \"android.view.View.OnClickListener\",\n     methodName = [\"onClick\"],\n     type = MatchType.EXTENDS //type must be EXTENDS because you want to hook all classes that inherit OnClickListener\n)\nclass MatchOnClick : MatchClassMethod {\n// @SingleClick(5000) //Combined with @SingleClick, add multi-point prevention to all clicks, 6 is not 6\n     override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n         Log.e(\"MatchOnClick\", \"======invoke=====$methodName\")\n         return joinPoint.proceed()\n     }\n}\n</code></pre> <p>You can see that the type set by AndroidAopMatchClassMethod above is MatchType.EXTENDS, which means matching all subclasses inherited from OnClickListener. For more inheritance methods, please refer to the Wiki document</p> <p>Note: If the subclass does not have this method, the aspect will be invalid. In addition, do not match the same method multiple times in the same class, otherwise only one will take effect, Use overrideMethod to ignore this restriction Click here for details</p> </li> </ul>"},{"location":"getting_started/#androidaopreplaceclass","title":"@AndroidAopReplaceClass","text":"<p>\u2003\u2003It is used for replacement method calls</p> <p>\u2003\u2003@AndroidAopReplaceClass and @AndroidAopReplaceMethod are used together</p> <p> Detailed usage of replacement method call, click here to see detailed usage documentation in wiki</p> <ul> <li>Java writing method     <pre><code>@AndroidAopReplaceClass(\n         \"android.widget.Toast\"\n)\npublic class ReplaceToast {\n    @AndroidAopReplaceMethod(\n            \"android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)\"\n    )\n    //  Because the replaced method is static, the parameter type and order correspond to the replaced method one-to-one.\n    public static Toast makeText(Context context, CharSequence text, int duration) {\n        return Toast.makeText(context, \"ReplaceToast-\"+text, duration);\n    }\n    @AndroidAopReplaceMethod(\n            \"void setGravity(int , int , int )\"\n    )\n    //  Because the replaced method is not a static method, the first parameter is the replaced class, and the subsequent parameters correspond to the replaced method one-to-one.\n    public static void setGravity(Toast toast,int gravity, int xOffset, int yOffset) {\n        toast.setGravity(Gravity.CENTER, xOffset, yOffset);\n    }\n    @AndroidAopReplaceMethod(\n            \"void show()\"\n    )\n    //  Although the replaced method has no parameters, because it is not a static method, the first parameter is still the replaced class.\n    public static void show(Toast toast) {\n        toast.show();\n    }\n}\n</code></pre></li> <li>Kotlin writing method     <pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String,java.lang.String)\")\n    @JvmStatic\n    fun e( tag:String, msg:String) :Int{\n        return Log.e(tag, \"ReplaceLog-$msg\")\n    }\n}\n</code></pre></li> </ul>"},{"location":"getting_started/#androidaopmodifyextendsclass","title":"@AndroidAopModifyExtendsClass","text":"<p>\u2003\u2003It is an inherited class that modifies the target classDetailed usage</p> <p>\u2003\u2003Usually, you replace one layer in the inheritance relationship of a certain class, then rewrite some functions, and add some logic code you want to the rewritten functions to monitor and rewrite the original logic.</p> <p>\u2003\u2003As shown in the following example, you need to replace the inherited class of <code>AppCompatImageView</code> with <code>ReplaceImageView</code></p> <ul> <li> <p>Application scenario: non-invasively implement the function of monitoring large image loading</p> <pre><code>@AndroidAopModifyExtendsClass(\"androidx.appcompat.widget.AppCompatImageView\")\npublic class ReplaceImageView extends ImageView {\n    public ReplaceImageView(@NonNull Context context) {\n        super(context);\n    }\n    public ReplaceImageView(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public ReplaceImageView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    public void setImageDrawable(@Nullable Drawable drawable) {\n        super.setImageDrawable(drawable);\n        //\u505a\u4e00\u4e9b\u76d1\u6d4b\u6216\u8005\u518d\u6b21\u4fee\u6539\n    }\n}\n</code></pre> </li> </ul>"},{"location":"getting_started/#androidaopcollectmethod","title":"@AndroidAopCollectMethod","text":"<p>\u2003\u2003It is a aspects that collects inherited classes of a class detailed usage</p> <p>\u2003\u2003It is extremely simple to use, the sample code has already explained</p> <ul> <li> <p>Example</p> KotlinJava <pre><code>object InitCollect {\n    private val collects = mutableListOf&lt;SubApplication&gt;()\n    private val collectClazz: MutableList&lt;Class&lt;out SubApplication&gt;&gt; = mutableListOf()\n\n    @AndroidAopCollectMethod\n    @JvmStatic\n    fun collect(sub: SubApplication){\n      collects.add(sub)\n    }\n    @AndroidAopCollectMethod\n    @JvmStatic\n    fun collect2(sub:Class&lt;out SubApplication&gt;){\n      collectClazz.add(sub)\n    }\n    // Call this method directly. The collects collection contains data.\n    fun init(application: Application){\n        for (collect in collects) {\n            collect.onCreate(application)\n        }\n    }\n}\n</code></pre> <pre><code>public class InitCollect2 {\n    private static final List&lt;SubApplication2&gt; collects = new ArrayList&lt;&gt;();\n    private static final List&lt;Class&lt;? extends SubApplication2&gt;&gt; collectClazz = new ArrayList&lt;&gt;();\n\n    @AndroidAopCollectMethod\n    public static void collect(SubApplication2 sub){\n        collects.add(sub);\n    }\n\n    @AndroidAopCollectMethod\n    public static void collect3(Class&lt;? extends SubApplication2&gt; sub){\n        collectClazz.add(sub);\n    }\n    // Call this method directly. The collects collection contains data.\n    public static void init(Application application){\n        Log.e(\"InitCollect2\",\"----init----\");\n        for (SubApplication2 collect : collects) {\n            collect.onCreate(application);\n        }\n    }\n}\n</code></pre> </li> </ul>"},{"location":"give_list/","title":"Tips","text":""},{"location":"give_list/#appreciation","title":"Appreciation","text":"<p>After reading this far, if you like AndroidAOP or feel that AndroidAOP has helped you, you can click the \"Star\" in the upper right corner to support it. Your support is my motivation. Thank you~ \ud83d\ude03</p> <p>If you feel that AndroidAOP has saved you a lot of development time and added luster to your project, you can also scan the QR code below to buy the author a cup of coffee \u2615</p> <p>If you note your name in the donation message, it will be recorded in the list~ If you are also a github open source author, you can leave the github project address or personal homepage address when donating, and the link will be added to the list</p>"},{"location":"give_list/#donation-list","title":"Donation List","text":"<p>Your stars and support are my biggest motivation to move forward!</p> Nickname Date Method Message Links Amount of Reward O*e 2024-04-11 Wechat aop\u89e3\u51b3\u4e86\u6211\u7684\u95ee\u9898\uff0c\u8bf7\u4f60\u559d\u676f\u745e[\u5496\u5561] / \u00a5 9.99 j*e 2024-04-11 Wechat \u8f9b\u82e6\u5927\u4f6c\u8fd9\u4e48\u665a\u5e2e\u6211\u627e\u95ee\u9898 / \u00a5 88 *\u5f20 2024-07-03 Wechat / / \u00a5 64.6 *\u541b 2024-09-19 Wechat / / \u00a5 66 F*I 2024-10-20 Wechat \u611f\u8c22\u89e3\u6211\u71c3\u7709\u4e4b\u6025 / \u00a5 100 *\u52c7 2024-11-13 Alipay / / \u00a5 30 *\u535a 2024-12-09 Wechat AndroidAOP\u611f\u8c22\ud83d\ude4f / \u00a5 30 *\u559c 2025-01-16 Wechat \u6709\u6548\u89e3\u51b3\u95ee\u9898\uff0c\u7ed9\u4f60\u4e00\u4e2a\u8d5e\uff01 / \u00a5 10 *\u9752 2025-01-21 Alipay / / \u00a5 13 \u6df1\u5ea6\u7528\u6237 2025-01-22 QQ \u611f\u8c22\u7fa4\u4e3b\uff0c\u8bf7\u4f60\u559d\u4e00\u676f\u5496\u5561 / \u00a5 13 **\u5c27 2025-02-13 Alipay \u4eca\u552f\u4e00\u80fd\u7528\u7684\u5b89\u5353AOP\u5e93\uff0c\u4e07\u4e0d\u53ef\u4e8f\u5f85\u4f5c\u8005 / \u00a5 100.01 **\u5929 2025-02-17 Alipay \u611f\u8c22\u4f5c\u8005\u6280\u672f\u652f\u6301\uff0ccoffee\u732e\u4e0a / \u00a5 9.9 **\u5929 2025-02-17 Alipay \u611f\u8c22\u4f5c\u8005\u6280\u672f\u652f\u6301\uff0ccoffee\u732e\u4e0a / \u00a5 6.6 \u8ffd\u68a6/ty: 2025-05-22 QQ \u95ee\u9898\u89e3\u51b3\uff0c\u8c22\u8c22\u7fa4\u4e3b / \u00a5 10"},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"\u6982\u8ff0","text":"<p>      \ud83d\udd25\ud83d\udd25\ud83d\udd25\u5e2e\u52a9 Android App \u6539\u9020\u6210AOP\u67b6\u6784\u7684\u6846\u67b6     AndroidAOP </p> <p> </p> <p>      \u544a\u522b\u6837\u677f\u4ee3\u7801\uff0c\u7528 AOP \u89e3\u653e\u53cc\u624b\uff0c\u4e00\u884c\u6ce8\u89e3\uff0c\u7ec7\u5c31\u9ad8\u6548 Android \u5e94\u7528    </p> <p>    AndroidAOP\uff0c\u4e13\u4e3a\u5f00\u53d1\u8005\u800c\u751f\uff01   </p>"},{"location":"zh/#_1","title":"\u7b80\u8ff0","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u8fd9\u662f\u4e00\u4e2a\u5e2e\u52a9 Android App \u6539\u9020\u6210AOP\u67b6\u6784\u7684\u6846\u67b6\uff0c\u53ea\u9700\u4e00\u4e2a\u6ce8\u89e3\u5c31\u53ef\u4ee5\u8bf7\u6c42\u6743\u9650\u3001\u5207\u6362\u7ebf\u7a0b\u3001\u7981\u6b62\u591a\u70b9\u3001\u4e00\u6b21\u76d1\u6d4b\u6240\u6709\u70b9\u51fb\u4e8b\u4ef6\u3001\u76d1\u6d4b\u751f\u547d\u5468\u671f\u7b49\u7b49\uff0c\u6ca1\u6709\u4f7f\u7528 AspectJ\uff0c\u4e5f\u53ef\u4ee5\u5b9a\u5236\u51fa\u5c5e\u4e8e\u4f60\u7684 Aop \u4ee3\u7801</p>"},{"location":"zh/#_2","title":"\u7279\u8272\u529f\u80fd","text":"<p>1\u3001\u672c\u5e93\u5185\u7f6e\u4e86\u5f00\u53d1\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u5207\u9762\u6ce8\u89e3\u4f9b\u4f60\u4f7f\u7528</p> <p>2\u3001\u672c\u5e93\u652f\u6301\u8ba9\u4f60\u81ea\u5df1\u505a\u5207\u9762\uff0c\u8bed\u6cd5\u7b80\u5355\u6613\u4e0a\u624b</p> <p>3\u3001\u672c\u5e93\u540c\u6b65\u652f\u6301 Java\u9879\u76ee \u548c Kotlin\u9879\u76ee</p> <p>4\u3001\u672c\u5e93\u652f\u6301\u5207\u5165\u4e09\u65b9\u5e93</p> <p>5\u3001\u672c\u5e93\u652f\u6301\u5207\u70b9\u65b9\u6cd5\u4e3a Lambda \u8868\u8fbe\u5f0f\u7684\u60c5\u51b5</p> <p>6\u3001\u672c\u5e93\u652f\u6301\u5207\u70b9\u65b9\u6cd5\u4e3a suspend \u4fee\u9970\u7684\u534f\u7a0b\u51fd\u6570</p> <p>7\u3001\u672c\u5e93\u652f\u6301\u751f\u6210\u6240\u6709\u5207\u70b9\u4fe1\u606fjson\u3001html\u6587\u4ef6\uff0c\u65b9\u4fbf\u4e00\u89c8\u6240\u6709\u5207\u70b9\u4f4d\u7f6e\u5728\u6b64\u914d\u7f6e</p> <p>8\u3001\u672c\u5e93\u652f\u6301\u591a\u79cd\u5feb\u901f\u5f00\u53d1\u6a21\u5f0f\uff0c\u8ba9\u4f60\u6253\u5305\u901f\u5ea6\u51e0\u4e4e\u4e0d\u53d8\u5728\u6b64\u914d\u7f6e</p> <p>9\u3001\u672c\u5e93\u652f\u6301 \u7ec4\u4ef6\u5316\u5f00\u53d1\u5728\u6b64\u914d\u7f6e</p> <p>10\u3001\u672c\u5e93\u662f\u7eaf\u9759\u6001\u7ec7\u5165AOP\u4ee3\u7801</p> <p>11\u3001\u672c\u5e93\u4e0d\u662f\u57fa\u4e8e AspectJ \u5b9e\u73b0\u7684\uff0c\u7ec7\u5165\u4ee3\u7801\u91cf\u6781\u5c11\uff0c\u4fb5\u5165\u6027\u6781\u4f4e</p> <p>12\u3001\u4e30\u5bcc\u5b8c\u5584\u7684\u4f7f\u7528\u6587\u6863\u52a9\u4f60\u5b8c\u5168\u7406\u89e3\u672c\u5e93\u7684\u4f7f\u7528\u89c4\u5219\u70b9\u6b64\u524d\u5f80wiki\u6587\u6863</p> <p>13\u3001\u66f4\u6709\u5e2e\u52a9\u4f60\u751f\u6210\u5207\u9762\u4ee3\u7801\u7684\u63d2\u4ef6\u52a9\u624b\u4f9b\u4f60\u4f7f\u7528\u70b9\u6b64\u524d\u5f80\u4e0b\u8f7d</p>"},{"location":"zh/#apk","title":"\u70b9\u6b64\u4e0b\u8f7dapk,\u4e5f\u53ef\u626b\u4e0b\u8fb9\u4e8c\u7ef4\u7801\u4e0b\u8f7d","text":""},{"location":"zh/#star","title":"Star\u8d8b\u52bf\u56fe","text":"<p>\u6b22\u8fce\u4f7f\u7528 AndroidAOP wiki\u6587\u6863\uff0c\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u770b\u4f60\u60f3\u770b\u7684\u5185\u5bb9\ud83d\udc48\ud83d\udc48\ud83d\udc48</p> <p>\u5efa\u8bae\u60a8\u5148\u901a\u8fc7\u6d4f\u89c8\u5165\u95e8\u6765\u5feb\u901f\u4e86\u89e3\u672c\u5e93\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5f62\u6210\u5927\u81f4\u601d\u8def\uff0c\u7136\u540e\u518d\u9605\u8bfb\u5176\u4ed6\u5185\u5bb9\u3002</p> <p>\u9009\u62e9\u5408\u9002\u7684\u65b9\u5f0f\u53ef\u4ee5\u5199\u51fa\u4f18\u7f8e\u7684\u4ee3\u7801\uff0c\u9047\u5230\u95ee\u9898\u8bf7\u4f18\u5148\u901a\u8fc7\u6d4f\u89c8wiki\u6587\u6863\u89e3\u51b3\uff0c\u89e3\u51b3\u4e0d\u4e86\u7684\u518d\u53bb\u9996\u9875\u52a0\u7fa4\u4ea4\u6d41</p>"},{"location":"zh/#_3","title":"\u672c\u5e93\u63d0\u4f9b\u7684\u5207\u9762\u65b9\u5f0f\u5206\u522b\u5982\u4e0b","text":"<ul> <li>@AndroidAopPointCut \u662f\u6ce8\u89e3\u5207\u9762\uff0c\u8bbe\u7f6e\u7684\u6ce8\u89e3\u52a0\u5230\u4efb\u610f\u4e00\u4e2a\u65b9\u6cd5\u4e0a\u5373\u53ef\uff0c\u5f53\u6240\u52a0\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u5373\u53ef\u8fdb\u5165\u5207\u9762\u5904\u7406\u7c7b</li> <li>@AndroidAopMatchClassMethod \u662f\u5339\u914d\u5207\u9762\uff0c\u5339\u914d\u5230\u67d0\u4e2a\u7c7b\u7684\u67d0\u4e9b\u65b9\u6cd5\uff0c\u5f53\u6240\u5728\u7c7b\u7684\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u5373\u53ef\u8fdb\u5165\u5207\u9762\u5904\u7406\u7c7b</li> <li>@AndroidAopReplaceClass \u662f\u66ff\u6362\u5207\u9762\uff0c\u4f1a\u628a\u8bbe\u7f6e\u7684\u7c7b\u7684\u65b9\u6cd5\u7684\u6240\u6709\u8c03\u7528\u5904\u66ff\u6362\u6210\u66ff\u6362\u5207\u9762\u7c7b\u7684\u65b9\u6cd5</li> <li>@AndroidAopModifyExtendsClass \u662f\u4fee\u6539\u7ee7\u627f\u7c7b\uff0c\u4f1a\u5c06\u76ee\u6807\u7c7b\u7684\u7ee7\u627f\u7c7b\u6362\u6210\u6240\u6ce8\u89e3\u7684\u7c7b</li> <li>@AndroidAopCollectMethod \u662f\u6536\u96c6\u7ee7\u627f\u7c7b</li> </ul> <p>\u9664\u4e86 @AndroidAopPointCut \u90fd\u53ef\u4ee5\u5229\u7528 \u201cAOP \u4ee3\u7801\u751f\u6210\u52a9\u624b\u201d\u8f85\u52a9\u4f60\u4f7f\u7528\u672c\u5e93</p>"},{"location":"zh/#_4","title":"\u5176\u533a\u522b\u5982\u4e0b\uff1a","text":"<ul> <li> <p>@AndroidAopMatchClassMethod \u548c @AndroidAopPointCut \u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u6267\u884c\uff08Method execution\uff09</p> </li> <li> <p>@AndroidAopReplaceClass \u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u8c03\u7528\uff08Method call\uff09</p> </li> <li> <p>\u6ce8\u610f@AndroidAopReplaceClass \u548c\u5176\u4ed6\u4e24\u79cd\u7684\u6709\u7740\u672c\u8d28\u7684\u533a\u522b\uff0c\u524d\u4e24\u79cd\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u6267\u884c\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u4fdd\u7559\u53ef\u4ee5\u6267\u884c\u539f\u6709\u903b\u8f91\u7684\u65b9\u6cd5\uff08\u5373ProceedJoinPoint\uff09\uff1b</p> </li> <li> <p>@AndroidAopReplaceClass \u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u662f\u5c06\u6240\u6709\u8c03\u7528\u7684\u5730\u65b9\u66ff\u6362\u4e3a\u60a8\u8bbe\u7f6e\u7684\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e0d\u4f1a\u81ea\u52a8\u4fdd\u7559\u6267\u884c\u539f\u6709\u903b\u8f91\u7684\u65b9\u6cd5</p> </li> <li> <p>@AndroidAopReplaceClass \u7684\u4f18\u70b9\u5728\u4e8e\u201c\u76f8\u5f53\u4e8e\u201d\u53ef\u4ee5\u76d1\u6d4b\u5230\u67d0\u4e9b\u7cfb\u7edf\u65b9\u6cd5\uff08android.jar\u91cc\u7684\u4ee3\u7801\uff09\u7684\u8c03\u7528\uff0c\u524d\u4e24\u8005\u4e0d\u5177\u5907\u8fd9\u4e2a\u7279\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u662f\u57fa\u4e8e\u6b64\u79cd\u9700\u6c42\uff0c\u5efa\u8bae\u4f7f\u7528 @AndroidAopMatchClassMethod</p> </li> </ul>"},{"location":"zh/#_5","title":"\u8d5e\u8d4f","text":"<p>\u90fd\u770b\u5230\u8fd9\u91cc\u4e86\uff0c\u5982\u679c\u60a8\u559c\u6b22 AndroidAOP\uff0c\u6216\u611f\u89c9 AndroidAOP \u5e2e\u52a9\u5230\u4e86\u60a8\uff0c\u53ef\u4ee5\u70b9\u53f3\u4e0a\u89d2\u201cStar\u201d\u652f\u6301\u4e00\u4e0b\uff0c\u60a8\u7684\u652f\u6301\u5c31\u662f\u6211\u7684\u52a8\u529b\uff0c\u8c22\u8c22\uff5e \ud83d\ude03</p> <p>\u5982\u679c\u611f\u89c9 AndroidAOP \u4e3a\u60a8\u8282\u7ea6\u4e86\u5927\u91cf\u5f00\u53d1\u65f6\u95f4\u3001\u4e3a\u60a8\u7684\u9879\u76ee\u589e\u5149\u6dfb\u5f69\uff0c\u60a8\u4e5f\u53ef\u4ee5\u626b\u63cf\u4e0b\u9762\u7684\u4e8c\u7ef4\u7801\uff0c\u8bf7\u4f5c\u8005\u559d\u676f\u5496\u5561 \u2615</p>"},{"location":"zh/#_6","title":"\u6350\u8d60\u5217\u8868","text":"<p>\u5982\u679c\u5728\u6350\u8d60\u7559\u8a00\u4e2d\u5907\u6ce8\u540d\u79f0\uff0c\u5c06\u4f1a\u88ab\u8bb0\u5f55\u5230\u5217\u8868\u4e2d~ \u5982\u679c\u4f60\u4e5f\u662fgithub\u5f00\u6e90\u4f5c\u8005\uff0c\u6350\u8d60\u65f6\u53ef\u4ee5\u7559\u4e0bgithub\u9879\u76ee\u5730\u5740\u6216\u8005\u4e2a\u4eba\u4e3b\u9875\u5730\u5740\uff0c\u94fe\u63a5\u5c06\u4f1a\u88ab\u6dfb\u52a0\u5230\u5217\u8868\u4e2d</p>"},{"location":"zh/#_7","title":"\u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u6709\u95ee\u9898\u53ef\u4ee5\u52a0\u7fa4\u5927\u5bb6\u4e00\u8d77\u4ea4\u6d41 \u70b9\u6b64\u52a0QQ\u7fa4\uff1a641697838</li> </ul>"},{"location":"zh/AOP_Helper/","title":"AOP \u4ee3\u7801\u751f\u6210\u52a9\u624b","text":""},{"location":"zh/AOP_Helper/#1","title":"1\u3001\u8bf4\u660e","text":"<p>\u8fd9\u4e2a\u201c\u52a9\u624b\u201d\u662f Android Studio \u7684\u63d2\u4ef6\uff0c\u76f8\u5f53\u4e8e\u4f60\u4f7f\u7528\u672c\u5e93\u65f6\u7684\u4e00\u4e2a\u5c0f\u5e2e\u624b\uff0c\u53ea\u662f\u5e2e\u4f60\u751f\u6210\u4e00\u4e9b AOP \u7684\u4ee3\u7801\uff0c\u9664\u6b64\u4e4b\u5916\u5bf9\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528</p> <p>\u63d2\u4ef6\u4e3a\u76ee\u6807\u7c7b\u751f\u6210AOP\u8f85\u52a9\u4ee3\u7801\uff0c\u5305\u542b\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>@AndroidAopReplaceClass</li> <li>@AndroidAopMatchClassMethod</li> <li>@AndroidAopModifyExtendsClass</li> <li>@AndroidAopCollectMethod</li> </ul> <p>\u867d\u7136\u6709\u8fd9\u6837\u7684\u63d2\u4ef6\uff0c\u4f46\u4e5f\u9700\u8981\u4f60\u4e86\u89e3\u672c\u5e93\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u6765\u7504\u522b\u6311\u9009\u751f\u6210\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u65e0\u8111\u590d\u5236\uff5e</p>"},{"location":"zh/AOP_Helper/#2","title":"2\u3001\u5b89\u88c5\u63d2\u4ef6","text":"<ul> <li> <p>\u63d2\u4ef6\u5e02\u573a\uff0c\u5728 Android Studio \u4e2d\u641c\u7d22\u63d2\u4ef6 AndroidAOP Code Viewer \u5b89\u88c5\u5373\u53ef</p> <ul> <li>\ud83d\udc46\u63d2\u4ef6\u5e02\u573a\u9700\u8981\u5ba1\u6838\u4e0d\u4e00\u5b9a\u662f\u6700\u65b0\u7248\u672c </li> </ul> </li> <li> <p>\u70b9\u6b64\u4e0b\u8f7d\u63d2\u4ef6\uff0c\u7136\u540e\u81ea\u884c\u641c\u7d22\u5982\u4f55\u5b89\u88c5\u672c\u5730\u63d2\u4ef6</p> <ul> <li>\ud83d\udc46\u6b64\u5904\u4e0b\u8f7d\u94fe\u63a5\u4fdd\u6301\u6700\u65b0\u529f\u80fd </li> </ul> </li> <li> <p>\u5b89\u88c5\u540e IDE \u53f3\u4fa7\u4f1a\u663e\u793a\u51fa\u540d\u4e3a AOPCode \u7684\u63d2\u4ef6</p> </li> </ul>"},{"location":"zh/AOP_Helper/#3","title":"3\u3001\u4f7f\u7528","text":"<p>\u5728\u4f60\u60f3\u8981\u5207\u5165\u7684\u4ee3\u7801\u4e0a\u53f3\u51fb\u9f20\u6807 -&gt; \u70b9\u51fb AndroidAOP Code -&gt; \u53f3\u4fa7\u70b9\u51fbAOPCode\u67e5\u770b\u751f\u6210\u7684\u4ee3\u7801\uff0c\u5982\u56fe\uff1a</p> <ul> <li>\u5982\u679c\u4e0d\u80fd\u51fa\u73b0AOP\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u627e\u5230\u5bf9\u5e94\u7684 class \u6587\u4ef6\u518d\u53bb\u6267\u884c\u8be5\u6b65\u9aa4\u8fdb\u884c\u5c1d\u8bd5</li> </ul> <p></p>"},{"location":"zh/AOP_Helper/#4","title":"4\u3001\u7279\u522b\u8bf4\u660e","text":"<ul> <li>\u751f\u6210\u7684 <code>@AndroidAopReplaceClass</code>\u3001<code>@AndroidAopReplaceMethod</code> \u548c <code>@AndroidAopMatchClassMethod</code> \u4ee3\u7801\u4e2d\u7684\u7c7b\u540d\u548c\u51fd\u6570\u7b7e\u540d\u90fd\u662f\u7edd\u5bf9\u6b63\u786e\u7684\uff08\u5982\u6709\u95ee\u9898\u6b22\u8fce\u6307\u6b63\uff09\u3002</li> <li>\u751f\u6210\u7684 <code>@AndroidAopReplaceMethod</code> Java \u65b9\u6cd5\u4e0d\u5305\u62ec Kotlin \u6e90\u4ee3\u7801\u7684 suspend \u51fd\u6570</li> <li>\u751f\u6210\u7684 <code>@AndroidAopReplaceMethod</code> \u65b9\u6cd5\u6709\u53ef\u80fd\u6709\u6240\u504f\u5dee\uff0c\u9700\u8981\u4f60\u4eb2\u81ea\u6bd4\u5bf9\u4e00\u4e0b\u3002\u5982: <code>\u53ef\u7a7a ?</code>\u3001<code>\u662f\u5426Kotlin\u6e90\u4ee3\u7801\u7684\u7c7b\u578b</code>\u3001<code>\u53ef\u53d8\u53c2\u6570\u7c7b\u578b\u53d8\u6210\u6570\u7ec4\u7c7b\u578b</code> \u7b49\u7b49\uff0c\u8fd9\u4e9b\u662f\u65e0\u6cd5\u4fdd\u8bc1\u51c6\u786e\u590d\u5236\u7684</li> </ul>"},{"location":"zh/About_obfuscation/","title":"\u5173\u4e8e\u6df7\u6dc6","text":""},{"location":"zh/About_obfuscation/#_1","title":"\u6df7\u6dc6\u89c4\u5219","text":"<p>\u6b64\u8d44\u6e90\u5e93\u81ea\u5e26\u6df7\u6dc6\u89c4\u5219\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u5bfc\u5165\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u65e0\u9700\u624b\u52a8\u5bfc\u5165\u3002</p>"},{"location":"zh/About_obfuscation/#_2","title":"\u5173\u4e8e\u6df7\u6dc6\u540e\u6620\u5c04\u95ee\u9898","text":"<p>\u6709\u4e9b\u5c0f\u4f19\u4f34\u4f1a\u53d1\u73b0\u6df7\u6dc6\u524d\uff0c\u62a5\u9519\u540e\u7684\u884c\u53f7\u662f\u53ef\u4ee5\u5b9a\u4f4d\u9519\u8bef\u4f4d\u7f6e\u7684\uff0c\u4f46\u662f\u6df7\u6dc6\u540e\u65e0\u6cd5\u901a\u8fc7 <code>ProGuard</code> \u5de5\u5177\u6620\u5c04\u51fa\u539f\u6709\u884c\u53f7\uff0c\u4f46\u662f\u4f7f\u7528\u672c\u5e93\u524d\u662f\u53ef\u4ee5\u6620\u5c04\u51fa\u6765\u7684\u3002\u7684\u786e\u5982\u6b64\uff01\u4e0b\u8fb9\u8bb2\u4e00\u4e0b\u89e3\u51b3\u65b9\u6cd5\u3002</p> <ul> <li>1\u3001\u9996\u5148\u9700\u8981\u786e\u8ba4\u4f60\u7684\u8fd9\u4e2a\u7c7b\u662f\u5426\u662f\u7ecf\u8fc7AOP\u5904\u7406\u8fc7\u540e\u7684\u7c7b\uff08\u53ef\u901a\u8fc7\u67e5\u770b\u5207\u70b9cutInfoJson\u786e\u8ba4\uff09\uff0c\u5982\u679c\u662f\u5219\u6309\u4e0b\u4e00\u6b65\u8bf4\u660e\u7ee7\u7eed\u5c1d\u8bd5</li> <li>2\u3001\u53ea\u9700\u8981\u8ba9 AndroidAOP \u5931\u6548\uff0c\u7136\u540e\u518d\u6b21\u6253\u4e00\u4e2a\u6df7\u6dc6\u5305\uff0c\u4e5f\u5c31\u662f\u518d\u6b21\u751f\u6210\u4e00\u4e2a\u4e0d\u5305\u542bAOP\u7684\u6620\u5c04\u6587\u4ef6\u5373\u53ef\uff0c\u5728 application \u7684 module \u4e0b\u914d\u7f6e\u5982\u4e0b\uff1a</li> </ul> <pre><code>androidAopConfig {\n    //\u8bbe\u7f6e\u4e3afalse \u4f7f AndroidAOP \u5931\u6548\n    enabled false\n}\n</code></pre> <p>\u5173\u4e8e\u6620\u5c04\u6587\u4ef6\u914d\u7f6e\uff0c\u5728\u6df7\u6dc6\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165\u4ee5\u4e0b\u914d\u7f6e</p> <pre><code># \u6620\u5c04\u6587\u4ef6\n-printmapping proguard-map.txt\n# \u629b\u51fa\u5f02\u5e38\u65f6\u4fdd\u7559\u4ee3\u7801\u884c\u53f7\n-keepattributes SourceFile,LineNumberTable\n</code></pre>"},{"location":"zh/AndroidAopCollectMethod/","title":"@AndroidAopCollectMethod","text":""},{"location":"zh/AndroidAopCollectMethod/#_1","title":"\u7b80\u8ff0","text":"<p>\u6b64\u5207\u9762\u662f\u6536\u96c6\u7ee7\u627f\u7c7b\u6216\u7b26\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7c7b\uff0c\u5176\u6ce8\u89e3\u7684\u65b9\u6cd5\u5c06\u4f1a\u5728\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528\u6240\u5728\u7c7b\u65f6\u81ea\u52a8\u56de\u8c03</p> <pre><code>@AndroidAopCollectMethod(\n    /**\n     * \u6536\u96c6\u7684\u7c7b\u578b\n     */\n    collectType = CollectType.DIRECT_EXTENDS,\n    /**\n     * \u8fd9\u4e00\u9879\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\n     * \u8bbe\u7f6e\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u6ce8\u89e3\u65b9\u6cd5\u7684\u53c2\u6570\u53ef\u4ee5\u662f Object \u6216 Any \uff0c\u4e0d\u8bbe\u7f6e\u5219\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\n     * \u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u540e\u4f1a\u6309\u7167\u60a8\u8bbe\u7f6e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53bb\u67e5\u627e\u7b26\u5408\u8981\u6c42\u7684\u7c7b\u540d\n     */\n    regex = \"\"\n)\n</code></pre>"},{"location":"zh/AndroidAopCollectMethod/#_2","title":"\u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\u586b\u5199\u8981\u6c42","text":"<ul> <li> <p>\u6240\u4fee\u9970\u65b9\u6cd5\u5fc5\u987b\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u4e0d\u8bbe\u8fd4\u56de\u503c\u7c7b\u578b</p> </li> <li> <p>\u5b83\u76f4\u63a5\u4fee\u9970\u65b9\u6cd5\uff0c\u5e76\u4e14\u4fee\u9970\u7684\u65b9\u6cd5\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u6b64\u529f\u80fd\u5c31\u662f\u6536\u96c6\u5e94\u7528\u5185\u6240\u6709\u7ee7\u627f\u8fd9\u4e2a\u53c2\u6570\u7684\u7c7b\uff0c\u53c2\u6570\u7c7b\u578b\u5982\u679c\u662f\uff1a</p> <ul> <li>\u5bf9\u8c61\uff0c\u5219\u53ea\u6536\u96c6\u975e\u62bd\u8c61\u7c7b\uff0c\u975e\u63a5\u53e3\u7684\u5b50\u7c7b\uff1b\u5fc5\u987b\u6709\u9ed8\u8ba4\u7684\u65e0\u53c2\u6784\u9020\u65b9\u6cd5\u624d\u53ef\u4ee5\uff0c\u5426\u5219\u4f1a\u6709\u5f02\u5e38</li> <li>Class\uff0c\u5219\u65e0\u8bba\u63a5\u53e3\u8fd8\u662f\u62bd\u8c61\u7c7b\u90fd\u4f1a\u6536\u96c6\uff1b\u5bf9\u6784\u9020\u65b9\u6cd5\u53c2\u6570\u65e0\u9650\u5236</li> </ul> </li> <li> <p>\u53e6\u5916\u5176\u6ce8\u89e3\u7684\u65b9\u6cd5\u6536\u96c6\u5230\u7684\u6bcf\u4e00\u4e2a\u7c7b\u53ea\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u9759\u6001\u65b9\u6cd5\u521d\u59cb\u5316\u56de\u8c03\u4e00\u6b21\u3002</p> <ul> <li>\u521d\u59cb\u5316\u65f6\u673a\uff0c\u5c31\u662f\u4f60\u7b2c\u4e00\u6b21\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u7684\u65f6\u5019\uff0c\u5373\u7c7b\u88ab\u521d\u59cb\u5316\u7684\u65f6\u5019\u3002</li> <li>\u4e0d\u4f7f\u7528\u4e0d\u4f1a\u521d\u59cb\u5316\u56e0\u6b64\u5b83\u662f\u201c\u61d2\u52a0\u8f7d\u201d\uff0c\u5e76\u4e14\u7ebf\u7a0b\u5b89\u5168\uff01</li> <li>\u7eaf\u9759\u6001\u7ec7\u5165\u65b9\u5f0f\uff0c\u6ca1\u6709\u4efb\u4f55\u53cd\u5c04\uff0c\u6027\u80fd\u66f4\u597d\u3002</li> </ul> </li> <li> <p>\u6700\u540e\u7684\u4e00\u70b9\u5c31\u662f\u8fd9\u4e2a\u65b9\u6cd5\u5185\u5c3d\u91cf\u53ea\u6709\u76f8\u5173\u7684\u4fdd\u5b58\u4ee3\u7801\uff0c\u4e0d\u8981\u505a\u5176\u4ed6\u7684\u64cd\u4f5c\uff0c\u5c3d\u91cf\u907f\u5f00\u51fa\u73b0\u5f02\u5e38\u7684\u884c\u4e3a\uff08\u56e0\u4e3a\u4f60\u53ea\u6709\u4e00\u6b21\u63a5\u6536\u673a\u4f1a\u2026\u2026\uff09</p> </li> </ul>"},{"location":"zh/AndroidAopCollectMethod/#collecttype-direct_extends","title":"collectType  \u9ed8\u8ba4 <code>DIRECT_EXTENDS</code>\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b","text":"<ul> <li><code>EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u6240\u6709\u7ee7\u627f\u4e8e \u6ce8\u89e3\u65b9\u6cd5\u53c2\u6570 \u6240\u8bbe\u7f6e\u7684\u7c7b</li> <li><code>DIRECT_EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u76f4\u63a5\u7ee7\u627f\u4e8e \u6ce8\u89e3\u65b9\u6cd5\u53c2\u6570 \u6240\u8bbe\u7f6e\u7684\u7c7b</li> <li><code>LEAF_EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u672b\u7aef\u7ee7\u627f\uff08\u5c31\u662f\u6ca1\u6709\u5b50\u7c7b\u4e86\uff09 \u6ce8\u89e3\u65b9\u6cd5\u53c2\u6570 \u6240\u8bbe\u7f6e\u7684\u7c7b</li> </ul> <p>\ud83d\udca1\ud83d\udca1\ud83d\udca1\u5982\u679c\u8bbe\u7f6e\u53c2\u6570\u4e3aObject\u6216Any\u65f6\uff0c\u5219\u6b64\u9879\u8bbe\u7f6e\u5c06\u4f1a\u88ab\u5ffd\u7565\uff0c\u4f46\u662f <code>regex</code> \u5fc5\u987b\u8981\u586b\u5199</p> <pre><code>graph LR\nC(C \u7c7b) ---&gt; |C\u7c7b\u7ee7\u627f\u4e8eB\u7c7b| B{ B \u7c7b };\nB ---&gt;|B\u7c7b\u7ee7\u627f\u4e8eA\u7c7b| A[A \u7c7b];\nB ---&gt;|DIRECT_EXTENDS / EXTENDS| A;\nC ----&gt;|LEAF_EXTENDS / EXTENDS| A;\nD(D \u7c7b) ---&gt;|D\u7c7b\u7ee7\u627f\u4e8eA\u7c7b| A;\nD ---&gt;|DIRECT_EXTENDS/ LEAF_EXTENDS / EXTENDS| A;</code></pre>"},{"location":"zh/AndroidAopCollectMethod/#regex","title":"regex \u586b\u5199 <code>\u6b63\u5219\u8868\u8fbe\u5f0f</code>","text":"<p>\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u540e\u4f1a\u6309\u7167\u60a8\u8bbe\u7f6e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53bb\u67e5\u627e\u7b26\u5408\u8981\u6c42\u7684\u7c7b\u540d</p> <ul> <li>\u8bbe\u7f6e\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u6ce8\u89e3\u65b9\u6cd5\u7684\u53c2\u6570\u53ef\u4ee5\u662f Object \u6216 Any ,\u53ef\u4ee5\u770b\u4e0b\u8fb9\u7684\u4f8b\u5b50</li> <li>\u4e0d\u8bbe\u7f6e\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5219\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b</li> </ul>"},{"location":"zh/AndroidAopCollectMethod/#_3","title":"\u4f7f\u7528\u65b9\u5f0f","text":"<p>\u4f7f\u7528\u8d77\u6765\u6781\u5176\u7b80\u5355\uff0c\u793a\u4f8b\u4ee3\u7801\u5df2\u7ecf\u8bf4\u660e\u4e86</p> KotlinJava <pre><code>object InitCollect {\n    private val collects = mutableListOf&lt;SubApplication&gt;()\n    private val collectClazz: MutableList&lt;Class&lt;out SubApplication&gt;&gt; = mutableListOf()\n\n    @AndroidAopCollectMethod\n    @JvmStatic\n    //\u6536\u96c6\u7ee7\u627f\u81ea SubApplication \u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684\u5b9e\u4f8b\u5bf9\u8c61\n    fun collect(sub: SubApplication){\n      collects.add(sub)\n    }\n\n    @AndroidAopCollectMethod\n    @JvmStatic\n    //\u6536\u96c6\u7ee7\u627f\u81ea SubApplication \u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684 class \u5bf9\u8c61\n    fun collect2(sub:Class&lt;out SubApplication&gt;){\n      collectClazz.add(sub)\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\\\$Router\")\n    @JvmStatic\n    //\u6536\u96c6\u7b26\u5408 regex \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684 class \u5bf9\u8c61\u3002\u4ea6\u53ef\u7ed3\u5408\u7ee7\u627f\u4f7f\u7528\n    fun collectRouterClassRegex(sub:Class&lt;out Any&gt;){\n        Log.e(\"InitCollect\", \"----collectRouterClassRegexClazz----$sub\")\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\\\$Router\")\n    @JvmStatic\n    //\u6536\u96c6\u7b26\u5408 regex \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002\u4ea6\u53ef\u7ed3\u5408\u7ee7\u627f\u4f7f\u7528\n    fun collectRouterClassRegex(sub:Any){\n        Log.e(\"InitCollect\", \"----collectRouterClassRegexObject----$sub\")\n    }\n\n     //\u76f4\u63a5\u8c03\u8fd9\u4e2a\u65b9\u6cd5\uff08\u65b9\u6cd5\u540d\u4e0d\u9650\uff09\u4e0a\u8fb9\u7684\u51fd\u6570\u4f1a\u88ab\u6089\u6570\u56de\u8c03\n    fun init(application: Application){\n        for (collect in collects) {\n            collect.onCreate(application)\n        }\n    }\n}\n</code></pre> <pre><code>public class InitCollect {\n    private static final List&lt;SubApplication&gt; collects = new ArrayList&lt;&gt;();\n    private static final List&lt;Class&lt;? extends SubApplication&gt;&gt; collectClazz = new ArrayList&lt;&gt;();\n\n    @AndroidAopCollectMethod\n    //\u6536\u96c6\u7ee7\u627f\u81ea SubApplication \u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684\u5b9e\u4f8b\u5bf9\u8c61\n    public static void collect(SubApplication sub){\n        collects.add(sub);\n    }\n\n    @AndroidAopCollectMethod\n    //\u6536\u96c6\u7ee7\u627f\u81ea SubApplication \u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684 class \u5bf9\u8c61\n    public static void collect2(Class&lt;? extends SubApplication&gt; sub){\n        collectClazz.add(sub);\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\$Router\")\n    //\u6536\u96c6\u7b26\u5408 regex \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002\u4ea6\u53ef\u7ed3\u5408\u7ee7\u627f\u4f7f\u7528\n    public static void collectRouterClassRegex(Class&lt;?&gt; sub){\n        Log.e(\"InitCollect2\",\"----collectRouterClassRegexClazz----\"+sub);\n    }\n\n    @AndroidAopCollectMethod(regex = \".*?\\\\$\\\\$Router\")\n    //\u6536\u96c6\u7b26\u5408 regex \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7c7b\uff0c\u5e76\u56de\u8c03\u4ed6\u7684 class \u5bf9\u8c61\u3002\u4ea6\u53ef\u7ed3\u5408\u7ee7\u627f\u4f7f\u7528\n    public static void collectRouterClassRegex(Object sub){\n        Log.e(\"InitCollect2\",\"----collectRouterClassRegexObject----\"+sub);\n    }\n\n    //\u76f4\u63a5\u8c03\u8fd9\u4e2a\u65b9\u6cd5\uff08\u65b9\u6cd5\u540d\u4e0d\u9650\uff09\u4e0a\u8fb9\u7684\u51fd\u6570\u4f1a\u88ab\u6089\u6570\u56de\u8c03\n    public static void init(Application application){\n        Log.e(\"InitCollect2\",\"----init----\");\n        for (SubApplication2 collect : collects) {\n            collect.onCreate(application);\n        }\n    }\n}\n</code></pre> <p>\u4f7f\u7528\u8fd9\u4e2a\u6536\u96c6\u7c7b <pre><code>public class MyApp extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        InitCollect.init(this);\n    }\n}\n</code></pre></p>"},{"location":"zh/AndroidAopCollectMethod/#_4","title":"\u5e94\u7528\u573a\u666f","text":"<ul> <li> <p>\u591a\u4e2amodule\u9700\u8981\u4f7f\u7528Application\u7684\uff0c\u4f8b\u5982\u4e0a\u8ff0\u7684\u4f8b\u5b50</p> </li> <li> <p>\u5bf9\u4e8e\u6709\u5174\u8da3\u60f3\u8981\u81ea\u5df1\u5b9e\u73b0 Router \u7684\uff0c\u8fd9\u4e2a\u5207\u9762\u53ef\u4ee5\u5e2e\u4f60\u627e\u5230\u4f60\u60f3\u8981\u7684</p> </li> <li> <p>\u9002\u914d\u8def\u7531\u5e93\u4f8b\u5982\u8fd9\u4e2a ARouter \u9002\u914d AGP8 \u7684\u6837\u4f8b</p> </li> <li> <p>\u65e2\u7ebf\u7a0b\u5b89\u5168\u53c8\u662f\u61d2\u52a0\u8f7d\u7684\u5355\u4f8b\u7684\u53c8\u4e00\u79cd\u65b0\u7684\u65b9\u5f0f\uff01 <pre><code>public class TestInstance {\n    private static TestInstance instance;\n\n    @AndroidAopCollectMethod(\n            regex = \"^com.flyjingfish.lightrouter.TestInstance$\"\n    )\n    public static void collectInstance(Object any){\n        instance = (TestInstance) any;\n    }\n\n    public static TestInstance getInstance() {\n        return instance;\n    }\n\n    public void test(){\n        Log.e(\"TestInstance\",\"=====test=\");\n    }\n}\n</code></pre></p> </li> <li> <p>\u81ea\u5b9a\u4e49 SPI(Service Provider Interface) \u7684\u5b9e\u73b0</p> </li> <li> <p>\u66f4\u591a\u5e94\u7528\u573a\u666f\u5f85\u4f60\u63a2\u7d22</p> </li> </ul>"},{"location":"zh/AndroidAopMatchClassMethod/","title":"@AndroidAopMatchClassMethod","text":""},{"location":"zh/AndroidAopMatchClassMethod/#_1","title":"\u7b80\u8ff0","text":"<p>\u6b64\u5207\u9762\u662f\u505a\u5339\u914d\u67d0\u7c7b\u53ca\u5176\u5bf9\u5e94\u65b9\u6cd5\u7684\u5207\u9762\u7684\uff0c\u8fd9\u4e2a\u5207\u9762\u65b9\u5f0f\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u6267\u884c\uff08Method Execution\uff09 \u6ce8\u610f\u533a\u5206\u548c@AndroidAopReplaceClass\u7684\u533a\u522b\u3002</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \u76ee\u6807\u7c7b\u540d\uff08\u5305\u542b\u5305\u540d\uff09,\n    methodName = \u65b9\u6cd5\u540d\u6570\u7ec4,\n    type = \u5339\u914d\u7c7b\u578b\uff0c\u975e\u5fc5\u987b\uff0c\u9ed8\u8ba4 EXTENDS\n    excludeClasses = \u6392\u9664\u7ee7\u627f\u5173\u7cfb\u4e2d\u7684\u4e00\u4e9b\u7c7b\u7684\u6570\u7ec4\uff08type \u4e0d\u662f SELF \u624d\u6709\u6548\uff09\uff0c\u975e\u5fc5\u987b\n    excludeWeaving = \u6392\u9664\u7ec7\u5165\u7684\u8303\u56f4\n    includeWeaving = \u5305\u62ec\u7ec7\u5165\u7684\u8303\u56f4\n)\n</code></pre> <ul> <li> <p>targetClassName \u662f\u5185\u90e8\u7c7b\u65f6\u4e0d\u4f7f\u7528<code>$</code>\u5b57\u7b26\uff0c\u800c\u662f\u7528<code>.</code></p> </li> <li> <p>type \u6709\u56db\u79cd\u7c7b\u578b\uff08\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4 <code>EXTENDS</code>\uff09\uff1a</p> <ul> <li><code>SELF</code> \u8868\u793a\u5339\u914d\u7684\u662f targetClassName \u6240\u8bbe\u7f6e\u7c7b\u7684 \u81ea\u8eab</li> <li><code>EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u6240\u6709\u7ee7\u627f\u4e8e targetClassName \u6240\u8bbe\u7f6e\u7684\u7c7b</li> <li><code>DIRECT_EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u76f4\u63a5\u7ee7\u627f\u4e8e targetClassName \u6240\u8bbe\u7f6e\u7684\u7c7b</li> <li><code>LEAF_EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u672b\u7aef\u7ee7\u627f\uff08\u5c31\u662f\u6ca1\u6709\u5b50\u7c7b\u4e86\uff09 targetClassName \u6240\u8bbe\u7f6e\u7684\u7c7b</li> </ul> <pre><code>graph LR\nC(C \u7c7b) ---&gt; |C\u7c7b\u7ee7\u627f\u4e8eB\u7c7b| B{ B \u7c7b };\nB ---&gt;|B\u7c7b\u7ee7\u627f\u4e8eA\u7c7b| A[A \u7c7b];\nB ---&gt;|DIRECT_EXTENDS / EXTENDS| A;\nC ----&gt;|LEAF_EXTENDS / EXTENDS| A;\nD(D \u7c7b) ---&gt;|D\u7c7b\u7ee7\u627f\u4e8eA\u7c7b| A;\nD ---&gt;|DIRECT_EXTENDS/ LEAF_EXTENDS / EXTENDS| A;</code></pre> <p>\u7b80\u5355\u6765\u8bf4\uff0c<code>LEAF_EXTENDS</code>\u548c<code>DIRECT_EXTENDS</code>\u662f\u4e24\u4e2a\u6781\u7aef\uff0c\u524d\u8005\u5173\u6ce8\u7684\u662f\u7ee7\u627f\u5173\u7cfb\u4e2d\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u540e\u8005\u5173\u6ce8\u7684\u662f\u7ee7\u627f\u5173\u7cfb\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u53e6\u5916\u6ce8\u610f <code>EXTENDS</code> \u8fd9\u79cd\u5339\u914d\u7c7b\u578b\u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u6240\u6709\u7ee7\u627f\u7684\u4e2d\u95f4\u7c7b\u4e5f\u53ef\u80fd\u4f1a\u52a0\u5165\u5207\u9762\u4ee3\u7801</p> </li> <li> <p>excludeClasses</p> <ul> <li>\u5982\u679c targetClassName \u662f\u7c7b\u540d\uff0c\u5c31\u662f\u6392\u9664\u6389\u7ee7\u627f\u5173\u7cfb\u4e2d\u7684\u4e00\u4e9b\u7c7b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\uff0c\u4e14 type \u4e0d\u662f SELF \u624d\u6709\u6548</li> <li>\u5982\u679c targetClassName \u662f\u5305\u540d\uff0c\u5c31\u662f\u6392\u9664\u6389\u5339\u914d\u5230\u7684\u4e00\u4e9b\u7c7b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\uff0c\u4e14 type \u662f SELF \u624d\u6709\u6548</li> </ul> </li> <li> <p>overrideMethod \u9ed8\u8ba4false</p> <ul> <li> <p>\u8bbe\u7f6e\u4e3atrue\uff0c\u5982\u679c\u5b50\u7c7b\uff08\u975e\u63a5\u53e3\uff0c\u53ef\u4ee5\u662f\u62bd\u8c61\u7c7b\uff09\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u65b9\u6cd5\u5219\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5</p> <ul> <li>targetClassName \u4e0d\u53ef\u4ee5\u5305\u542b *</li> <li>methodName \u4e0d\u53ef\u4ee5\u5b9a\u4e49 [ \"*\" ]</li> <li>\u91cd\u5199\u7684\u65b9\u6cd5\u4e0d\u80fd\u662fprivate \u3001final\u4fee\u9970\u7684\u624d\u53ef\u4ee5</li> </ul> </li> <li> <p>\u8bbe\u7f6e\u4e3afalse\uff0c\u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u5339\u914d\u7684\u65b9\u6cd5\u5219\u4e0d\u4f5c\u5904\u7406</p> </li> </ul> </li> <li> <p>excludeWeaving \u548c includeWeaving \u7c7b\u4f3c\u4e8e \u5165\u95e8\u5904\u7684\u914d\u7f6e \u7684 exclude \u548c include</p> </li> </ul> <p>Note</p> <p>\u53e6\u5916\u4e0d\u662f\u6240\u6709\u7c7b\u90fd\u53ef\u4ee5Hook\u8fdb\u53bb</p> <ul> <li><code>type</code> \u7c7b\u578b\u4e3a <code>SELF</code> \u65f6\uff0c<code>targetClassName</code> \u6240\u8bbe\u7f6e\u7684\u7c7b\u5fc5\u987b\u662f\u5b89\u88c5\u5305\u91cc\u7684\u4ee3\u7801\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u8fd9\u4e2a\u7c7b\uff08\u5982\uff1aToast\uff09\u5728 android.jar \u91cc\u8fb9\u662f\u4e0d\u884c\u7684\u3002\u5982\u6709\u8fd9\u79cd\u9700\u6c42\u5e94\u8be5\u4f7f\u7528@AndroidAopReplaceClass</li> <li><code>type</code> \u7c7b\u578b\u4e0d\u662f <code>SELF</code> \u65f6\uff0c\u8fd9\u4e2a\u5207\u9762\u8981\u60f3\u6709\u4f5c\u7528\u9700\u8981\u6709\u5339\u914d\u7684\u90a3\u4e2a\u65b9\u6cd5\uff0c\u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u91cd\u5199\u5339\u914d\u7684\u65b9\u6cd5\uff0c\u5b50\u7c7b\u5c31\u4e0d\u4f1a\u88ab\u5339\u914d\u5230\uff0c\u4f7f\u7528 overrideMethod \u53ef\u5ffd\u7565\u6b64\u9650\u5236 \u3002\u4f46\u8bf7\u6ce8\u610f\u5b50\u7c7b\u4e5f\u5fc5\u987b\u662f\u5b89\u88c5\u5305\u91cc\u7684\u4ee3\u7801</li> <li>\u5f53\u4f60\u4fee\u6539\u8fd9\u4e2a\u5207\u9762\u7684\u914d\u7f6e\u540e\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u5e94\u8be5clean\u9879\u76ee\u518d\u7ee7\u7eed\u5f00\u53d1</li> </ul>"},{"location":"zh/AndroidAopMatchClassMethod/#_2","title":"\u521b\u5efa\u5207\u9762\u5904\u7406\u7c7b","text":"<p>\u5207\u9762\u5904\u7406\u7c7b\u9700\u8981\u5b9e\u73b0 MatchClassMethod \u63a5\u53e3\uff0c\u5728 invoke \u4e2d\u5904\u7406\u5207\u9762\u903b\u8f91</p> <pre><code>interface MatchClassMethod {\n    fun invoke(joinPoint: ProceedJoinPoint, methodName:String): Any?\n}\n</code></pre> <p>Note</p> <p>\u5982\u679c\u5207\u70b9\u51fd\u6570\u662f suspend \u70b9\u6b64\u524d\u5f80\u67e5\u770b</p> <ul> <li>ProceedJoinPoint\u4ecb\u7ecd</li> <li>invoke\u8fd4\u56de\u503c\u4ecb\u7ecd</li> <li>\u751f\u547d\u5468\u671f</li> </ul>"},{"location":"zh/AndroidAopMatchClassMethod/#_3","title":"\u5339\u914d\u89c4\u5219","text":"<p>\u53ef\u4ee5\u770b\u5230\u4e0b\u8fb9\u4f8b\u5b50\u4e2d\u6709\u7684\u8bbe\u7f6e\u7684\u65b9\u6cd5\u540d\u5c31\u53ea\u5199\u4e86\u65b9\u6cd5\u540d\uff0c\u6709\u7684\u4e5f\u5199\u4e0a\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u4e0b\u8fb9\u4ecb\u7ecd\u4e0b</p>"},{"location":"zh/AndroidAopMatchClassMethod/#_4","title":"\u6a21\u7cca\u5339\u914d","text":"<ul> <li>1\u3001targetClassName \u6700\u540e\u4ee5 <code>.*</code> \u7ed3\u5c3e\u4e14\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u5e76\u4e14 <code>type = MatchType.SELF</code> \u65f6\uff0c\u5219\u5339\u914d\u8be5\u5305\u4e0b\u6240\u6709\u7c7b\uff0c\u5305\u62ec\u5b50\u5305 \u5982\u4e0b\u8fb9\u7684\u4f8b\u4e5d</li> <li>2\u3001methodName \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\u540d\u4e3a <code>*</code> \u7684\u5219\u5339\u914d\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5 \u5982\u4e0b\u8fb9\u7684\u4f8b\u516b</li> <li>3\u3001methodName \u53ea\u5199\u65b9\u6cd5\u540d\u4f46\u4e0d\u5199\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\u4e5f\u662f\u6a21\u7cca\u5339\u914d\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u76ee\u6807\u7c7b\u4e2d\u6240\u6709\u540c\u540d\u65b9\u6cd5\u90fd\u52a0\u5165\u5207\u70b9</li> </ul> <p>Note</p> <p>\u5bf9\u4e8e\u5339\u914d\u5305\u540d\u7684\u6211\u662f\u5f3a\u70c8\u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a\u7684\uff0c\u4fb5\u5165\u4ee3\u7801\u8fc7\u591a\uff0c\u800c\u4e14\u6253\u5305\u901f\u5ea6\u660e\u663e\u4e0b\u964d\u3002\u5efa\u8bae\u53ea\u505a\u8c03\u8bd5\u3001\u65e5\u5fd7\u4e4b\u7528\uff0c\u539f\u65b9\u6cd5\u5e94\u5168\u90e8\u653e\u884c</p>"},{"location":"zh/AndroidAopMatchClassMethod/#_5","title":"\u7cbe\u51c6\u5339\u914d","text":"<p>methodName \u65b9\u6cd5\u540d\u5199\u4e0a\u8fd4\u56de\u7c7b\u578b\u3001\u53c2\u6570\u7c7b\u578b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7cbe\u51c6\u5230\u4e00\u4e2a\u65b9\u6cd5\u52a0\u5165\u5207\u70b9\uff08\u7cbe\u51c6\u5339\u914d\u5f02\u5e38\u65f6\u4f1a\u81ea\u52a8\u9000\u5316\u5230\u6a21\u7cca\u5339\u914d\uff09</p> <p>\u5339\u914d\u7684\u5199\u6cd5\u516c\u5f0f\uff1a \u8fd4\u56de\u503c\u7c7b\u578b \u65b9\u6cd5\u540d(\u53c2\u6570\u7c7b\u578b,\u53c2\u6570\u7c7b\u578b...)</p> <ul> <li>\u8fd4\u56de\u503c\u7c7b\u578b \u53ef\u4ee5\u4e0d\u7528\u5199</li> <li>\u65b9\u6cd5\u540d \u5fc5\u987b\u5199</li> <li>\u53c2\u6570\u7c7b\u578b \u53ef\u4ee5\u4e0d\u7528\u5199\uff0c\u5199\u7684\u8bdd\u7528 () \u5305\u88f9\u8d77\u6765\uff0c\u591a\u4e2a\u53c2\u6570\u7c7b\u578b\u7528 , \u9694\u5f00\uff0c\u6ca1\u6709\u53c2\u6570\u5c31\u53ea\u5199 ()</li> <li>\u8fd4\u56de\u503c\u7c7b\u578b \u548c \u65b9\u6cd5\u540d \u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00</li> <li>\u8fd4\u56de\u503c\u7c7b\u578b \u548c \u53c2\u6570\u7c7b\u578b \u4e0d\u5199\u7684\u8bdd\u5c31\u662f\u4e0d\u9a8c\u8bc1</li> <li>\u8fd4\u56de\u503c\u7c7b\u578b \u548c \u53c2\u6570\u7c7b\u578b \u90fd\u8981\u7528 Java \u7684\u7c7b\u578b\u8868\u793a\uff0c\u9664\u4e86 8 \u79cd\u57fa\u672c\u7c7b\u578b\u4e4b\u5916\uff0c\u5176\u4ed6\u5f15\u7528\u7c7b\u578b\u90fd\u662f \u5305\u540d.\u7c7b\u540d</li> <li>\u5982\u679c\u51fd\u6570\u662f <code>suspend</code> \u4fee\u9970\u7684\uff0c\u90a3 \u8fd4\u56de\u503c\u7c7b\u578b \u65e0\u8bba\u662f\u4ec0\u4e48\u7c7b\u578b\u90fd\u5199 <code>suspend</code> \uff0c\u53c2\u6570\u7c7b\u578b \u8fd8\u662f\u6309\u4e0a\u8ff0\u51e0\u70b9\u6765\u5199</li> <li> <p>\u5bf9\u4e8e\u5b58\u5728\u6cdb\u578b\u4fe1\u606f\u7684\uff08\u4f8b\u5982\u96c6\u5408List\uff09\u5fc5\u987b\u62b9\u9664\u6cdb\u578b\u4fe1\u606f</p> </li> <li> <p>\u4e0etargetClassName\u4e0d\u540c\u7684\u662f\u65b9\u6cd5\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u5982\u679c\u662f\u5185\u90e8\u7c7b\u5219\u9700\u8981\u7528<code>$</code>\u800c\u4e0d\u80fd\u7528<code>.</code>\u4ee3\u66ff</p> </li> </ul> <p>Note</p> <p>AOP \u4ee3\u7801\u751f\u6210\u52a9\u624b\uff0c\u53ef\u8f85\u52a9\u4f60\u4e00\u952e\u751f\u6210\u4ee3\u7801</p> <p>\u4e0b\u8fb9\u7ed9\u51fa\u7c7b\u578b\u8868\u793a\u4e0d\u540c\u7684 Kotlin \u5bf9 Java \u5bf9\u7167\u8868\uff0c\u5982\u679c\u662f Kotlin \u4ee3\u7801\u8bf7\u5bf9\u53f7\u5165\u5ea7</p> <p>\uff08\u6709\u53d1\u73b0\u4e0d\u5168\u7684\u53ef\u4ee5\u8ddf\u6211\u53cd\u9988\uff09</p> Kotlin \u7c7b\u578b Java \u7c7b\u578b Int int Short short Byte byte Char char Long long Float float Double double Boolean boolean Int? java.lang.Integer Short? java.lang.Short Byte? java.lang.Byte Char? java.lang.Character Long? java.lang.Long Float? java.lang.Float Double? java.lang.Double Boolean? java.lang.Boolean String java.lang.String Unit\uff08\u6216\u4e0d\u5199\uff09 void Unit? kotlin.Unit Nothing java.lang.Void Any java.lang.Object <p>\u5176\u4ed6\u4e0d\u5728\u4e0a\u8868\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u90fd\u5c5e\u4e8e\u5f15\u7528\u7c7b\u578b\uff0c\u5199\u6cd5\u5c31\u662f \u5305\u540d.\u7c7b\u540d</p> <p>Note</p> <p>1\u3001Kotlin \u4e2d\u7684 <code>vararg str : String</code> \u76f8\u5f53\u4e8e Java \u4e2d\u7684 <code>String...</code>\uff0c\u8fd9\u79cd\u5339\u914d\u65f6\u65e0\u8bba\u54ea\u79cd\u4ee3\u7801\u90fd\u6309 <code>String[]</code> \u6765\u8868\u793a\uff08\u6b64\u5904\u4ee5 String \u4e3a\u4f8b\uff0c\u5176\u4ed6\u7c7b\u578b\u4e5f\u4e00\u6837\uff09 2\u3001\u5bf9\u4e8e\u6709\u6cdb\u578b\u7684\u7c7b\u578b\u4e0d\u8981\u5199\u6cdb\u578b\uff0c\u4f8b\u5982 <code>java.lang.List&lt;String&gt; methodName(java.lang.List&lt;String&gt;)</code> \u5e94\u8be5\u76f4\u63a5\u5199\u4e3a <code>java.lang.List methodName(java.lang.List)</code></p>"},{"location":"zh/AndroidAopMatchClassMethod/#_6","title":"\u5404\u79cd\u573a\u666f\u793a\u4f8b","text":""},{"location":"zh/AndroidAopMatchClassMethod/#_7","title":"\u4f8b\u4e00","text":"<p>\u60f3\u8981\u76d1\u6d4b\u6240\u6709\u7ee7\u627f\u81ea AppCompatActivity \u7c7b\u7684\u6240\u6709 startActivity \u8df3\u8f6c</p> <pre><code>@AndroidAopMatchClassMethod(\n   targetClassName = \"androidx.appcompat.app.AppCompatActivity\",\n   methodName = {\"startActivity\"},\n   type = MatchType.EXTENDS\n)\npublic class MatchActivityMethod implements MatchClassMethod {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull String methodName) {\n        // \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91 \n        return joinPoint.proceed();\n    }\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5339\u914d\u5b50\u7c7b\u65b9\u6cd5\u7684\uff0c\u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u91cd\u5199\u5339\u914d\u7684\u65b9\u6cd5\uff0c\u662f\u65e0\u6548\u7684\uff0c\u4f7f\u7528 overrideMethod \u53ef\u5ffd\u7565\u6b64\u9650\u5236</p>"},{"location":"zh/AndroidAopMatchClassMethod/#_8","title":"\u4f8b\u4e8c","text":"<p>\u5047\u5982\u60f3 Hook \u6240\u6709\u7684 android.view.View.OnClickListener \u7684 onClick\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u60f3\u5168\u5c40\u76d1\u6d4b\u6240\u6709\u7684\u8bbe\u7f6e OnClickListener \u7684\u70b9\u51fb\u4e8b\u4ef6\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS //type \u4e00\u5b9a\u662f EXTENDS \u56e0\u4e3a\u4f60\u60f3 hook \u6240\u6709\u7ee7\u627f\u4e86 OnClickListener \u7684\u7c7b\n)\nclass MatchOnClick : MatchClassMethod {\n//    @SingleClick(5000) //\u8054\u5408 @SingleClick \uff0c\u7ed9\u6240\u6709\u70b9\u51fb\u589e\u52a0\u9632\u591a\u70b9\uff0c6\u4e0d6\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u8fd9\u5757\u63d0\u793a\u4e0b\uff0c\u5bf9\u4e8e\u4f7f\u7528\u4e86 lambda \u70b9\u51fb\u76d1\u542c\u7684\uff1b</p> <p>ProceedJoinPoint \u7684 target \u4e0d\u662f android.view.View.OnClickListener</p> <ul> <li>\u5bf9\u4e8eJava target \u662f \u8bbe\u7f6elambda\u8868\u8fbe\u5f0f\u7684\u90a3\u4e2a\u7c7b\u7684\u5bf9\u8c61</li> <li>\u5bf9\u4e8eKotlin target \u662f null</li> </ul> <p>invoke \u56de\u8c03\u7684 methodName \u4e5f\u4e0d\u662f onClick \u800c\u662f\u7f16\u8bd1\u65f6\u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u540d\uff0c\u7c7b\u4f3c\u4e8e\u8fd9\u6837 onCreate\\(lambda\\)14 \u91cc\u8fb9\u5305\u542b\u4e86 lambda \u5173\u952e\u5b57</p> <p>\u5bf9\u4e8e onClick(view:View) \u7684 view</p> <ul> <li>\u5982\u679c\u662f Kotlin \u7684\u4ee3\u7801 ProceedJoinPoint.args[1]</li> <li>\u5982\u679c\u662f Java \u7684\u4ee3\u7801 ProceedJoinPoint.args[0]</li> </ul> <p>\u8fd9\u5757\u4e0d\u5728\u7ee7\u7eed\u8d58\u8ff0\u4e86\uff0c\u81ea\u5df1\u7528\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86\uff1b</p> <p>\u603b\u7ed3\u4e0b\uff1a\u5176\u5b9e\u5bf9\u4e8e\u6240\u6709\u7684 lambda \u7684 ProceedJoinPoint.args</p> <ul> <li>\u5982\u679c\u662f Kotlin \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8bbe\u7f6elambda\u8868\u8fbe\u5f0f\u7684\u90a3\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u540e\u8fb9\u7684\u53c2\u6570\u5c31\u662f hook \u65b9\u6cd5\u7684\u6240\u6709\u53c2\u6570</li> <li>\u5982\u679c\u662f Java \u4ece\u7b2c\u4e00\u4e2a\u53c2\u6570\u5f00\u59cb\u5c31\u662f hook \u65b9\u6cd5\u7684\u6240\u6709\u53c2\u6570</li> </ul>"},{"location":"zh/AndroidAopMatchClassMethod/#_9","title":"\u4f8b\u4e09","text":"<p>\u76ee\u6807\u7c7b\u6709\u591a\u4e2a\u91cd\u540d\u65b9\u6cd5\uff0c\u53ea\u60f3\u5339\u914d\u67d0\u4e00\u4e2a\u65b9\u6cd5\uff08\u4e0a\u6587\u6709\u63d0\u5230\u7cbe\u51c6\u5339\u914d\u89c4\u5219\uff09</p> <p><pre><code>package com.flyjingfish.test_lib;\n\npublic class TestMatch {\n    public void test(int value1){\n\n    }\n\n    public String test(int value1,String value2){\n        return value1+value2;\n    }\n}\n</code></pre> \u4f8b\u5982\u6709 TestMatch \u8fd9\u4e2a\u7c7b \u6709\u4e24\u4e2a\u540d\u4e3a test \u7684\u65b9\u6cd5\uff0c\u4f60\u53ea\u60f3\u5339\u914d test(int value1,String value2) \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u90a3\u4e48\u5199\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>package com.flyjingfish.test_lib.mycut;\n\n@AndroidAopMatchClassMethod(\n        targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n        methodName = [\"java.lang.String test(int,java.lang.String)\"],\n        type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n  override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n    Log.e(\"MatchTestMatchMethod\",\"======\"+methodName+\",getParameterTypes=\"+joinPoint.getTargetMethod().getParameterTypes().length);\n    // \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91 \n    //\u4e0d\u60f3\u6267\u884c\u539f\u6765\u65b9\u6cd5\u903b\u8f91\uff0c\ud83d\udc47\u5c31\u4e0d\u8c03\u7528\u4e0b\u8fb9\u8fd9\u53e5\n    return joinPoint.proceed()\n  }\n}\n</code></pre>"},{"location":"zh/AndroidAopMatchClassMethod/#_10","title":"\u4f8b\u56db","text":"<p>\u7ee7\u627f\u5173\u7cfb\u5c42\u6b21\u8f83\u591a\u65f6\u4e0d\u60f3\u6bcf\u5c42\u90fd\u52a0\u5165\u5207\u9762</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS //type \u4e00\u5b9a\u662f EXTENDS \u56e0\u4e3a\u4f60\u60f3 hook \u6240\u6709\u7ee7\u627f\u4e86 OnClickListener \u7684\u7c7b\n)\nclass MatchOnClick : MatchClassMethod {\n//    @SingleClick(5000) //\u8054\u5408 @SingleClick \uff0c\u7ed9\u6240\u6709\u70b9\u51fb\u589e\u52a0\u9632\u591a\u70b9\uff0c6\u4e0d6\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <pre><code>public abstract class MyOnClickListener implements View.OnClickListener {\n    @Override\n    public void onClick(View v) {\n        ...\n        //\u8fd9\u5757\u6709\u5fc5\u8981\u7684\u903b\u8f91\u4ee3\u7801\n    }\n}\n</code></pre> <pre><code>binding.btnSingleClick.setOnClickListener(object :MyOnClickListener(){\n    override fun onClick(v: View?) {\n        super.onClick(v)//\u5c24\u5176\u662f\u8fd9\u53e5\u8c03\u7528\u7236\u7c7b onClick \u60f3\u8981\u4fdd\u7559\u6267\u884c\u7236\u7c7b\u65b9\u6cd5\u7684\u903b\u8f91\n        onSingleClick()\n    }\n})\n</code></pre> <p>\u8fd9\u4e48\u5199\uff0c\u4f1a\u5bfc\u81f4\u4e0a\u8fb9\u7684 MyOnClickListener onClick \u4e5f\u52a0\u5165\u5207\u9762\uff0c\u5982\u6b64\u4e00\u6765\u76f8\u5f53\u4e8e\u4e00\u4e2a\u70b9\u51fb\u6709\u56de\u8c03\u4e86\u4e24\u6b21\u5207\u9762\u5904\u7406\u7c7b\u7684 invoke \uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u6539 <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS,\n    excludeClasses = [\"com.flyjingfish.androidaop.test.MyOnClickListener\"]//\u52a0\u4e0a\u8fd9\u4e2a\u53ef\u4ee5\u6392\u9664\u6389\u4e00\u4e9b\u7c7b\n)\nclass MatchOnClick : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> \u6216\u8005\u8bbe\u7f6e type \u4e3a LEAF_EXTENDS \u76f4\u63a5\u8fc7\u6ee4\u6389\u4e2d\u95f4\u7c7b\uff08\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e00\u53e5\u5e7f\u544a\uff1a\u6ca1\u6709\u4e2d\u95f4\u5546\u8d5a\u5dee\u4ef7\uff09</p>"},{"location":"zh/AndroidAopMatchClassMethod/#_11","title":"\u4f8b\u4e94","text":"<p>\u5207\u5165\u70b9\u662f\u4f34\u751f\u5bf9\u8c61\u600e\u4e48\u529e\uff1f</p> <p>\u5047\u5982\u6709\u8fd9\u6837\u4e00\u4e2a\u4ee3\u7801 <pre><code>package com.flyjingfish.androidaop\n\nclass ThirdActivity : BaseActivity() {\n    companion object{\n        fun start(){\n            ...\n        }\n    }\n}\n</code></pre> \u4f34\u751f\u5bf9\u8c61\u4fee\u9970\u7b26 companion \u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5982\u4e0b\u5373\u53ef <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.ThirdActivity.Companion\",\n    methodName = [\"start\"],\n    type = MatchType.SELF\n)\nclass MatchCompanionStart : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchCompanionStart\", \"======$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre></p>"},{"location":"zh/AndroidAopMatchClassMethod/#_12","title":"\u4f8b\u516d","text":"<p>\u5207\u5165\u70b9\u662f Kotlin \u4ee3\u7801\u7684\u6210\u5458\u53d8\u91cf\uff0c\u60f3\u8981\u76d1\u542c\u8d4b\u503c\u3001\u53d6\u503c\u7684\u64cd\u4f5c</p> <pre><code>package com.flyjingfish.androidaop.test\nclass TestBean {\n    var name:String = \"test\"\n}\n</code></pre> <p>\u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u4f1a\u6709\u8fd9\u6837\u7684\u64cd\u4f5c</p> <pre><code>testBean.name = \"1111\" //\u8d4b\u503c\u64cd\u4f5c\nval name = testBean.name //\u53d6\u503c\u64cd\u4f5c\n</code></pre> <p>\u60a8\u53ef\u4ee5\u8fd9\u4e48\u5199</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.test.TestBean\",\n    methodName = [\"setName\",\"getName\"],\n    type = MatchType.SELF\n)\nclass MatchTestBean : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchTestBean\", \"======$methodName\");\n        ToastUtils.makeText(ToastUtils.app,\"MatchTestBean======$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre>"},{"location":"zh/AndroidAopMatchClassMethod/#_13","title":"\u4f8b\u4e03","text":"<p>\u5982\u679c\u5207\u70b9\u65b9\u6cd5\u662f <code>suspend</code> \u4fee\u9970\u7684\u51fd\u6570\u600e\u4e48\u529e\uff1f</p> <ul> <li> <p>\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u6a21\u7cca\u5339\u914d</p> </li> <li> <p>\u5982\u679c\u60f3\u8981\u4f7f\u7528 \u7cbe\u51c6\u5339\u914d,\u5219\u5199\u6cd5\u5982\u4e0b\uff0c\u5177\u4f53\u89c4\u5219 \u770b\u7cbe\u51c6\u5339\u914d\u90e8\u5206</p> </li> </ul> <pre><code>package com.flyjingfish.androidaop\n\nclass MainActivity: BaseActivity2() {\n    suspend fun getData(num:Int) :Int{\n        return withContext(Dispatchers.IO) {\n            getDelayResult()\n        }\n    }\n}\n</code></pre> <p>\u7cbe\u51c6\u5339\u914d\u5199\u6cd5\u5982\u4e0b\uff0c\u5339\u914d\u7684\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u65e0\u8bba\u662f\u54ea\u79cd\uff0c\u90fd\u5199 <code>suspend</code> ,\u5177\u4f53\u8bf4\u660e\u770b\u4e0a\u6587\u7684\u7cbe\u51c6\u5339\u914d\u90e8\u5206</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.MainActivity\",\n    methodName = [\"suspend getData(int)\"],\n    type = MatchType.SELF\n)\nclass MatchSuspend : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchSuspend\", \"======$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre>"},{"location":"zh/AndroidAopMatchClassMethod/#_14","title":"\u4f8b\u516b","text":"<p>\u60f3\u8981\u5339\u914d\u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u65b9\u6cd5</p> <p><pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.SecondActivity\",\n    methodName = [\"*\"],\n    type = MatchType.SELF\n)\nclass MatchAllMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchMainAllMethod\", \"AllMethod======$methodName\");\n        return joinPoint.proceed()\n    }\n}\n</code></pre> \u65b9\u6cd5\u540d\u90e8\u5206\u53ea\u5199\u4e00\u4e2a\uff0c\u5e76\u4e14\u586b * \u5373\u53ef\u5339\u914d\u6240\u6709\u65b9\u6cd5</p>"},{"location":"zh/AndroidAopMatchClassMethod/#_15","title":"\u4f8b\u4e5d","text":"<p>\u60f3\u8981\u5339\u914d\u4e00\u4e2a\u5305\u4e0b\u7684\u6240\u6709\u7c7b\u7684\u6240\u6709\u65b9\u6cd5</p> <p><pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.androidaop.*\",\n    methodName = [\"*\"],\n    type = MatchType.SELF\n)\nclass MatchAll : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchAll\", \"----&gt;${joinPoint.targetClass}--${joinPoint.targetMethod.name}--${joinPoint.targetMethod.parameterTypes.toList()}\");\n        return joinPoint.proceed()\n    }\n}\n</code></pre> 1\u3001<code>*</code> \u4ee3\u66ff\u4e86 <code>\u7c7b\u540d</code> \u6216\u8005\u4ee3\u66ff<code>\u4e00\u90e8\u5206\u7684\u5305\u540d+\u7c7b\u540d</code>\uff0c\u8be5\u4f8b\u4ee3\u8868 <code>com.flyjingfish.androidaop</code> \u5305\u4ee5\u53ca\u5b50\u5305\u4e0b\u7684\u6240\u6709\u7c7b</p> <p>2\u3001\u5f53\u7136 methodName \u90e8\u5206\u4f9d\u65e7\u53ef\u4ee5\u586b\u5199\u591a\u4e2a\u6a21\u7cca\u5339\u914d\u751a\u81f3\u7cbe\u51c6\u5339\u914d\u7684\u65b9\u6cd5\u540d</p>"},{"location":"zh/AndroidAopMatchClassMethod/#_16","title":"\u4f8b\u5341","text":"<p>\u60f3\u8981\u5339\u914d\u9876\u7ea7\u51fd\u6570\u6216\u8005\u9876\u7ea7\u6269\u5c55\u51fd\u6570</p> <ul> <li>\u9876\u7ea7\u51fd\u6570</li> </ul> <p>\u5047\u5982\u4ee5\u4e0b\u51fd\u6570\u4f4d\u4e8e\u4e00\u4e2a\u540d\u4e3a ContextEx \u7684 kotlin \u6587\u4ef6\u4e2d</p> <pre><code>package com.androidaop.ktx\n\nfun toast(text: String) {\n}\n</code></pre> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.androidaop.ktx.ContextExKt\",\n    type = MatchType.SELF,\n    methodName = [\"void toast(java.lang.String)\"]\n)\nclass MatchContextKt : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u8fd9\u79cd\u9876\u7ea7\u51fd\u6570\u7684\u7b7e\u540d\u6b63\u5982\u4f60\u6240\u89c1\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff0c\u7279\u522b\u4e4b\u5904\u5728\u4e8e\u7c7b\u540d\u52a0\u4e86 Kt</p> <ul> <li>\u9876\u7ea7\u62d3\u5c55\u51fd\u6570</li> </ul> <p>\u4f9d\u65e7\u5047\u5982\u4ee5\u4e0b\u51fd\u6570\u4f4d\u4e8e\u4e00\u4e2a\u540d\u4e3a ContextEx \u7684 kotlin \u6587\u4ef6\u4e2d</p> <pre><code>package com.androidaop.ktx\n\nfun Context.hasPermission(permission: String): Boolean {\n    return ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED\n}\n</code></pre> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.androidaop.ktx.ContextExKt\",\n    type = MatchType.SELF,\n    methodName = [\"boolean hasPermission(android.content.Context,java.lang.String)\"]\n)\nclass MatchContextKt : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u8fd9\u79cd\u9876\u7ea7\u62d3\u5c55\u51fd\u6570\u7684\u4e0d\u4f46\u7c7b\u540d\u52a0\u4e86 Kt \uff0c\u800c\u4e14\u51fd\u6570\u7684\u7b7e\u540d\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4f60\u7684\u62d3\u5c55\u7c7b\u578b\uff0c\u5176\u4ed6\u7684\u90fd\u4e00\u6837</p>"},{"location":"zh/AndroidAopModifyExtendsClass/","title":"@AndroidAopModifyExtendsClass","text":""},{"location":"zh/AndroidAopModifyExtendsClass/#_1","title":"\u7b80\u8ff0","text":"<pre><code>@AndroidAopModifyExtendsClass(\n    value = \"\u4fee\u6539\u76ee\u6807\u7c7b\",\n    isParent = false // value \u662f\u6307\u5411\u7c7b\u7684\u7c7b\u540d\u8fd8\u662f\u7c7b\u7684\u7ee7\u627f\u7c7b\uff0c\u9ed8\u8ba4false\n    excludeWeaving = \u6392\u9664\u7ec7\u5165\u7684\u8303\u56f4\n    includeWeaving = \u5305\u62ec\u7ec7\u5165\u7684\u8303\u56f4\n)\n</code></pre> <ul> <li><code>isParent = true</code> \u5c31\u662f\u4fee\u6539\u6240\u6709\u7ee7\u627f\u7c7b\u662f value \u7684\u7c7b</li> <li><code>isParent = false</code> \u5c31\u662f\u4fee\u6539\u7c7b\u540d\u662f value \u7684\u7c7b</li> <li>excludeWeaving \u548c includeWeaving \u7c7b\u4f3c\u4e8e \u5165\u95e8\u5904\u7684\u914d\u7f6e \u7684 exclude \u548c include</li> </ul> <p>\u8fd9\u4e2a\u529f\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u4fee\u6539\u7c7b\u7684\u7ee7\u627f\u7c7b\uff0c<code>value</code> \u4f4d\u7f6e\u586b\u5199\u8981\u4fee\u6539\u7684\u7c7b\u7684\u5168\u540d\uff0c\u88ab\u6ce8\u89e3\u7684\u7c7b\u5c31\u662f\u4fee\u6539\u540e\u7684\u7ee7\u627f\u7c7b\u3002</p> <p>\u53e6\u5916\u586b\u5199\u7c7b\u540d\u5982\u679c\u662f\u5185\u90e8\u7c7b\u65f6\u4e0d\u4f7f\u7528<code>$</code>\u5b57\u7b26\uff0c\u800c\u662f\u7528<code>.</code></p> <p>Note</p> <ul> <li>\u4f46\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\u4fee\u6539\u540e\u7684\u7ee7\u627f\u7c7b\u4e0d\u53ef\u4ee5\u7ee7\u627f\u88ab\u4fee\u6539\u7684\u7c7b\uff0c\u4fee\u6539\u540e\u7684\u7c7b\u7684\u7ee7\u627f\u7c7b\u4e00\u822c\u90fd\u8bbe\u7f6e\u4e3a\u4fee\u6539\u524d\u7684\u7c7b\u7684\u7ee7\u627f\u7c7b</li> <li>\u539f\u6765\u7684\u7ee7\u627f\u7c7b\u5982\u679c\u662f\u5e26\u6709\u6cdb\u578b\u4fe1\u606f\u7684\uff0c\u8bf7\u6ce8\u610f\u4fee\u6539\u540e\u7684\u7ee7\u627f\u7c7b\u4e5f\u9700\u8981\u662f\u5177\u6709\u4e00\u6837\u6cdb\u578b\u4fe1\u606f</li> <li>\u5f53\u4f60\u4fee\u6539\u8fd9\u4e2a\u5207\u9762\u7684\u914d\u7f6e\u540e\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u5e94\u8be5clean\u9879\u76ee\u518d\u7ee7\u7eed\u5f00\u53d1</li> </ul>"},{"location":"zh/AndroidAopModifyExtendsClass/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"zh/AndroidAopModifyExtendsClass/#_3","title":"\u4f8b\u4e00","text":"<ul> <li> <p>\u5982\u4e0b\u4f8b\u6240\u793a\uff0c\u5c31\u662f\u8981\u628a <code>AppCompatImageView</code> \u7684\u7ee7\u627f\u7c7b\u66ff\u6362\u6210 <code>ReplaceImageView1</code></p> </li> <li> <p>\u56e0\u4e3a\u8bbe\u7f6e\u7684 <code>isParent = false</code> \uff08\u4e0d\u5199\u9ed8\u8ba4false\uff09,\u6240\u4ee5\u53ea\u4f1a\u66ff\u6362 <code>AppCompatImageView</code> \u7684\u7ee7\u627f\u7c7b</p> </li> </ul> <pre><code>@AndroidAopModifyExtendsClass(\n        value = \"androidx.appcompat.widget.AppCompatImageView\",\n        isParent = false\n)\npublic class ReplaceImageView1 extends ImageView {\n    public ReplaceImageView1(@NonNull Context context) {\n        super(context);\n    }\n    public ReplaceImageView1(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public ReplaceImageView1(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    public void setImageDrawable(@Nullable Drawable drawable) {\n        super.setImageDrawable(drawable);\n        //\u505a\u4e00\u4e9b\u76d1\u6d4b\u6216\u8005\u518d\u6b21\u4fee\u6539\n    }\n}\n</code></pre> <p>Note</p> <p>\u4e0a\u8ff0 <code>ReplaceImageView1</code> \u7684\u7ee7\u627f\u7c7b\u4e0d\u53ef\u4ee5\u662f <code>AppCompatImageView</code>,\u8fd9\u6837\u6539\u5b8c\u4e4b\u540e\u5c31\u53d8\u6210\u4e86 <code>AppCompatImageView</code> \u2192 <code>ReplaceImageView1</code> \u2192 <code>AppCompatImageView</code></p>"},{"location":"zh/AndroidAopModifyExtendsClass/#_4","title":"\u4f8b\u4e8c","text":"<ul> <li> <p>\u5982\u4e0b\u4f8b\u6240\u793a\uff0c\u5c31\u662f\u8981\u628a \u6240\u6709\u7236\u7c7b\u662f <code>AppCompatImageView</code> \u7684\u7c7b\u7684\u7ee7\u627f\u66ff\u6362\u6210 <code>ReplaceImageView2</code></p> </li> <li> <p>\u56e0\u4e3a\u8bbe\u7f6e\u7684 <code>isParent = true</code>,\u6240\u4ee5\u7ee7\u627f\u81ea <code>AppCompatImageView</code> \u7684\u7c7b\uff0c\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff0c\u4ed6\u4eec\u7684\u7ee7\u627f\u7c7b\u90fd\u4f1a\u88ab\u66ff\u6362</p> </li> </ul> <pre><code>@AndroidAopModifyExtendsClass( \n        value = \"androidx.appcompat.widget.AppCompatImageView\",\n        isParent = true\n)\npublic class ReplaceImageView2 extends AppCompatImageView {\n    public ReplaceImageView2(@NonNull Context context) {\n        super(context);\n    }\n    public ReplaceImageView2(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public ReplaceImageView2(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    public void setImageDrawable(@Nullable Drawable drawable) {\n        super.setImageDrawable(drawable);\n        //\u505a\u4e00\u4e9b\u76d1\u6d4b\u6216\u8005\u518d\u6b21\u4fee\u6539\n    }\n}\n</code></pre> <p>Note</p> <p>\u4e0a\u8ff0 <code>ReplaceImageView2</code> \u7684\u7ee7\u627f\u7c7b\u53ef\u4ee5\u662f <code>AppCompatImageView</code>,\u8fd9\u6837\u6539\u5b8c\u4e4b\u540e \u539f\u672c\u7684 <code>A</code> \u2192  <code>AppCompatImageView</code> \u5c31\u53d8\u6210\u4e86 <code>A</code> \u2192 <code>ReplaceImageView2</code> \u2192 <code>AppCompatImageView</code></p>"},{"location":"zh/AndroidAopModifyExtendsClass/#_5","title":"\u4f7f\u7528\u542f\u793a","text":"<p>1\u3001\u5728\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u4e2d\u4fee\u6539\u7ee7\u627f\u7c7b\u53ef\u4ee5\u5728\u4e2d\u95f4\u91cd\u5199\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5982\u6b64\u4e00\u6765\u53ef\u4ee5\u5728\u4e2d\u95f4\u5904\u7406\u4e00\u4e0b\u539f\u6709\u903b\u8f91\uff0c\u4e5f\u662f\u5bf9\u5bf9\u8c61\u7684\u67d0\u4e9b\u65b9\u6cd5\u88ab\u8c03\u7528\u7684\u76d1\u6d4b</p>"},{"location":"zh/AndroidAopPointCut/","title":"@AndroidAopPointCut","text":""},{"location":"zh/AndroidAopPointCut/#_1","title":"\u7b80\u8ff0","text":"<p>@AndroidAopPointCut \u662f\u5728\u65b9\u6cd5\u4e0a\u901a\u8fc7\u6ce8\u89e3\u7684\u5f62\u5f0f\u505a\u5207\u9762\u7684\uff0c\u8fd9\u4e2a\u5207\u9762\u65b9\u5f0f\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u6267\u884c\uff08Method Execution\uff09\uff0c\u672c\u5e93\u5185\u7f6e\u7684\u6ce8\u89e3\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u505a\u7684</p> <p>\u53e6\u5916\u8bf7\u6ce8\u610f\u5c3d\u91cf\u4e0d\u8981\u628a\u5207\u9762\u6ce8\u89e3\u653e\u5230\u7cfb\u7edf\u65b9\u6cd5\u4e0a\uff0c\u4f8b\u5982\uff1aActivity \u7684 onCreate() onResume() \u7b49 \u5373\u4fbf\u662f\u52a0\u4e86\u5728\u5207\u9762\u5904\u7406\u65f6\u4e0d\u8981\u6709\u8017\u65f6\u64cd\u4f5c\uff0cjoinPoint.proceed() \u8981\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u610f\u60f3\u4e0d\u5230\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1aANR</p>"},{"location":"zh/AndroidAopPointCut/#_2","title":"\u4e00\u3001\u521b\u5efa\u6ce8\u89e3","text":""},{"location":"zh/AndroidAopPointCut/#_3","title":"\u4e3e\u4f8b","text":"<p>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a CustomIntercept \u7684\u6ce8\u89e3 \u5c06 @AndroidAopPointCut \u52a0\u5230\u4f60\u7684\u6ce8\u89e3\u4e0a</p> KotlinJava <pre><code>@AndroidAopPointCut(CustomInterceptCut::class)\n@Target(AnnotationTarget.FUNCTION,AnnotationTarget.PROPERTY_GETTER,AnnotationTarget.PROPERTY_SETTER)\n@Retention(AnnotationRetention.RUNTIME)\nannotation class CustomIntercept(\n    vararg val value: String = []\n)\n</code></pre> <pre><code>@AndroidAopPointCut(CustomInterceptCut.class)\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomIntercept {\n    String[] value() default {};\n}\n</code></pre> <ul> <li> <p>@AndroidAopPointCut \u7684 CustomInterceptCut.class \u4e3a\u60a8\u5904\u7406\u5207\u9762\u7684\u7c7b\uff08\u4e0b\u6587\u6709\u4ecb\u7ecd\uff09</p> </li> <li> <p>@Target \u53ea\u4f5c\u7528\u5728\u65b9\u6cd5\u4e0a\uff0c\u8bbe\u7f6e\u5176\u4ed6\u65e0\u4f5c\u7528</p> <ul> <li>\u5bf9\u4e8e Java \u53ef\u4ee5\u8bbe\u7f6e <code>ElementType.METHOD</code> \u8fd9\u4e00\u4e2a</li> <li>\u5bf9\u4e8e Kotlin \u53ef\u4ee5\u8bbe\u7f6e <code>AnnotationTarget.FUNCTION</code>,<code>AnnotationTarget.PROPERTY_GETTER</code>,<code>AnnotationTarget.PROPERTY_SETTER</code> \u8fd9\u4e09\u4e2a</li> </ul> </li> <li> <p>@Retention \u53ea\u53ef\u4ee5\u7528 RetentionPolicy.RUNTIME</p> </li> </ul>"},{"location":"zh/AndroidAopPointCut/#_4","title":"\u4e8c\u3001\u521b\u5efa\u5207\u9762\u5904\u7406\u7c7b","text":"<p>\u5207\u9762\u5904\u7406\u7c7b\u9700\u8981\u5b9e\u73b0 BasePointCut \u63a5\u53e3\uff0c\u5728 invoke \u4e2d\u5904\u7406\u5207\u9762\u903b\u8f91</p> <pre><code>interface BasePointCut&lt;T : Annotation&gt; {\n    fun invoke(joinPoint: ProceedJoinPoint, anno: T): Any?\n}\n</code></pre> <p>Note</p> <p>\u5982\u679c\u5207\u70b9\u51fd\u6570\u662f suspend \u70b9\u6b64\u524d\u5f80\u67e5\u770b</p> <ul> <li>ProceedJoinPoint\u4ecb\u7ecd</li> <li>invoke\u8fd4\u56de\u503c\u4ecb\u7ecd</li> <li>\u751f\u547d\u5468\u671f</li> </ul>"},{"location":"zh/AndroidAopPointCut/#_5","title":"\u4e3e\u4f8b","text":"<p>CustomInterceptCut \u7ee7\u627f\u81ea BasePointCut\uff0c\u53ef\u4ee5\u770b\u5230 BasePointCut \u4e0a\u6709\u4e00\u6cdb\u578b\uff0c\u8fd9\u4e2a\u6cdb\u578b\u5c31\u662f\u4e0a\u8fb9\u7684 @CustomIntercept \u6ce8\u89e3\uff0c\u4e24\u8005\u662f\u4e92\u76f8\u5173\u8054\u7684 <pre><code>class CustomInterceptCut : BasePointCut&lt;CustomIntercept&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        annotation: CustomIntercept//annotation\u5c31\u662f\u4f60\u52a0\u5230\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\n    ): Any? {\n        // \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91\n        return joinPoint.proceed()\n    }\n}\n</code></pre></p>"},{"location":"zh/AndroidAopPointCut/#_6","title":"\u4e09\u3001\u4f7f\u7528","text":"<p>\u76f4\u63a5\u5c06\u4f60\u5199\u7684\u6ce8\u89e3\u52a0\u5230\u4efb\u610f\u4e00\u4e2a\u65b9\u6cd5\u4e0a\uff0c\u4f8b\u5982\u52a0\u5230\u4e86 onCustomIntercept() \u5f53 onCustomIntercept() \u88ab\u8c03\u7528\u65f6\u9996\u5148\u4f1a\u8fdb\u5165\u5230\u4e0a\u6587\u63d0\u5230\u7684 CustomInterceptCut \u7684 invoke \u65b9\u6cd5\u4e0a</p> <pre><code>@CustomIntercept(\"\u6211\u662f\u81ea\u5b9a\u4e49\u6570\u636e\")\nfun onCustomIntercept(){\n\n}\n</code></pre>"},{"location":"zh/AndroidAopReplaceClass/","title":"@AndroidAopReplaceClass","text":""},{"location":"zh/AndroidAopReplaceClass/#_1","title":"\u7b80\u8ff0\uff08\u8fd9\u4e2a\u529f\u80fd\u5c5e\u4e8e\u9ad8\u9636\u529f\u80fd\uff0c\u4f7f\u7528\u65f6\u9700\u8981\u7279\u522b\u6ce8\u610f\u5426\u5219\u4f1a\u65e0\u6548\uff09","text":"<p>\u6b64\u5207\u9762\u662f\u505a\u66ff\u6362\u4ee3\u7801\u4e2d\u7684\u65b9\u6cd5\u8c03\u7528\u7684\uff0c\u9700\u8981\u4e0e@AndroidAopReplaceMethod\u914d\u5408\u4f7f\u7528\uff0c\u88ab\u66ff\u6362\u65b9\u6cd5\u8c03\u7528\u65f6\u4f1a\u8fdb\u5165@AndroidAopReplaceMethod\u6ce8\u89e3\u7684\u65b9\u6cd5</p> <ul> <li>\u6ce8\u610f\u8fd9\u79cd\u65b9\u5f0f\u548c\u5176\u4ed6\u4e24\u79cd\u6709\u7740\u672c\u8d28\u7684\u533a\u522b\uff0c\u524d\u4e24\u79cd\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u6267\u884c\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u4fdd\u7559\u53ef\u4ee5\u6267\u884c\u539f\u6709\u903b\u8f91\u7684\u65b9\u6cd5\uff08\u5373ProceedJoinPoint\uff09\uff1b</li> <li>\u8fd9\u4e2a\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u662f\u5c06\u6240\u6709\u8c03\u7528\u7684\u5730\u65b9\u66ff\u6362\u4e3a\u60a8\u8bbe\u7f6e\u7684\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e0d\u4f1a\u81ea\u52a8\u4fdd\u7559\u6267\u884c\u539f\u6709\u903b\u8f91\u7684\u65b9\u6cd5</li> <li>\u8fd9\u4e2a\u65b9\u5f0f\u7684\u4f18\u70b9\u5728\u4e8e\u201c\u76f8\u5f53\u4e8e\u201d\u53ef\u4ee5\u76d1\u6d4b\u5230\u67d0\u4e9b\u7cfb\u7edf\u65b9\u6cd5\uff08android.jar\u91cc\u7684\u4ee3\u7801\uff09\u7684\u8c03\u7528\uff0c\u524d\u4e24\u8005\u4e0d\u5177\u5907\u8fd9\u4e2a\u7279\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u662f\u57fa\u4e8e\u6b64\u79cd\u9700\u6c42\uff0c\u5efa\u8bae\u4f7f\u7528 @AndroidAopMatchClassMethod</li> </ul> <p>Note</p> <p><li>\u7efc\u4e0a\u6240\u8ff0\u8fd9\u4e2a\u529f\u80fd\u53ef\u4ee5\u8bf4\u662f@AndroidAopMatchClassMethod\u7684\u4e00\u79cd\u8865\u5145\uff08android.jar\u91cc\u7684\u4ee3\u7801\u65e0\u6cd5\u7ec7\u5165AOP\u4ee3\u7801\uff09\uff0c\u4e4b\u6240\u4ee5\u4e0d\u4f7f\u7528ProceedJoinPoint\u4e5f\u662f\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u53d7\u5230Android\u4e0d\u540c\u7248\u672c\u7684\u9650\u5236\uff0c\u65e2\u4e0d\u53ef\u4ee5\u4f7f\u7528\u53cd\u5c04\u6765\u8c03\u7528\u539f\u65b9\u6cd5\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u7ec7\u5165AOP\u4ee3\u7801\uff0c\u6240\u4ee5\u5c31\u4e0d\u53ef\u4ee5\u53bb\u7528ProceedJoinPoint\u5c01\u88c5\u4e86\uff0c\u5982\u679c\u5b9e\u5728\u60f3\u7528\uff0c\u5efa\u8bae\u4f7f\u7528 MatchClassMethodProxy </li> <li>\u867d\u7136\u53ef\u4ee5hook\u4e00\u4e9b\u7cfb\u7edf\u65b9\u6cd5\uff0c\u4f46\u5f52\u6839\u5230\u5e95\u4ed6\u662fhook\u7684\u5b89\u88c5\u5305\u5185\u90e8\u7684\u8c03\u7528\uff0c\u4e0d\u5305\u62ecframework\u5c42\u7684\u8c03\u7528</li> <li>\u5f53\u4f60\u4fee\u6539\u8fd9\u4e2a\u5207\u9762\u7684\u76f8\u5173\u914d\u7f6e\u540e\u4f60\u5e94\u8be5clean\u9879\u76ee\u540e\u518d\u7ee7\u7eed\u5f00\u53d1</li></p>"},{"location":"zh/AndroidAopReplaceClass/#_2","title":"\u4e00\u3001\u8bf4\u660e","text":"<p> \u6ce8\u610f\uff1a\u5b9a\u4e49\u7684\u66ff\u6362\u7c7b\u8981\u653e\u5230\u4f60\u8bbe\u7f6e\u7684\u626b\u63cf\u89c4\u5219\u4e4b\u5185 \u5c31\u662f\u8fd9\u91cc include exclude \u7684\u89c4\u5219\uff0c\u5199\u5728\u8303\u56f4\u4ee5\u5916\u662f\u4e0d\u8d77\u4f5c\u7528\u7684</p>"},{"location":"zh/AndroidAopReplaceClass/#androidaopreplaceclass","title":"@AndroidAopReplaceClass","text":"<pre><code>@AndroidAopReplaceClass(\n    value = \"\u7c7b\u7684\u5168\u79f0\uff08\u5305\u62ec\u5305\u540d\uff09\"\n    type = \u5339\u914d\u7c7b\u578b\uff0c\u975e\u5fc5\u987b\uff0c\u9ed8\u8ba4 SELF\n    excludeClasses = \u6392\u9664\u7ee7\u627f\u5173\u7cfb\u4e2d\u7684\u4e00\u4e9b\u7c7b\u7684\u6570\u7ec4\uff08type \u4e0d\u662f SELF \u624d\u6709\u6548\uff09\uff0c\u975e\u5fc5\u987b\n    excludeWeaving = \u6392\u9664\u7ec7\u5165\u7684\u8303\u56f4\n    includeWeaving = \u5305\u62ec\u7ec7\u5165\u7684\u8303\u56f4\n)\n</code></pre> <ul> <li> <p>value \u586b\u5199\u7684\u7c7b\u540d\u5982\u679c\u662f\u5185\u90e8\u7c7b\u65f6\u4e0d\u4f7f\u7528<code>$</code>\u5b57\u7b26\uff0c\u800c\u662f\u7528<code>.</code></p> </li> <li> <p>\u6ce8\u89e3\u7684\u7c7b\u5c31\u662f\u66ff\u6362\u7c7b\uff1b\u53c2\u6570\u586b\u5199\u7684\u662f\u88ab\u66ff\u6362\u8c03\u7528\u7684\u7c7b</p> </li> <li> <p>\u6ce8\u89e3\u7684\u7c7b\u66ff\u6362\u65b9\u6cd5\u5185\u5b58\u5728\u5bf9\u5e94\u7684\u88ab\u66ff\u6362\u65b9\u6cd5\u65f6\u4e0d\u4f1a\u53c2\u4e0e\u65b9\u6cd5\u66ff\u6362</p> </li> <li> <p>type \u6709\u56db\u79cd\u7c7b\u578b\uff08\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4 <code>SELF</code>\uff0c\u6ce8\u610f\u533a\u5206\u548c <code>@AndroidAopMatchClassMethod</code> \u7684\u533a\u522b\uff0c\u4e24\u8005\u4e0d\u8bbe\u7f6e\u65f6\u9ed8\u8ba4\u7684\u7c7b\u578b\u4e0d\u4e00\u6837\uff09\uff1a</p> <ul> <li><code>SELF</code> \u8868\u793a\u5339\u914d\u7684\u662f value \u6240\u8bbe\u7f6e\u7c7b\u7684 \u81ea\u8eab</li> <li><code>EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u6240\u6709\u7ee7\u627f\u4e8e value \u6240\u8bbe\u7f6e\u7684\u7c7b</li> <li><code>DIRECT_EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u76f4\u63a5\u7ee7\u627f\u4e8e value \u6240\u8bbe\u7f6e\u7684\u7c7b</li> <li><code>LEAF_EXTENDS</code> \u8868\u793a\u5339\u914d\u7684\u662f \u672b\u7aef\u7ee7\u627f\uff08\u5c31\u662f\u6ca1\u6709\u5b50\u7c7b\u4e86\uff09 value \u6240\u8bbe\u7f6e\u7684\u7c7b</li> </ul> <pre><code>graph LR\nC(C \u7c7b) ---&gt; |C\u7c7b\u7ee7\u627f\u4e8eB\u7c7b| B{ B \u7c7b };\nB ---&gt;|B\u7c7b\u7ee7\u627f\u4e8eA\u7c7b| A[A \u7c7b];\nB ---&gt;|DIRECT_EXTENDS / EXTENDS| A;\nC ----&gt;|LEAF_EXTENDS / EXTENDS| A;\nD(D \u7c7b) ---&gt;|D\u7c7b\u7ee7\u627f\u4e8eA\u7c7b| A;\nD ---&gt;|DIRECT_EXTENDS/ LEAF_EXTENDS / EXTENDS| A;</code></pre> <p>\u7b80\u5355\u6765\u8bf4\uff0c<code>LEAF_EXTENDS</code>\u548c<code>DIRECT_EXTENDS</code>\u662f\u4e24\u4e2a\u6781\u7aef\uff0c\u524d\u8005\u5173\u6ce8\u7684\u662f\u7ee7\u627f\u5173\u7cfb\u4e2d\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u540e\u8005\u5173\u6ce8\u7684\u662f\u7ee7\u627f\u5173\u7cfb\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002</p> </li> <li> <p>excludeWeaving \u548c includeWeaving \u7c7b\u4f3c\u4e8e \u5165\u95e8\u5904\u7684\u914d\u7f6e \u7684 exclude \u548c include</p> </li> </ul>"},{"location":"zh/AndroidAopReplaceClass/#androidaopreplacenew","title":"@AndroidAopReplaceNew","text":"<pre><code>@AndroidAopReplaceNew\n</code></pre> <p>\u4e3e\u4e2a\u4f8b\u5b50\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u662f\u5c06 <code>new Thread()</code> \u53d8\u6210 <code>new MyThread()</code></p> <ul> <li> <p>\u6ce8\u89e3\u7684\u65b9\u6cd5\u5fc5\u987b\u662f\u516c\u5171\u4e14\u9759\u6001\u7684\uff0c\u4f46\u65b9\u6cd5\u540d\u968f\u4fbf\u5b9a\u4e49</p> </li> <li> <p>\u65b9\u6cd5\u53c2\u6570\u53ea\u80fd\u662f\u4e00\u4e2a\uff0c\u5e76\u4e14\u53c2\u6570\u662f\u66ff\u6362\u540e\u7684\u7c7b</p> <ul> <li>\u66ff\u6362\u540e\u7684\u7c7b\u6ca1\u6709\u7ee7\u627f\u66ff\u6362\u7c7b\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5bf9\u8c61\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u5c06\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u4f60\u9700\u8981\u628a\u4ed6\u7684\u6240\u6709\u65b9\u6cd5\u4f7f\u7528 @AndroidAopReplaceMethod \u5168\u90e8\u66ff\u6362\u6389</li> <li>\u66ff\u6362\u540e\u7684\u7c7b\u7ee7\u627f\u66ff\u6362\u7c7b\uff0c\u90a3\u4e48\u540e\u7eed\u7684\u65b9\u6cd5\u8c03\u7528\u57fa\u672c\u6ca1\u4ec0\u4e48\u95ee\u9898</li> </ul> </li> <li> <p>\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u662f\u5426\u4e3a\u7a7a</p> <ul> <li>\u4e0d\u4e3a\u7a7a\uff0c\u5219\u4f1a\u5c06new\u51fa\u6765\u7684\u5bf9\u8c61\u56de\u8c03\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5e76\u4e14\u6b64\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u4e5f\u5c06\u4f1a\u66ff\u6362 new \u51fa\u6765\u7684\u5bf9\u8c61\u3002\u901a\u5e38\u8fd4\u56de\u7c7b\u578b\u4e0d\u4e3a\u7a7a\u65f6\u4f60\u5e94\u8be5\u5b9a\u4e49\u7684\u548c\u53c2\u6570\u7c7b\u578b\u4e00\u6837\u3002</li> <li>\u4e3a\u7a7a\u53ea\u4f1a\u66ff\u6362 new \u4e4b\u540e\u7684\u7c7b\u540d\u3002</li> <li>\u65e0\u8bba\u5982\u4f55 new \u540e\u7684\u7c7b\u540d\u90fd\u4f1a\u53d8\u6210\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u3002</li> </ul> </li> <li>\u8fd9\u5c06\u6362\u6389\u5168\u90e8\u7684\u6784\u9020\u65b9\u6cd5\u7684\u8c03\u7528\u3002</li> </ul>"},{"location":"zh/AndroidAopReplaceClass/#androidaopreplacemethod","title":"@AndroidAopReplaceMethod","text":"<pre><code>@AndroidAopReplaceMethod(\n        \"\u65b9\u6cd5\u540d\uff08\u5305\u62ec\u8fd4\u56de\u503c\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\uff09\"\n)\n</code></pre> <ul> <li> <p>\u6ce8\u89e3\u7684\u65b9\u6cd5\u5fc5\u987b\u662f\u516c\u5171\u4e14\u9759\u6001\u7684\uff0c\u4f46\u65b9\u6cd5\u540d\u968f\u4fbf\u5b9a\u4e49</p> </li> <li> <p>\u6ce8\u89e3\u7684\u65b9\u6cd5\u5c31\u662f\u66ff\u6362\u7684\u65b9\u6cd5\uff1b\u53c2\u6570\u586b\u5199\u7684\u662f\u88ab\u66ff\u6362\u7684\u65b9\u6cd5\uff0c\u5fc5\u987b\u5305\u542b\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u586b\u5199\u5339\u914d\u89c4\u5219\u5982\u4e0b\u5339\u914d\u89c4\u5219</p> </li> <li> <p>\u586b\u5199\u7684\u88ab\u66ff\u6362\u7684\u65b9\u6cd5\u5982\u679c\u662f\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u5b9a\u4e49\u7684\u66ff\u6362\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u3001\u987a\u5e8f\u4ee5\u53ca\u4e2a\u6570\u4fdd\u6301\u4e00\u81f4</p> </li> <li> <p>\u586b\u5199\u7684\u88ab\u66ff\u6362\u7684\u65b9\u6cd5\u5982\u679c\u662f\u7c7b\u7684\u6210\u5458\u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u5b9a\u4e49\u7684\u66ff\u6362\u65b9\u6cd5\u7684\u53c2\u6570\u7b2c\u4e00\u4e2a\u9700\u8981\u662f\u88ab\u66ff\u6362\u7684\u7c7b\u7684\u7c7b\u578b\uff08\u4e0b\u6587\u7684Toast.show\u4f8b\u5b50\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\uff09\uff0c\u7136\u540e\u5269\u4f59\u7684\u53c2\u6570\u7c7b\u578b\u3001\u987a\u5e8f\u4ee5\u53ca\u4e2a\u6570\u548c\u88ab\u66ff\u6362\u65b9\u6cd5\u4fdd\u6301\u4e00\u81f4</p> <ul> <li>\u6709\u4e2a\u4f8b\u5916\u60c5\u51b5\uff1a\u7b2c\u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u8bbe\u7f6e\u6210 Any (Java\u662fObject)\uff0c\u8fd9\u4e2a\u529f\u80fd\u4e3b\u8981\u4e3a @AndroidAopReplaceNew \u4e0d\u662f\u7ee7\u627f\u66ff\u6362\u7c7b\u505a\u547c\u5e94\u7684\uff0c\u56e0\u4e3a\u66ff\u6362\u540e\u7684\u7c7b\u4e0d\u518d\u5c5e\u4e8e\u88ab\u66ff\u6362\u7c7b</li> </ul> </li> <li> <p>\u6ce8\u89e3\u7684\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u548c\u88ab\u66ff\u6362\u65b9\u6cd5\u4fdd\u6301\u4e00\u81f4\uff0c\u65e0\u8bba\u88ab\u66ff\u6362\u65b9\u6cd5\u662f\u5426\u662f\u9759\u6001\u7684\u90fd\u662f\u4e00\u6837\u7684</p> </li> <li> <p>\u586b\u5199\u7684\u88ab\u66ff\u6362\u7684\u65b9\u6cd5\u5fc5\u987b\u662f\u5c5e\u4e8e @AndroidAopReplaceClass \u586b\u5199\u7684\u88ab\u66ff\u6362\u7c7b\u7684\u65b9\u6cd5</p> </li> <li> <p>\u5982\u679c\u586b\u5199\u7684\u88ab\u66ff\u6362\u7684\u65b9\u6cd5\u4ee5 <code>&lt;init&gt;</code> \u5f00\u5934\uff0c\u529f\u80fd\u5206\u4e24\u79cd\u60c5\u51b5</p> <ul> <li>1\u3001\u6309\u4ee5\u4e0b\u8981\u6c42\u586b\u5199\uff0c\u529f\u80fd\u7c7b\u4f3c @AndroidAopReplaceNew \uff0c\u4e0d\u540c\u7684\u662f\u8fd9\u53ea\u4f1a\u56de\u8c03 new \u51fa\u6765\u7684\u7c7b\uff0c\u4e0d\u4f1a\u6539\u53d8 new \u7684\u7c7b\u540d\uff0c\u800c\u4e14\u53ef\u4ee5\u6307\u5b9a\u6784\u9020\u65b9\u6cd5\u3002\uff08\u5bf9\u8c61\u5df2\u7ecf\u88ab\u521b\u5efa\u51fa\u6765\u4e86\uff09<ul> <li>\u65b9\u6cd5\u5fc5\u987b\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u5b9a\u4e49\u7684\u88ab\u66ff\u6362\u7c7b\uff08\u5fc5\u987b\u7b49\u4e8e@AndroidAopReplaceClass \u7684\u7c7b\uff09</li> <li>\u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff08\u5fc5\u987b\u7ee7\u627f\u6216\u7b49\u4e8e@AndroidAopReplaceClass \u7684\u7c7b\uff09</li> <li>\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u5c06\u4f1a\u66ff\u6362new\u7684\u5bf9\u8c61\uff08\u5f53\u7136\u76f4\u63a5\u8fd4\u56de\u56de\u8c03\u8fdb\u6765\u5bf9\u8c61\u4e5f\u53ef\u4ee5\uff09</li> </ul> </li> <li>2\u3001\u6309\u4ee5\u4e0b\u8981\u6c42\u586b\u5199\uff0c\u529f\u80fd\u4e0e\u4e4b\u524d\u6240\u8ff0\u5b8c\u5168\u4e0d\u540c\uff0c\u6b64\u65f6\u5bf9\u8c61\u5c1a\u672a\u521b\u5efa\u51fa\u6765\uff08\u6b64\u529f\u80fd\u57282.5.8\u53ca\u4ee5\u4e0a\u7684\u7248\u672c\u5f00\u59cb\u4f7f\u7528\uff09<ul> <li>\u53c2\u6570\u5fc5\u987b\u548c\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u548c\u987a\u5e8f\u5b8c\u5168\u4e00\u81f4,\u6700\u540e\u518d\u8ffd\u52a0\u4e00\u4e2a Class\u7c7b\u578b \u53c2\u6570\uff08\u8fd9\u662f\u4e3a\u4e86\u8ba9\u4f60\u77e5\u9053\u539f\u6784\u9020\u65b9\u6cd5\u662f\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u7684\uff09</li> <li>\u9700\u8981\u4f60\u624b\u52a8\u91cd\u65b0\u53bb\u5199\u521b\u5efa\u5bf9\u8c61\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u5c1a\u672a\u521b\u5efa\u51fa\u5bf9\u8c61\u6765\uff08\u53ef\u6839\u636e\u8fd4\u56de\u7ed9\u4f60\u7684 Class \u4ee5\u53ca\u5f53\u524d\u7684\u6784\u9020\u5668\u7c7b\u578b\u53cd\u5c04\u8c03\u7528\u6784\u9020\u65b9\u6cd5\uff09</li> <li>\u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff08\u5fc5\u987b\u7ee7\u627f\u6216\u7b49\u4e8e@AndroidAopReplaceClass \u7684\u7c7b\uff09</li> <li>\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u5c06\u4f1a\u8d4b\u503c\u7ed9\u539f\u8c03\u7528\u5904</li> </ul> </li> </ul> </li> </ul> <p>\u5177\u4f53\u5199\u6cd5\u8981\u6c42\u770b\u4e0b\u8fb9\u7684\u4f7f\u7528\u65b9\u6cd5</p>"},{"location":"zh/AndroidAopReplaceClass/#_3","title":"\u4e8c\u3001\u5339\u914d\u89c4\u5219","text":"<p>\u53ef\u4ee5\u770b\u5230\u4e0b\u8fb9\u4f8b\u5b50\u4e2d\u90fd\u5199\u4e0a\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u4e0b\u8fb9\u4ecb\u7ecd\u4e0b</p> <p>\u4e0e @AndroidAopMatchClassMethod \u4e0d\u540c\u7684\u662f\u8fd9\u4e2a\u5fc5\u987b\u662f\u7cbe\u51c6\u5339\u914d\uff0c\u5199\u6cd5\u5982\u4e0b\uff1a</p> <p>\u5339\u914d\u7684\u5199\u6cd5\u516c\u5f0f\uff1a \u8fd4\u56de\u503c\u7c7b\u578b \u65b9\u6cd5\u540d(\u53c2\u6570\u7c7b\u578b,\u53c2\u6570\u7c7b\u578b...)</p> <ul> <li>\u8fd4\u56de\u503c\u7c7b\u578b\u3001\u65b9\u6cd5\u540d\u3001\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u5199\u5168</li> <li>\u53c2\u6570\u7c7b\u578b \u7528 () \u5305\u88f9\u8d77\u6765\uff0c\u591a\u4e2a\u53c2\u6570\u7c7b\u578b\u7528 , \u9694\u5f00\uff0c\u6ca1\u6709\u53c2\u6570\u5c31\u53ea\u5199 ()</li> <li>\u8fd4\u56de\u503c\u7c7b\u578b \u548c \u65b9\u6cd5\u540d \u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00</li> <li>\u8fd4\u56de\u503c\u7c7b\u578b \u548c \u53c2\u6570\u7c7b\u578b \u90fd\u8981\u7528 Java \u7684\u7c7b\u578b\u8868\u793a\uff0c\u9664\u4e86 8 \u79cd\u57fa\u672c\u7c7b\u578b\u4e4b\u5916\uff0c\u5176\u4ed6\u5f15\u7528\u7c7b\u578b\u90fd\u662f \u5305\u540d.\u7c7b\u540d</li> <li>\u5982\u679c\u51fd\u6570\u662f <code>suspend</code> \u4fee\u9970\u7684\uff0c\u90a3 \u8fd4\u56de\u503c\u7c7b\u578b \u65e0\u8bba\u662f\u4ec0\u4e48\u7c7b\u578b\u90fd\u5199 <code>suspend</code> \uff0c\u53c2\u6570\u7c7b\u578b \u8fd8\u662f\u6309\u4e0a\u8ff0\u51e0\u70b9\u6765\u5199</li> <li> <p>\u5bf9\u4e8e\u5b58\u5728\u6cdb\u578b\u4fe1\u606f\u7684\uff08\u4f8b\u5982\u96c6\u5408List\uff09\u5fc5\u987b\u62b9\u9664\u6cdb\u578b\u4fe1\u606f</p> </li> <li> <p>\u4e0e\u586b\u5199\u7684\u66ff\u6362\u7c7b\u540d\u4e0d\u540c\u7684\u662f\u65b9\u6cd5\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u5982\u679c\u662f\u5185\u90e8\u7c7b\u5219\u9700\u8981\u7528<code>$</code>\u4e0d\u80fd\u7528<code>.</code>\u4ee3\u66ff</p> </li> </ul> <p>Note</p> <p>AOP \u4ee3\u7801\u751f\u6210\u52a9\u624b\uff0c\u53ef\u8f85\u52a9\u4f60\u4e00\u952e\u751f\u6210\u4ee3\u7801</p> <p>\u4e0b\u8fb9\u7ed9\u51fa\u7c7b\u578b\u8868\u793a\u4e0d\u540c\u7684 Kotlin \u5bf9 Java \u5bf9\u7167\u8868\uff0c\u5982\u679c\u662f Kotlin \u4ee3\u7801\u8bf7\u5bf9\u53f7\u5165\u5ea7</p> <p>\uff08\u6709\u53d1\u73b0\u4e0d\u5168\u7684\u53ef\u4ee5\u8ddf\u6211\u53cd\u9988\uff09</p> Kotlin \u7c7b\u578b Java \u7c7b\u578b Int int Short short Byte byte Char char Long long Float float Double double Boolean boolean Int? java.lang.Integer Short? java.lang.Short Byte? java.lang.Byte Char? java.lang.Character Long? java.lang.Long Float? java.lang.Float Double? java.lang.Double Boolean? java.lang.Boolean String java.lang.String Unit\uff08\u6216\u4e0d\u5199\uff09 void Unit? kotlin.Unit Nothing java.lang.Void Any java.lang.Object <p>\u5176\u4ed6\u4e0d\u5728\u4e0a\u8868\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u90fd\u5c5e\u4e8e\u5f15\u7528\u7c7b\u578b\uff0c\u5199\u6cd5\u5c31\u662f \u5305\u540d.\u7c7b\u540d</p> <p>Note</p> <p>1\u3001Kotlin \u4e2d\u7684 <code>vararg str : String</code> \u76f8\u5f53\u4e8e Java \u4e2d\u7684 <code>String...</code>\uff0c\u8fd9\u79cd\u5339\u914d\u65f6\u65e0\u8bba\u54ea\u79cd\u4ee3\u7801\u90fd\u6309 <code>String[]</code> \u6765\u8868\u793a\uff08\u6b64\u5904\u4ee5 String \u4e3a\u4f8b\uff0c\u5176\u4ed6\u7c7b\u578b\u4e5f\u4e00\u6837\uff09 2\u3001\u5bf9\u4e8e\u6709\u6cdb\u578b\u7684\u7c7b\u578b\u4e0d\u8981\u5199\u6cdb\u578b\uff0c\u4f8b\u5982 <code>java.lang.List&lt;String&gt; methodName(java.lang.List&lt;String&gt;)</code> \u5e94\u8be5\u76f4\u63a5\u5199\u4e3a <code>java.lang.List methodName(java.lang.List)</code></p>"},{"location":"zh/AndroidAopReplaceClass/#_4","title":"\u4e09\u3001\u4f7f\u7528\u6848\u4f8b","text":""},{"location":"zh/AndroidAopReplaceClass/#1java","title":"1\u3001Java\u5199\u6cd5","text":"<pre><code>@AndroidAopReplaceClass(\n        \"android.widget.Toast\"\n)\npublic class ReplaceToast {\n    @AndroidAopReplaceMethod(\n            \"android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)\"\n    )\n    //  \u56e0\u4e3a\u88ab\u66ff\u6362\u65b9\u6cd5\u662f\u9759\u6001\u7684\uff0c\u6240\u4ee5\u53c2\u6570\u7c7b\u578b\u53ca\u987a\u5e8f\u548c\u88ab\u66ff\u6362\u65b9\u6cd5\u4e00\u4e00\u5bf9\u5e94\n    public static Toast makeText(Context context, CharSequence text, int duration) {\n        return Toast.makeText(context, \"ReplaceToast-\"+text, duration);\n    }\n    @AndroidAopReplaceMethod(\n            \"void setGravity(int , int , int )\"\n    )\n    //  \u56e0\u4e3a\u88ab\u66ff\u6362\u65b9\u6cd5\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u6240\u4ee5\u53c2\u6570\u7b2c\u4e00\u4e2a\u662f\u88ab\u66ff\u6362\u7c7b\uff0c\u4e4b\u540e\u7684\u53c2\u6570\u548c\u88ab\u66ff\u6362\u65b9\u6cd5\u4e00\u4e00\u5bf9\u5e94\n    public static void setGravity(Toast toast,int gravity, int xOffset, int yOffset) {\n        toast.setGravity(Gravity.CENTER, xOffset, yOffset);\n    }\n    @AndroidAopReplaceMethod(\n            \"void show()\"\n    )\n    //  \u867d\u7136\u88ab\u66ff\u6362\u65b9\u6cd5\u6ca1\u6709\u53c2\u6570\uff0c\u4f46\u56e0\u4e3a\u5b83\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ecd\u7136\u662f\u88ab\u66ff\u6362\u7c7b\n    public static void show(Toast toast) {\n        toast.show();\n    }\n}\n</code></pre> <p>\u8be5\u4f8b\u610f\u601d\u5c31\u662f\u51e1\u662f\u4ee3\u7801\u4e2d\u5199<code>Toast.makeText</code>\u548c<code>Toast.show</code>\u7684\u5730\u65b9\u90fd\u88ab\u66ff\u6362\u6210<code>ReplaceToast.makeText</code>\u548c<code>ReplaceToast.show</code></p>"},{"location":"zh/AndroidAopReplaceClass/#2kotlin","title":"2\u3001Kotlin\u5199\u6cd5","text":"<pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String,java.lang.String)\")\n    @JvmStatic\n    fun e( tag:String, msg:String) :Int{\n        return Log.e(tag, \"ReplaceLog-$msg\")\n    }\n}\n</code></pre> <p>\u8be5\u4f8b\u610f\u601d\u5c31\u662f\u51e1\u662f\u4ee3\u7801\u4e2d\u5199<code>Log.e</code>\u7684\u5730\u65b9\u90fd\u88ab\u66ff\u6362\u6210<code>ReplaceLog.e</code></p>"},{"location":"zh/AndroidAopReplaceClass/#suspend-kotlin-suspend","title":"\u5982\u679c\u88ab\u66ff\u6362\u51fd\u6570\u662f <code>suspend</code> \u4fee\u9970\u7684\uff0c\u90a3\u4e48\u4f60\u53ea\u80fd\u7528Kotlin\u4ee3\u7801\u6765\u5199\uff0c\u5e76\u4e14\u66ff\u6362\u51fd\u6570\u4e5f\u8981\u88ab <code>suspend</code> \u4fee\u9970","text":"<pre><code>@AndroidAopReplaceClass(\"com.flyjingfish.androidaop.MainActivity\")\nobject ReplaceGetData {\n    //\u6ce8\u89e3\u53c2\u6570\u552f\u4e00\u53d8\u5316\u7684\u8fd4\u56de\u7c7b\u578b \u6539\u4e3a suspend\uff0c \u5176\u4ed6\u4e0d\u53d8\n    @AndroidAopReplaceMethod(\"suspend getData(int)\")\n    @JvmStatic\n    //  \u8fd9\u91cc\u51fd\u6570\u5b9a\u4e49\u5199\u6cd5\u89c4\u5219\u4f9d\u65e7\u4e0d\u53d8\uff0c\u53ea\u662f\u591a\u52a0\u4e00\u4e2a suspend \u4fee\u9970\n    suspend fun getData(mainActivity: MainActivity, num: Int): Int {\n        Log.e(\"ReplaceGetData\",\"getData\")\n        return mainActivity.getData(num + 1)\n    }\n}\n</code></pre>"},{"location":"zh/AndroidAopReplaceClass/#3","title":"3\u3001\u6784\u9020\u65b9\u6cd5","text":"<pre><code>@AndroidAopReplaceClass(value = \"com.flyjingfish.test_lib.TestMatch\",type = MatchType.EXTENDS)\nobject ReplaceTestMatch {\n\n    @AndroidAopReplaceNew\n    @JvmStatic\n    fun newTestMatch1(testBean: TestMatch3){\n       //\u66ff\u6362 new \u540e\u8fb9\u7684\u7c7b\u540d\uff0c\u53c2\u6570\u7c7b\u578b\u5c31\u662f\u66ff\u6362\u540e\u7684\u7c7b\u578b\uff0c\u6b64\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u4e3a\u7a7a\uff0c\u4e0d\u4f1a\u56de\u8c03\u6b64\u65b9\u6cd5\n    }\n\n\n    @AndroidAopReplaceNew\n    @JvmStatic\n    fun newTestMatch2(testBean: TestMatch3):TestMatch{\n       //\u66ff\u6362 new \u540e\u8fb9\u7684\u7c7b\u540d\uff0c\u53c2\u6570\u7c7b\u578b\u5c31\u662f\u66ff\u6362\u540e\u7684\u7c7b\u578b\uff0c\u6b64\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u56de\u8c03\u6b64\u65b9\u6cd5\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u5bf9\u8c61\u5c06\u4f1a\u66ff\u6362 new \u51fa\u6765\u7684\u5bf9\u8c61\n       return new TestMatch()\n    }\n\n\n    @AndroidAopReplaceMethod(\"&lt;init&gt;(int)\")\n    @JvmStatic\n    fun getTestBean(testBean: TestMatch) : TestMatch{\n        //\u53c2\u6570\u53ea\u80fd\u6709\u4e00\u4e2a\u5c31\u662f\u88ab\u66ff\u6362\u7c7b\uff0c\u8fd4\u56de\u7c7b\u578b\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u5c06\u4f1a\u66ff\u6362 new \u51fa\u6765\u7684\u5bf9\u8c61\n        return TestMatch(2)\n    }\n\n    @AndroidAopReplaceMethod(\"&lt;init&gt;(int)\")\n    @JvmStatic\n    fun getTestBean(num: Int,clazz :Class&lt;*&gt;) : TestMatch{\n        //\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662fClass\u7c7b\u578b\u5176\u4f59\u53c2\u6570\u7c7b\u578b\u53ca\u987a\u5e8f\u548c\u539f\u6784\u9020\u65b9\u6cd5\u5b8c\u5168\u4e00\u81f4\uff0c\u5728\u8fd9\u4e2a\u65b9\u6cd5\u5185\u518d\u53bb\u521b\u5efa\u5bf9\u8c61\uff0c\u6b64\u524d\u5e76\u6ca1\u6709\u5bf9\u8c61\u88ab\u521b\u5efa\u51fa\u6765\n        return TestMatch(num)\n    }\n\n}\n</code></pre> <p>\u4e0a\u8fb9\u4e09\u79cd\u4f7f\u7528\u65b9\u5f0f\u90fd\u53ef\u4ee5\u66ff\u6362 new \u7684\u5bf9\u8c61\u4e0d\u540c\u7684\u662f</p> <ul> <li> <p>\u7b2c1\u79cd\u76f4\u63a5\u66ff\u6362 new \u7684\u7c7b\u540d\uff08\u76f4\u63a5\u6362\u6389\u4e86\u7c7b\u578b\uff09</p> </li> <li> <p>\u7b2c2\u79cd\u4e0d\u4f46\u66ff\u6362\u4e86 new \u7684\u7c7b\u540d\uff0c\u5e76\u4e14\u4f1a\u56de\u8c03\u5230\u65b9\u6cd5\u5185\uff0c\u5728\u6b64\u8fd4\u56de\u7684\u5bf9\u8c61\u4e5f\u5c06\u4f1a\u6362\u6389\u521a\u521a new \u51fa\u6765\u7684\u5bf9\u8c61\uff08\u4e24\u8005\u533a\u522b\u5c31\u662f\u8fd4\u56de\u7c7b\u578b\u662f\u5426\u4e3a\u7a7a\uff09</p> </li> <li> <p>\u7b2c3\u79cd\u4e0e\u524d\u4e24\u8005\u4e0d\u540c\u7684\u662f\u5b83 \u4e0d\u4f1a\u66ff\u6362 new \u7684\u7c7b\u540d\uff0c\u4f46\u662f\u4f1a\u56de\u8c03\u5230\u65b9\u6cd5\u5185\uff0c\u5728\u6b64\u8fd4\u56de\u7684\u5bf9\u8c61\u5c06\u4f1a\u6362\u6389\u521a\u521a new \u51fa\u6765\u7684\u5bf9\u8c61\u3002\u5e76\u4e14\u5b9a\u4e49\u7684\u53c2\u6570\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5fc5\u987b\u662f @AndroidAopReplaceClass \u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u8fd4\u56de\u7c7b\u578b\u4e0d\u53ef\u4e3a\u7a7a</p> </li> <li> <p>\u7b2c4\u79cd\u4e0e\u524d\u4e09\u8005\u4e0d\u540c\u7684\u662f\u5b83 \u65e2\u4e0d\u4f1a\u66ff\u6362 new\u7684\u7c7b\u540d\uff0c\u4e5f\u6ca1\u6709\u5bf9\u8c61\u56de\u8c03\u8fdb\u6765\uff0c\u9700\u8981\u4f60\u624b\u52a8\u521b\u5efa\u6b64\u5bf9\u8c61\uff0c\u5b83\u7684\u4f18\u70b9\u5728\u4e8e\u5728\u5c1a\u672a\u521b\u5efa\u5bf9\u8c61\u4e4b\u524d\u62ff\u5230\u521b\u5efa\u5bf9\u8c61\u7684\u6240\u6709\u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u524d\u53bb\u4fee\u6539\u53c2\u6570\u518d\u53bb\u521b\u5efa\u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u7684\u4f18\u70b9\u5c31\u662f\u6709\u4e00\u4e2a\u524d\u7f6e\u4f5c\u7528</p> </li> <li> <p>@AndroidAopReplaceNew \u5b9a\u4e49\u7684\u51fd\u6570\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u662f\u9664\u4e86\u57fa\u7840\u7c7b\u578b\u4ee5\u5916\u7684\u4efb\u4f55\u7c7b\u578b</p> </li> </ul>"},{"location":"zh/AndroidAopReplaceClass/#4androidaopmatchclassmethod","title":"4\u3001@AndroidAopMatchClassMethod \u7684\u4ee3\u7406\u7528\u6cd5","text":"<ul> <li>1\u3001\u9996\u5148\u4f60\u5fc5\u987b\u8fd8\u662f\u8981\u4f7f\u7528 <code>@AndroidAopReplaceClass</code> \u53bb\u66ff\u6362\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u5e76\u4f7f\u7528 <code>@ProxyMethod</code> \u53bb\u7ed9\u66ff\u6362\u65b9\u6cd5\u52a0\u5165\u6ce8\u89e3<ul> <li>\u65b9\u6cd5\u5b9e\u73b0\u5185\u9700\u8981\u8c03\u7528\u88ab\u66ff\u6362\u65b9\u6cd5</li> <li>\u65b9\u6cd5\u7684\u5b9a\u4e49\u9664\u4e86\u4e0a\u6587\u63d0\u5230\u7684\u8981\u6c42\u4e4b\u5916\uff0c\u5176\u4ed6\u8981\u548c\u539f\u65b9\u6cd5\u4fdd\u6301\u4e00\u81f4\uff0c\u4f8b\u5982\u539f\u65b9\u6cd5\u7684\u540d\u79f0\u3001\u6ce8\u89e3\u3001\u53c2\u6570\u7684\u540d\u79f0\u3001\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u7b49\u7b49\uff0c\u5982\u679c\u4f60\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\u5c31\u65e0\u5173\u7d27\u8981\u7684\uff0c\u5018\u82e5\u4f60\u8981\u4f7f\u7528\u5c31\u52a1\u5fc5\u8fd9\u6837\u505a</li> </ul> </li> </ul> <pre><code>package com.flyjingfish.test_lib.replace;\n@AndroidAopReplaceClass(\n        \"android.widget.Toast\"\n)\npublic class ReplaceToast {\n    @AndroidAopReplaceMethod(\n            \"android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)\"\n    )\n    @ProxyMethod(proxyClass = Toast.class,type = ProxyType.STATIC_METHOD)\n    public static Toast makeText(Context context, CharSequence text, int duration) {\n        return Toast.makeText(context, text, duration);\n    }\n    @AndroidAopReplaceMethod(\n            \"void setGravity(int , int , int )\"\n    )\n    @ProxyMethod(proxyClass = Toast.class,type = ProxyType.METHOD)\n    public static void setGravity(Toast toast,int gravity, int xOffset, int yOffset) {\n        toast.setGravity(gravity, xOffset, yOffset);\n    }\n    @AndroidAopReplaceMethod(\n            \"void show()\"\n    )\n    @ProxyMethod(proxyClass = Toast.class,type = ProxyType.METHOD)\n    public static void show(Toast toast) {\n        toast.show();\n    }\n}\n</code></pre> <ul> <li>2\u3001\u4f7f\u7528 <code>@AndroidAopMatchClassMethod</code> \u6765\u5b9a\u4e49 <code>ReplaceToast</code> \u4ee3\u7406\u7c7b<ul> <li>type \u9700\u8981\u662f MatchType.SELF</li> <li>\u4f7f\u7528 MatchClassMethodProxy \u6216 MatchClassMethodSuspendProxy \u7c7b\u4f5c\u4e3a\u5207\u9762\u5904\u7406\u7c7b</li> <li>\u5b9e\u73b0 invokeProxy \u6216 invokeSuspendProxy \u65b9\u6cd5\u6765\u5904\u7406\u903b\u8f91</li> </ul> </li> </ul> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test_lib.replace.ReplaceToast\",\n    type = MatchType.SELF,\n    methodName = [\"*\"]\n)\nclass ReplaceToastProxy : MatchClassMethodProxy() {\n    override fun invokeProxy(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"ReplaceToastProxy\",\"methodName=$methodName,\" +\n                \"parameterNames=${joinPoint.targetMethod.parameterNames.toList()},\" +\n                \"parameterTypes=${joinPoint.targetMethod.parameterTypes.toList()},\" +\n                \"returnType=${joinPoint.targetMethod.returnType},\" +\n                \"args=${joinPoint.args?.toList()},target=${joinPoint.target},targetClass=${joinPoint.targetClass},\"\n        )\n\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5bf9\u67d0\u4e9b\u7cfb\u7edf\u65b9\u6cd5\u4f7f\u7528 <code>ProceedJoinPoint</code> \u6765\u63a7\u5236\u65b9\u6cd5\u7684\u8c03\u7528\u4e86\uff0c\u5173\u952e\u5728\u4e8e\u8981\u4f7f\u7528 <code>@ProxyMethod</code> \u6765\u6807\u8bb0\u65b9\u6cd5\uff0c\u8fd9\u6837 <code>ProceedJoinPoint</code> \u8fd4\u56de\u7684\u4fe1\u606f\u5c31\u662f\u88ab\u66ff\u6362\u7c7b\u7684\u65b9\u6cd5\u4fe1\u606f\u4e86</p> <p>Note</p> <p>AOP \u4ee3\u7801\u751f\u6210\u52a9\u624b\uff0c\u53ef\u8f85\u52a9\u4f60\u4e00\u952e\u751f\u6210\u4ee3\u7406\u7528\u6cd5\u4ee3\u7801</p>"},{"location":"zh/AspectJ_Migration_Guide/","title":"AspectJ \u8fc1\u79fb\u6307\u5357","text":"<p>\u4ece AspectJ \u8fc1\u79fb\u8fc7\u6765\u4e5f\u662f\u5341\u5206\u7b80\u5355\u7684</p>"},{"location":"zh/AspectJ_Migration_Guide/#1","title":"1\u3001\u6ce8\u89e3\u5f62\u5f0f\u7684\u5207\u9762","text":""},{"location":"zh/AspectJ_Migration_Guide/#aspectj","title":"AspectJ \u4ee3\u7801","text":"<p>\u4ee5\u5355\u51fb\u6ce8\u89e3\u4e3a\u4f8b\u4ecb\u7ecd\u4e0b,\u4f60\u53ef\u80fd\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801</p> <p>\u5355\u51fb\u6ce8\u89e3</p> <pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SingleClick {\n\n    long DEFAULT_INTERVAL_MILLIS = 1000;\n\n    /**\n     * @return \u5feb\u901f\u70b9\u51fb\u7684\u95f4\u9694\uff08ms\uff09\uff0c\u9ed8\u8ba4\u662f1000ms\n     */\n    long value() default DEFAULT_INTERVAL_MILLIS;\n}\n</code></pre> <p>\u5355\u51fb\u6ce8\u89e3\u5207\u9762</p> <pre><code>@Aspect\npublic final class SingleClick$$AspectJ {\n  @Pointcut(\"within(@com.flyjingfish.light_aop_core.annotations.SingleClick *)\")\n  public final void withinAnnotatedClass() {\n  }\n\n  @Pointcut(\"execution(!synthetic * *(..)) &amp;&amp; withinAnnotatedClass()\")\n  public final void methodInsideAnnotatedType() {\n  }\n\n  @Pointcut(\"execution(@com.flyjingfish.light_aop_core.annotations.SingleClick * *(..)) || methodInsideAnnotatedType()\")\n  public final void method() {\n  }\n\n  @Around(\"method() &amp;&amp; @annotation(vSingleClick)\")\n  public final Object cutExecute(final ProceedingJoinPoint joinPoint,\n      final SingleClick vSingleClick) {\n    // \u5207\u9762\u5904\u7406\u903b\u8f91\n    return result;\n  }\n}\n</code></pre>"},{"location":"zh/AspectJ_Migration_Guide/#androidaop","title":"AndroidAOP \u4ee3\u7801","text":"<p>\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u5904\u7406\u5207\u9762\u7684\u7c7b</p> <pre><code>class SingleClickCut : BasePointCut&lt;SingleClick&gt;() {//\u8fd9\u5757\u8303\u578b\u586b\u5199\u4f60\u539f\u6709\u7684\u6ce8\u89e3\u5373\u53ef\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: SingleClick): Any? {\n        //\u5728\u6b64\u628a\u903b\u8f91\u4ee3\u7801\u590d\u5236\u8fc7\u6765\uff0c\u7a0d\u52a0\u6539\u52a8\u5373\u53ef\n        return null\n    }\n\n}\n</code></pre> <p>\u7136\u540e\u5728\u4f60\u539f\u6709\u6ce8\u89e3\u4e4b\u4e0a\u6dfb\u52a0 @AndroidAopPointCut(SingleClickCut.class) \u6ce8\u89e3\uff0c\u6ce8\u89e3 <code>@Retention</code> \u53ea\u80fd\u8bbe\u7f6e <code>RUNTIME</code>\uff0c<code>@Target</code> \u53ea\u80fd\u8bbe\u7f6e <code>METHOD</code></p> <pre><code>//\u53ea\u9700\u6dfb\u52a0\u8fd9\u6837\u4e00\u4e2a\u6ce8\u89e3\u5373\u53ef\uff0c\u53c2\u6570\u5c31\u662f\u4e0a\u8fb9\u521b\u5efa\u7684\u5207\u9762\u5904\u7406\u7c7b SingleClickCut.class\n@AndroidAopPointCut(SingleClickCut.class)\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SingleClick {\n\n    long DEFAULT_INTERVAL_MILLIS = 1000;\n\n    /**\n     * @return \u5feb\u901f\u70b9\u51fb\u7684\u95f4\u9694\uff08ms\uff09\uff0c\u9ed8\u8ba4\u662f1000ms\n     */\n    long value() default DEFAULT_INTERVAL_MILLIS;\n}\n</code></pre> Kotlin\u5199\u6cd5 <pre><code>@AndroidAopPointCut(SingleClickCut::class)\n@Retention(AnnotationRetention.RUNTIME)\n@Target(\n    AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER\n)\nannotation class SingleClick(\n    /**\n     * \u5feb\u901f\u70b9\u51fb\u7684\u95f4\u9694\uff08ms\uff09\uff0c\u9ed8\u8ba4\u662f1000ms\n     */\n    val value: Long = DEFAULT_INTERVAL_MILLIS\n) {\n    companion object {\n        const val DEFAULT_INTERVAL_MILLIS: Long = 1000\n    }\n}\n</code></pre>"},{"location":"zh/AspectJ_Migration_Guide/#2","title":"2\u3001\u5339\u914d\u67d0\u4e2a\u7c7b\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u7684\u5207\u9762","text":"<p>@AndroidAopMatchClassMethod \u9488\u5bf9\u7684\u5c31\u662f\u7c7b\u4f3c AspectJ \u4e2d\u7684 execution \u7684\u5339\u914d\u7c7b\u578b\uff0c\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u6267\u884c</p> <p>AndroidAOP\u76ee\u524d\u53ea\u505a\u9488\u5bf9\u67d0\u4e2a\u7c7b\u7684\u65b9\u6cd5\u505a\u5339\u914d\uff0c\u4e0d\u505a\u53ea\u5bf9\u67d0\u4e2a\u65b9\u6cd5\u800c\u4e0d\u7ba1\u662f\u54ea\u4e2a\u7c7b\u7684\u5339\u914d\u3002\u56e0\u4e3a\u4f5c\u8005\u89c9\u5f97\u8fd9\u6837\u505a\u51e0\u4e4e\u6ca1\u4ec0\u4e48\u610f\u4e49\uff0c\u8fd9\u4e48\u505a\u5f88\u591a\u65f6\u5019\u4f1a\u5bfc\u81f4\u5f88\u591a\u4e0d\u60f3\u52a0\u5165\u5207\u9762\u7684\u7c7b\u4e5f\u4f1a\u52a0\u8fdb\u6765\uff0c\u4e0d\u5229\u4e8e\u5927\u5bb6\u7ba1\u7406\u63a7\u5236\u81ea\u5df1\u4ee3\u7801\uff08\u6709\u70b9\u5931\u63a7\uff5e\uff09</p>"},{"location":"zh/AspectJ_Migration_Guide/#aspectj_1","title":"AspectJ \u4ee3\u7801","text":"<p>\u4f8b\u5982\u4f60\u539f\u6765\u9488\u5bf9 <code>MainActivity</code> \u7684 <code>threadTest</code> \u8bbe\u5b9a\u4e86\u5207\u9762\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>package com.flyjingfish.test\n\nclass MainActivity: BaseActivity() {\n    fun threadTest(){\n        Log.e(\"threadTest\",\"------\")\n    }\n}\n</code></pre> <p>AspectJ \u7684\u5339\u914d\u5207\u9762\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>@Aspect\npublic class CheckAspectJ {\n    private static final String TAG = \"CheckAspectJ\";\n\n    @Pointcut(\"execution(* com.flyjingfish.test.MainActivity.threadTest())\")\n    public void pointcutThreadTest() {\n    }\n\n    @Around(\"pointcutThreadTest()\")\n    public void calculateFunctionTime(ProceedingJoinPoint joinPoint) throws Throwable {\n        Log.i(TAG,\"pointcut1 ---------calculateFunctionTime---------@Around\");\n        long beginTime = System.currentTimeMillis();\n        joinPoint.proceed();\n        long endTime = System.currentTimeMillis();\n        Log.i(TAG,\"pointcut1 -----------calculateFunctionTime-------\u8fd0\u884c\u65f6\u95f4:\" + (endTime - beginTime));\n    }\n}\n</code></pre>"},{"location":"zh/AspectJ_Migration_Guide/#androidaop_1","title":"AndroidAOP \u4ee3\u7801","text":"<p>\u70b9\u6b64\u770b@AndroidAopMatchClassMethod\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.flyjingfish.test.MainActivity\",\n    methodName = [\"threadTest\"],\n    type = MatchType.SELF\n)\nclass MatchActivityMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchActivityMethod\", \"=====invoke=====$methodName\")\n        long beginTime = System.currentTimeMillis();\n        joinPoint.proceed();\n        long endTime = System.currentTimeMillis();\n        return null\n    }\n}\n</code></pre>"},{"location":"zh/AspectJ_Migration_Guide/#3","title":"3\u3001\u5339\u914d\u67d0\u4e2a\u7c7b\u65b9\u6cd5\u7684\u88ab\u8c03\u7528\u7684\u5207\u9762","text":"<p>@AndroidAopReplaceClass \u9488\u5bf9\u7684\u5c31\u662f\u7c7b\u4f3c AspectJ \u4e2d\u7684 call \u7684\u5339\u914d\u7c7b\u578b\uff0c\u5173\u6ce8\u7684\u662f\u65b9\u6cd5\u7684\u8c03\u7528</p>"},{"location":"zh/AspectJ_Migration_Guide/#aspectj_2","title":"AspectJ \u4ee3\u7801","text":"<p>\u7528\u8fc7 AspectJ \u7684\u5e94\u8be5\u77e5\u9053\u67d0\u4e9b\u7cfb\u7edf\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7 call \u6765\u5339\u914d\uff0c\u4f8b\u5982\u4f60\u539f\u6765\u9488\u5bf9 <code>android.util.Log</code> \u7684 <code>e</code> \u8bbe\u5b9a\u4e86\u5207\u9762\u4ee3\u7801\uff0cAspectJ \u7684\u5339\u914d\u5207\u9762\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>@Aspect\npublic final class TestAspectJ {\n  @Pointcut(\"call(* android.util.Log.e(..))\")\n  public void pointcutThreadTest() {\n  }\n\n  @Around(\"pointcutThreadTest()\")\n  public final Object cutExecute(final JoinPoint joinPoint) throws Throwable {\n    Log.e(\"TestAspectJ\",\"====cutExecute\");\n    return null;\n  }\n}\n</code></pre>"},{"location":"zh/AspectJ_Migration_Guide/#androidaop_2","title":"AndroidAOP \u4ee3\u7801","text":"<p>\u70b9\u6b64\u770b@AndroidAopReplaceClass\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5</p> <pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String tag, java.lang.String msg)\")\n    @JvmStatic\n    fun logE(String tag, String msg): Int{\n        return Log.e(tag,msg) \n    }\n}\n</code></pre> <p>Note</p> <p>\u4e0d\u540c\u4e8e AspectJ \u7684\u662f\uff0cAndroidAOP \u4e0d\u4f1a\u4fdd\u7559\u6267\u884c\u539f\u6765\u65b9\u6cd5\u7684\u65b9\u5f0f\uff0c\u4f46\u4f60\u53ef\u4ee5\u81ea\u5df1\u8c03\u539f\u6765\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e0d\u4f1a\u9020\u6210\u65e0\u9650\u9012\u5f52\u8c03\u7528\u7684\u60c5\u51b5\uff08\u95f4\u63a5\u8c03\u7528\u539f\u6765\u65b9\u6cd5\u4f1a\u9020\u6210\u65e0\u9650\u9012\u5f52\u8fd9\u91cc\u6709\u89e3\u51b3\u65b9\u6cd5\uff09\uff0c\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u70b9\u6b64\u524d\u5f80</p>"},{"location":"zh/AspectJ_Migration_Guide/#4","title":"4\u3001\u5176\u4ed6\u5207\u9762\u65b9\u5f0f","text":"<ul> <li>@Before\uff1a\u5728\u65b9\u6cd5\u6267\u884c\u524d\u6267\u884c\u4ee3\u7801\u3002</li> <li>@After\uff1a\u5728\u65b9\u6cd5\u6267\u884c\u540e\u6267\u884c\u4ee3\u7801\uff0c\u65e0\u8bba\u662f\u5426\u629b\u51fa\u5f02\u5e38\u3002</li> <li>@AfterReturning\uff1a\u5728\u65b9\u6cd5\u6267\u884c\u540e\u6267\u884c\u4ee3\u7801\uff0c\u4ec5\u5728\u65b9\u6cd5\u6210\u529f\u8fd4\u56de\u65f6\u6267\u884c\u3002</li> <li>@AfterThrowing\uff1a\u5728\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\u65f6\u6267\u884c\u4ee3\u7801\u3002</li> </ul> <p>\u4e0a\u8ff0\u51e0\u79cd\u5747\u53ef\u901a\u8fc7\u73b0\u6709\u7684\u51e0\u79cd\u6ce8\u89e3\u5207\u9762\u95f4\u63a5\u5b9e\u73b0\u70b9\u6b64\u53c2\u8003 \u5e38\u89c1\u95ee\u9898#5\u60f3\u8981\u5728\u65b9\u6cd5\u524d\u540e\u63d2\u5165\u4ee3\u7801</p>"},{"location":"zh/FAQ/","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"zh/FAQ/#1","title":"1\u3001 \u540c\u4e00\u4e2a\u65b9\u6cd5\u5b58\u5728\u591a\u4e2a\u6ce8\u89e3\u6216\u5339\u914d\u5207\u9762\u65f6\uff0c\u600e\u4e48\u5904\u7406\u7684","text":"<ul> <li>\u591a\u4e2a\u5207\u9762\u53e0\u52a0\u5230\u4e00\u4e2a\u65b9\u6cd5\u4e0a\u65f6\u6ce8\u89e3\u4f18\u5148\u4e8e\u5339\u914d\u5207\u9762\uff0c\u6ce8\u89e3\u5207\u9762\u4e4b\u95f4\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u6267\u884c</li> <li>\u8c03\u7528 proceed \u624d\u4f1a\u6267\u884c\u4e0b\u4e00\u4e2a\u5207\u9762\uff0c\u591a\u4e2a\u5207\u9762\u4e2d\u6700\u540e\u4e00\u4e2a\u5207\u9762\u6267\u884c proceed \u624d\u4f1a\u8c03\u7528\u5207\u9762\u65b9\u6cd5\u5185\u7684\u4ee3\u7801</li> <li>\u5728\u524d\u8fb9\u5207\u9762\u4e2d\u8c03\u7528 proceed(args) \u53ef\u66f4\u65b0\u65b9\u6cd5\u4f20\u5165\u53c2\u6570\uff0c\u5e76\u5728\u4e0b\u4e00\u4e2a\u5207\u9762\u4e2d\u4e5f\u4f1a\u62ff\u5230\u4e0a\u4e00\u5c42\u66f4\u65b0\u7684\u53c2\u6570</li> <li>\u5b58\u5728\u5f02\u6b65\u8c03\u7528proceed\u65f6\uff0c\u7b2c\u4e00\u4e2a\u5f02\u6b65\u8c03\u7528 proceed \u5207\u9762\u7684\u8fd4\u56de\u503c\uff08\u5c31\u662f invoke \u7684\u8fd4\u56de\u503c\uff09\u5c31\u662f\u5207\u5165\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff1b\u5426\u5219\u6ca1\u6709\u5f02\u6b65\u8c03\u7528proceed\uff0c\u5219\u8fd4\u56de\u503c\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5207\u9762\u7684\u8fd4\u56de\u503c</li> </ul>"},{"location":"zh/FAQ/#2build-zipfile-invalid-loc-header-bad-signature","title":"2\u3001Build\u65f6\u62a5\u9519 \"ZipFile invalid LOC header (bad signature)\"","text":"<ul> <li>\u8bf7\u91cd\u542fAndroid Studio\uff0c\u7136\u540e clean \u9879\u76ee</li> </ul>"},{"location":"zh/FAQ/#3","title":"3\u3001 \u5207\u9762\u5904\u7406\u7c7b\u53d1\u751f\u5185\u5b58\u6cc4\u6f0f\uff1f","text":"<ul> <li>\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u662f\u56e0\u4e3a\u4f60\u5728\u5207\u9762\u5904\u7406\u7c7b\u505a\u4e86\u5f3a\u5f15\u7528\uff08\u5904\u7406\u7c7b\u7684\u751f\u547d\u5468\u671f\uff09</li> </ul>"},{"location":"zh/FAQ/#4","title":"4\u3001 \u60f3\u8981\u770b\u5230\u6240\u6709\u7684\u52a0\u5165\u5207\u9762\u4ee3\u7801\u7684\u4f4d\u7f6e","text":"<ul> <li>\u5728 app \u7684build.gradle\u6dfb\u52a0 androidAopConfig \u914d\u7f6e\u9879\uff0ccutInfoJson \u8bbe\u7f6e\u4e3a true</li> </ul> <pre><code>plugins {\n    ...\n}\nandroidAopConfig {\n    //\u9ed8\u8ba4\u5173\u95ed\uff0c\u5f00\u542f\u5728 Build \u6216 \u6253\u5305\u540e \u5c06\u4f1a\u751f\u6210\u5207\u70b9\u4fe1\u606fjson\u6587\u4ef6\u5728 app/build/tmp/cutInfo.json\n    cutInfoJson true\n}\nandroid {\n    ...\n}\n</code></pre>"},{"location":"zh/FAQ/#5","title":"5\u3001\u60f3\u8981\u5728\u65b9\u6cd5\u524d\u540e\u63d2\u5165\u4ee3\u7801","text":"<ul> <li>\u5339\u914d\u5207\u9762 <pre><code>@AndroidAopMatchClassMethod(\n        targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n        methodName = [\"test2\"],\n        type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n  override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n    //\u5728\u65b9\u6cd5\u524d\u63d2\u5165\u4ee3\u7801\n    val value = joinPoint.proceed()\n    //\u5728\u65b9\u6cd5\u540e\u63d2\u5165\u4ee3\u7801\n    return value\n  }\n}\n</code></pre></li> </ul> \u70b9\u6b64\u770b\u66f4\u591a\u8be6\u60c5 <ul> <li>\u6ce8\u89e3\u5207\u9762</li> </ul> <pre><code>class CustomInterceptCut : BasePointCut&lt;CustomIntercept&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        annotation: CustomIntercept //annotation\u5c31\u662f\u4f60\u52a0\u5230\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\n    ): Any? {\n        //\u5728\u65b9\u6cd5\u524d\u63d2\u5165\u4ee3\u7801\n        val value = joinPoint.proceed()\n        //\u5728\u65b9\u6cd5\u540e\u63d2\u5165\u4ee3\u7801\n        return value\n    }\n}\n</code></pre> <ul> <li>\u66ff\u6362\u5207\u9762</li> </ul> <pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String,java.lang.String)\")\n    @JvmStatic\n    fun e( tag:String, msg:String) :Int{\n        //\u5728\u65b9\u6cd5\u524d\u63d2\u5165\u4ee3\u7801\n        val log = Log.e(tag, \"ReplaceLog-$msg\")\n        //\u5728\u65b9\u6cd5\u540e\u63d2\u5165\u4ee3\u7801\n        return log\n    }\n}\n</code></pre> <ul> <li><code>AspectJ</code> \u7684 <code>@AfterReturning</code>\u548c <code>@AfterThrowing</code></li> </ul> <p>\u6211\u4eec\u5c31\u4ee5 \u5339\u914d\u5207\u9762 \u4e3a\u4f8b\u4ecb\u7ecd\u4e0b\u5427</p> <pre><code>@AndroidAopMatchClassMethod(\n        targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n        methodName = [\"test2\"],\n        type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: TryCatch): Any? {\n        return try {\n            val value = joinPoint.proceed()\n            // \u8fd9\u91cc\u5c31\u662f @AfterReturning \n            value\n        } catch (e: Throwable) {\n            // \u8fd9\u91cc\u5c31\u662f @AfterThrowing\n            throw RuntimeException(e)\n        }\n    }\n}\n</code></pre>"},{"location":"zh/FAQ/#6","title":"6\u3001\u5339\u914d\u5207\u9762\u548c\u6ce8\u89e3\u5207\u9762\u7684\u5207\u9762\u5904\u7406\u7c7b\u7684\u751f\u547d\u5468\u671f\u662f\u600e\u6837\u7684\uff1f","text":"<p>\u5207\u9762\u5904\u7406\u7c7b\u4e0e\u7c7b\u7684\u5bf9\u5e94\u65b9\u6cd5\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5</p> <ul> <li>a\u3001\u5982\u679c\u5207\u70b9\u65b9\u6cd5 \u4e0d\u662f\u9759\u6001\u7684<ul> <li>\u5207\u9762\u5904\u7406\u7c7b\u4f1a\u968f\u7740\u65b9\u6cd5\u6240\u5728\u5bf9\u8c61\u7684\u56de\u6536\u800c\u56de\u6536\uff0c\u4e14\u662f\u53ca\u65f6\u7684(\u4ece 2.5.4\u5f00\u59cb\u4f18\u5316\u4e3a\u53ca\u65f6\u6027\u7684)\u3002</li> <li>\u5e76\u4e14\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u7684\u5207\u70b9\u65b9\u6cd5\u5404\u81ea\u5bf9\u5e94\u4e00\u4e2a\u5207\u9762\u5904\u7406\u7c7b\u7684\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u5207\u70b9\u65b9\u6cd5\u7684\u6240\u5728\u7c7b\u521b\u5efa\u4e86\u591a\u5c11\u4e2a\u5bf9\u8c61\uff0c\u5c31\u6709\u591a\u5c11\u4e2a\u5207\u9762\u5904\u7406\u7c7b\u5bf9\u8c61\u3002</li> </ul> </li> <li>b\u3001\u5982\u679c\u5207\u70b9\u65b9\u6cd5 \u662f\u9759\u6001\u7684<ul> <li>\u5207\u9762\u65b9\u6cd5\u56e0\u4e3a\u662f\u9759\u6001\u7684\uff0c\u6240\u4ee5\u5207\u9762\u5904\u7406\u7c7b\u4e00\u65e6\u88ab\u521b\u5efa\u4f1a\u4e00\u76f4\u5b58\u5728\u3002</li> <li>\u5e76\u4e14\u4e00\u4e2a\u7c7b\u65b9\u6cd5\u53ea\u5bf9\u5e94\u4e00\u4e2a\u5207\u9762\u5904\u7406\u7c7b</li> </ul> </li> </ul> <p>\u4e0d\u7ba1\u662fa\u3001b\u54ea\u79cd\u7c7b\u578b\uff0c\u5207\u9762\u5904\u7406\u7c7b\u5bf9\u8c61\u53ea\u6709\u5728\u65b9\u6cd5\u88ab\u6267\u884c\u65f6\u624d\u4f1a\u88ab\u521b\u5efa\u51fa\u6765\u3002</p> <p>\u8fd9\u4e0e Aspectj \u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5f80\u5f80\u60f3\u5728\u5207\u9762\u5904\u7406\u7c7b\u4e2d\u8bbe\u7f6e\u4e00\u4e9b\u6210\u5458\u53d8\u91cf\uff0c\u65b9\u4fbf\u5728\u4e0b\u6b21\u5207\u9762\u5904\u7406\u65f6\u7684\u4f7f\u7528\uff1b\u800c Aspectj \u4f60\u8981\u60f3\u8fd9\u4e48\u505a\u662f\u9700\u8981\u5c06\u201c\u6210\u5458\u53d8\u91cf\u201d\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u201c\u9759\u6001\u53d8\u91cf\u201d\uff0c\u800c\u4e14\u8fd8\u9700\u8981\u533a\u5206\u6267\u884c\u5207\u70b9\u65b9\u6cd5\u7684\u5bf9\u8c61\u662f\u4ec0\u4e48\uff0c\u9700\u8981\u5199\u5f88\u591a\u7684\u4ee3\u7801\uff0cAndroidAOP \u521a\u597d\u4f18\u5316\u89e3\u51b3\u4e86\u8fd9\u4e00\u95ee\u9898\u3002</p>"},{"location":"zh/FAQ/#7windows","title":"7\u3001Windows\u7535\u8111\u7f16\u8bd1\u62a5\u9519\u6216\u63d0\u793a\u6587\u4ef6\u5360\u7528","text":"<ul> <li>1\u3001\u4f60\u5148\u5c1d\u8bd5\u5347\u7ea7 <code>Gradle</code> \u5230 <code>8.7 \u4ee5\u4e0a</code> \u80fd\u5426\u89e3\u51b3</li> </ul> <ul> <li>2\u3001\u7136\u540e\u4fdd\u8bc1\u662f\u672c\u5e93\u662f\u6700\u65b0\u7248\uff0c\u7136\u540e\u4fdd\u8bc1 app \u6a21\u5757\u7684 <code>build.gradle</code> \u4e2d <code>id 'android.aop'</code> \u5728\u6700\u540e\u4e00\u884c</li> </ul> <ul> <li>3\u3001\u5426\u5219\u8bf7\u6309\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c\u5c1d\u8bd5(\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u53ea\u9488\u5bf9 Windows \u7535\u8111\uff0cmac\u7535\u8111\u4e0d\u5e94\u6709\u6b64\u95ee\u9898)</li> </ul> \u70b9\u6b64\u770b\u66f4\u591a\u8be6\u60c5 <ul> <li> <p>0\u3001\u9996\u5148\u786e\u4fdd\u76f4\u63a5\u8fd0\u884c <code>./gradlew --stop</code> \u80fd\u5426\u6210\u529f\uff0c\u5982\u679c\u5931\u8d25\u8bf7\u81ea\u884c\u4e0a\u7f51\u67e5\u8be2\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e0b\u8fb9\u7684\u6b65\u9aa4   </p> </li> <li> <p>1\u3001\u70b9\u5f00\u8fd0\u884c\u914d\u7f6e   </p> </li> <li> <p>2\u3001\u5728\u539f\u6765\u57fa\u7840\u4e0a\uff0c\u65b0\u589e <code>Run External tool</code> \u4efb\u52a1\u7c7b\u578b   </p> </li> <li> <p>3\u3001\u6309\u5982\u4e0b\u914d\u7f6e\u2014\u2014\u2014\u2014\u2014\u2014   </p> </li> </ul> <p>\u53c2\u6570: Program:           <code>\u9879\u76ee\u6240\u5728\u7684\u7edd\u5bf9\u8def\u5f84\\gradlew.bat</code> Arguments:         <code>./gradlew --stop</code> Working directory: <code>\u9879\u76ee\u6240\u5728\u7684\u7edd\u5bf9\u8def\u5f84\\</code></p> <ul> <li> <p>4\u3001\u628a\u987a\u5e8f\u8c03\u6574\u5230\u4e0a\u8fb9   </p> </li> <li> <p>5\u3001\u70b9\u51fbok\u5b8c\u6210   </p> </li> <li> <p>6\u3001\u76f4\u63a5\u8dd1\u9879\u76ee\uff0c\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\uff0c\u5373\u4ee3\u8868\u914d\u7f6e\u6210\u529f   </p> </li> <li> <p>7\u3001\u53e6\u5916\u6709\u4e9b\u7f51\u53cb\u63d0\u5230\u628a <code>ksp</code> \u6362\u6210 <code>kapt</code> \u4e5f\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898</p> </li> </ul>"},{"location":"zh/FAQ/#8caused-by-javalangsecurityexception-digest-error-155bug","title":"8\u3001\u201cCaused by: java.lang.SecurityException: digest error\u201d \u76f8\u5173\u62a5\u9519 \uff081.5.5\u7248\u672c\u5df2\u4fee\u590d\u8be5bug\uff0c\u5efa\u8bae\u4f18\u5148\u5347\u7ea7\u5904\u7406\uff09","text":"\u70b9\u6b64\u770b\u66f4\u591a\u8be6\u60c5 <p>\u4f60\u65b0\u589e\u7684 jar \u5305\u4e2d\u5305\u542b\u4ee5\u4e0b\u6587\u4ef6\uff0c\u8bf7\u5c06\u5176\u5220\u9664\uff0c\u6539\u4e3a\u672c\u5730\u5bfc\u5165 jar \u5305</p> <p></p> <p>\u64cd\u4f5c\u6b65\u9aa4</p> <ul> <li> <p>1\u3001\u6253\u5f00 jar \u5305\u6240\u5728\u76ee\u5f55<code>cd /Users/a111/Downloads/ida-android-new/app/libs</code></p> </li> <li> <p>2\u3001\u89e3\u538b jar \u5305 <code>jar -xvf bcprov-jdk15on-1.69.jar</code></p> </li> </ul> <p></p> <ul> <li>3\u3001\u89e3\u538b\u540e</li> </ul> <p></p> <ul> <li>4\u3001\u6253\u5f00 META-INF \u5220\u9664\u4ee5\u4e0b\u6587\u4ef6</li> </ul> <p></p> <ul> <li>5\u3001\u6253\u5305\uff0c\u4e4b\u540e\u53ef\u4ee5\u7528\u4e86<code>jar -cfm0 bcprov-jdk15on-1.69.jar META-INF/MANIFEST.MF org</code></li> </ul> <p></p>"},{"location":"zh/FAQ/#9-androidaopdebugmode-true","title":"9\u3001\u4e3a\u4ec0\u4e48\u6211\u5f00\u542f\u4e86 <code>androidAop.debugMode = true</code> \u4f9d\u7136\u611f\u89c9\u6253\u5305\u7f16\u8bd1\u6162\uff1f","text":"<p>\u9020\u6210\u8fd9\u79cd\u60c5\u51b5\u7684\u4e3b\u8981\u539f\u56e0\u5728\u4e8e\u4f60\u53ef\u80fd\u7528\u5230\u4e86\u4e00\u4e9b <code>Router</code> \u5e93\uff0c\u6216\u8005\u5176\u4ed6\u6539\u53d8\u6253\u5305\u65b9\u5f0f\u7684\u63d2\u4ef6\u3002\u60a8\u53ef\u53c2\u8003\u8fd9\u91cc\u53bb\u6539\u9020\u4f60\u7684\u9879\u76ee\u70b9\u6b64\u524d\u5f80\uff0c\u8fd9\u91cc\u6f14\u793a\u4e86\u5982\u4f55\u53bb\u9664\u8fd9\u4e9b\u5e93\u7684\u63d2\u4ef6\u90e8\u5206\uff0c\u7528 AndroidAOP \u53bb\u5b8c\u6210\u5b83\u7684\u63d2\u4ef6\u7684\u5de5\u4f5c\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5220\u6389\u8fd9\u4e9b\u63d2\u4ef6\u52a0\u5feb\u6253\u5305\u901f\u5ea6</p>"},{"location":"zh/FAQ/#10","title":"10\u3001\u53ef\u53d8\u53c2\u6570\u5982\u4f55\u8fdb\u884c\u5339\u914d\uff1f","text":"<p>Kotlin \u4e2d\u7684 <code>vararg str : String</code> \u76f8\u5f53\u4e8e Java \u4e2d\u7684 <code>String...</code>\uff0c\u8fd9\u79cd\u5339\u914d\u65f6\u65e0\u8bba\u54ea\u79cd\u4ee3\u7801\u90fd\u6309 <code>String[]</code> \u6765\u8868\u793a\uff08\u6b64\u5904\u4ee5 String \u4e3a\u4f8b\uff0c\u5176\u4ed6\u7c7b\u578b\u4e5f\u4e00\u6837\uff09</p>"},{"location":"zh/FAQ/#11app","title":"11\u3001\u52a0\u5165\u672c\u5e93\u4e4b\u540e\u5b89\u88c5app\u65f6\u63d0\u793a\u627e\u4e0d\u5230\u6587\u4ef6","text":"<p>\u68c0\u67e5\u4f60\u7684 build.gradle \u4e2d\u914d\u7f6e\u4e2d\u662f\u5426\u5305\u542b\u4e2d\u6587\uff0c\u5982\u5b58\u5728\u4e2d\u6587\u8bf7\u5c1d\u8bd5\u66f4\u6539\u4e3a\u82f1\u6587\u540e\u518d\u6b21\u5b89\u88c5</p>"},{"location":"zh/FAQ/#12-androidaopreplacemethod","title":"12\u3001\u5728 @AndroidAopReplaceMethod \u6ce8\u89e3\u7684\u65b9\u6cd5\u4e2d\u8c03\u7528\u539f\u65b9\u6cd5\u4f1a\u4e0d\u4f1a\u9020\u6210\u9012\u5f52\u7684\u60c5\u51b5\uff1f","text":"<ul> <li> <p>\u5982\u679c\u662f\u76f4\u63a5\u8c03\u7528\u5c31\u4e0d\u4f1a\u9020\u6210\u9012\u5f52\uff0c\u6846\u67b6\u5df2\u4f5c\u5904\u7406</p> </li> <li> <p>\u5982\u679c\u5c5e\u4e8e\u95f4\u63a5\u8c03\u7528\u5c31\u4f1a\u9020\u6210\u9012\u5f52\uff0c\u4f8b\u5982\u8c03\u7528\u5305\u542b\u7684\u539f\u65b9\u6cd5\u7684\u5176\u4ed6\u7c7b\u7684\u65b9\u6cd5\uff0c\u6846\u67b6\u5bf9\u6b64\u4e0d\u505a\u5904\u7406\uff0c\u5982\u9700\u8fd9\u4e48\u505a\u53ef\u4ee5\u7ed3\u5408 @AndroidAopReplaceClass \u7684 excludeWeaving \u6216\u8005 \u4f7f\u7528\u9996\u9875\u63a5\u5165\u7b2c\u56db\u6b65\u6709\u4ecb\u7ecd\u7684 exclude\u6392\u9664\u6389\u95f4\u63a5\u8c03\u7528\u7c7b\u5373\u53ef</p> </li> </ul>"},{"location":"zh/FAQ/#13","title":"13\u3001\u4e0d\u60f3\u5f15\u5165\u5185\u7f6e\u7684\u6ce8\u89e3\u5207\u9762\uff0c\u600e\u4e48\u529e\uff1f","text":"<p>\u8bf7\u5347\u7ea7\u81f3 2.1.5\u53ca\u4e4b\u540e\u7684\u7248\u672c\uff0c\u5e76\u67e5\u770b\u63a5\u5165\u6b65\u9aa4\u4e09</p>"},{"location":"zh/FAQ/#14-module-aar","title":"14\u3001\u7ec4\u4ef6\u5316\u7684\u9879\u76ee\u4e0d\u540c module \u91c7\u7528\u7684\u65b9\u6848\u662f aar \u8fd9\u6837\u7684\u4ea7\u7269\u8fdb\u884c\u7f16\u8bd1\uff0c\u5982\u4f55\u52a0\u5feb\u6253\u5305\u901f\u5ea6\u5462\uff1f","text":"<ul> <li>\u7b54\u6848\u4f9d\u65e7\u8fd8\u662f\u4f7f\u7528 debugMode \uff0c\u8fd9\u4e2a\u5728 \u300c\u5165\u95e8\u300d \u63a5\u5165\u6b65\u9aa4\u4e94-debugMode\u6a21\u5f0f\u5df2\u7ecf\u8fdb\u884c\u4e86\u8bf4\u660e\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\u4f60\u5e94\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c\u914d\u7f6e</li> </ul> <pre><code>//\ud83d\udc47\u8fd9\u4e00\u9879\u65e0\u53ef\u7f6e\u7591\uff0c\u5fc5\u987b\u6253\u5f00\uff01\uff01\nandroidAop.debugMode = true\n//\ud83d\udc47\u8fd9\u4e00\u9879\u5728\u4f60\u53d1\u5e03 aar \u5305\u7684\u65f6\u5019\u9700\u8981\u5c06\u5176\u5173\u95ed\uff0c\u4e0d\u53ef\u4ee5\u518d\u5f00\u4e86\uff0c\u56e0\u4e3aaar\u7684\u53d1\u5e03\u5176\u5b9e\u4e5f\u662f\u53d1\u5e03 release \u5305\u4e86\uff0c\u4f60\u8bf4\u662f\u4e0d\u662f\uff1f\nandroidAop.debugMode.variantOnlyDebug = false\n</code></pre> <ul> <li>\u81f3\u4e8e\u8981\u4e0d\u8981\u4f7f\u7528\u53cd\u5c04\uff0c\u90a3\u5c31\u56e0\u4eba\u800c\u5b9a\u4e86\uff0c\u770b\u4f60\u600e\u4e48\u9009\u62e9\u4e86</li> </ul> <pre><code>//\ud83d\udc47\u6253\u5f00\u5c31\u662f\u4f7f\u7528\u53cd\u5c04\nandroidAop.reflectInvokeMethod = true\n//\ud83d\udc47\u8fd9\u9879\u7c7b\u4f3c\u4e8e androidAop.debugMode.variantOnlyDebug \u4f60\u6253 release \u5305\u4f7f\u7528\u53cd\u5c04\u5c31\u628a\u8fd9\u4e00\u9879\u5173\u4e86\uff01\uff01\nandroidAop.reflectInvokeMethod.variantOnlyDebug = false\n</code></pre> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u53d1\u5e03 aar \u5176\u5b9e\u548c\u53d1\u5e03 apk \u4e00\u6837\uff0c\u5bf9\u4e8e\u4e0a\u8ff0\u51e0\u9879\u914d\u7f6e\u7684\u7406\u89e3\u5176\u5b9e\u662f\u4e00\u6837\u7684</p> <p>\u53ef\u80fd\u6709\u4eba\u8fd8\u6709\u7591\u95ee\uff0c\u6700\u7ec8\u6253\u5305\u65f6\u5e94\u8be5\u5982\u4f55\u4f7f\u7528\u5462\uff1f</p> <ul> <li>\u5176\u5b9e\u60f3\u7ee7\u7eed\u4f7f\u7528 debugMode \u4e5f\u6ca1\u95ee\u9898\u7684\uff0c\u57fa\u672c\u8fd8\u662f\u548c\u4e0a\u8ff0\u4e00\u6837\u7684\u914d\u7f6e</li> <li>\u5982\u679c\u4e0d\u4f7f\u7528 debugMode\uff0c\u4f60\u7684\u4e0d\u540c module \u7684 aar\u5305 \u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u5176\u5b9e\u5df2\u7ecf\u8fdb\u884c\u8fc7 AOP \u7684\u5904\u7406\u4e86\uff0c\u4f60\u5b8c\u5168\u4e0d\u7528\u5728\u6253\u5305\u65f6\u518d\u641e\u4e00\u6b21\u4e86\uff0c\u53ef\u4ee5\u5728app module\u4e0b\u5c06\u5176\u5254\u9664\u6389\uff0c\u4f8b\u5982\uff1a</li> </ul> <pre><code>androidAopConfig {\n    //\ud83d\udc47 \u6392\u9664\u6389\u5df2\u7ecf\u8fdb\u884c\u8fc7 AOP \u5904\u7406\u7684 aar \u5305\uff0c\u4f9d\u65e7\u53ef\u4ee5\u8bfb\u53d6\u8fd9\u4e9b\u5305\u7684\u5207\u9762\u914d\u7f6e\n    exclude 'aar\u5305\u540d1', 'aar\u5305\u540d2'\n    //\u2757\ufe0f\u2757\ufe0f\u2757\ufe0f\u503c\u5f97\u4e00\u63d0\u7684\u662f\u5728\u4f60\u53d1\u5e03 aar \u7684\u65f6\u5019\uff0c\u4e0d\u8981\u628a\u4f60\u8981\u53d1\u5e03\u7684 aar \u7684\u5305\u540d\u914d\u7f6e\u5230\u8fd9\uff0c\u5426\u5219 aar \u662f\u4e0d\u4f1a\u7ecf\u8fc7 AOP \u5904\u7406\u7684\n}\n</code></pre>"},{"location":"zh/FAQ/#15-caused-by-javalangruntimeexception-cannot-find-comxxxyyytest-comxxxyyytest-found-in-comxxxyyytestclass","title":"15\u3001\u9047\u5230\u7f16\u8bd1\u65f6\u9519\u8bef <code>Caused by: java.lang.RuntimeException: cannot find com.xxx.yyy.test: com.xxx.yyy.Test found in com/xxx/yyy/test.class</code>","text":"<ul> <li>\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u662f\u56e0\u4e3a\u6709\u4e00\u4e2a \u540c\u540d\u7684\u5305\u548c\u7c7b \u5bfc\u81f4\u7684\uff0c\u4f60\u5e94\u8be5\u6539\u6389\u5176\u4e2d\u4e00\u4e2a\u540d\u5b57</li> </ul>"},{"location":"zh/Implications/","title":"\u5207\u9762\u542f\u793a","text":""},{"location":"zh/Implications/#1","title":"1\u3001\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u9700\u6c42\uff0c\u6709\u4e00\u4e2a\u63a5\u53e3\u5728\u591a\u5904\u4f7f\u7528\uff0c\u8fd9\u79cd\u60c5\u51b5\u5927\u5bb6\u53ef\u80fd\u5199\u4e00\u4e2a\u5de5\u5177\u7c7b\u5c01\u88c5\u4e00\u4e0b\u3002","text":"<p>\u5176\u5b9e\u5bf9\u4e8e\u8fd9\u79cd\u9700\u6c42\uff0c\u53ef\u4ee5\u505a\u4e00\u4e2a\u6ce8\u89e3\u5207\u9762\uff0c\u5728\u5207\u9762\u5904\u7406\u65f6\u53ef\u4ee5\u5728\u8bf7\u6c42\u5b8c\u6570\u636e\u540e\uff0c\u7ed9\u5207\u9762\u65b9\u6cd5\u4f20\u56de\u53bb\u5373\u53ef\uff0c\u4f8b\u5982\uff1a</p> <p><pre><code>@AndroidAopPointCut(CommonDataCut::class)\n@Target(\n    AnnotationTarget.FUNCTION\n)\n@Retention(AnnotationRetention.RUNTIME)\n@Keep\nannotation class CommonData\n</code></pre> <pre><code>class CommonDataCut : BasePointCut&lt;CommonData&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        anno: CommonData\n    ): Any? {\n        if(joinPoint.args[0] != null){\n            // \u6709\u6570\u636e\uff0c\u76f4\u63a5\u7ee7\u7eed\u6267\u884c\u65b9\u6cd5\n            joinPoint.proceed()\n        }else{\n            // \u6ca1\u6709\u6570\u636e\uff0c\u5728\u8fd9\u5199\u7f51\u7edc\u8bf7\u6c42\u6570\u636e,\u6570\u636e\u8fd4\u56de\u540e\u8c03\u7528 joinPoint.proceed(data) \u628a\u6570\u636e\u4f20\u56de\u65b9\u6cd5\n            HttpData.getInstance().getCountryList(req, new HttpResponeListener&lt;Data&gt;() {\n\n               @Override\n               public void onSuccess(String url, Data response) {\n                   joinPoint.proceed(response)\n               }\n\n            });\n        }\n\n        return null\n    }\n}\n</code></pre> <pre><code>@CommonData\nfun onTest(data:Data){\n    //\u56e0\u4e3a\u5207\u9762\u5df2\u7ecf\u628a\u6570\u636e\u4f20\u56de\u6765\u4e86\uff0c\u6240\u4ee5\u6570\u636e\u4e0d\u518d\u4e3anull\n}\n//\u5728\u8c03\u7528\u65b9\u6cd5\u65f6\u968f\u4fbf\u4f20\u4e2anull\uff0c\u5f53\u8fdb\u5165\u5230\u5207\u9762\u540e\u5f97\u5230\u6570\u636e\uff0c\u5728\u8fdb\u5165\u65b9\u6cd5\u540e\u6570\u636e\u5c31\u6709\u4e86\nbinding.btnSingleClick.setOnClickListener {\n    onTest(null)\n}\n</code></pre></p>"},{"location":"zh/Implications/#2","title":"2\u3001\u53e6\u5916\u5bf9\u4e8e\u5207\u9762\u6ce8\u89e3\u662f\u6ca1\u529e\u6cd5\u4f20\u5165\u5bf9\u8c61\u4ec0\u4e48\u7684\uff0c\u6216\u8005\u6570\u636e\u662f\u52a8\u6001\u7684\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f","text":"<p><pre><code>@AndroidAopPointCut(CommonDataCut::class)\n@Target(\n    AnnotationTarget.FUNCTION\n)\n@Retention(AnnotationRetention.RUNTIME)\n@Keep\nannotation class CommonData\n</code></pre> <pre><code>class CommonDataCut : BasePointCut&lt;CommonData&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        anno: CommonData\n    ): Any? {\n        if (!joinPoint.args.isNullOrEmpty()) {\n            val arg1 = joinPoint.args[0] // \u8fd9\u4e2a\u5c31\u662f\u4f20\u5165\u7684\u6570\u636e\uff0c\u8fd9\u6837\u53ef\u4ee5\u968f\u4fbf\u5f80\u5207\u9762\u5185\u4f20\u6570\u636e\u4e86\n\n\n        }\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <pre><code>@CommonData\nfun onTest(number:Int){//num\u662f\u4f20\u5165\u5207\u9762\u52a8\u6001\u6570\u636e\uff0c\u4e0d\u9650\u7c7b\u578b\n\n}\n\nbinding.btnSingleClick.setOnClickListener {\n   //\u5728\u8c03\u7528\u65b9\u6cd5\u65f6\u4f20\u5165\u52a8\u6001\u6570\u636e\n    onTest(1)\n}\n</code></pre></p>"},{"location":"zh/Implications/#3-hook-androidviewviewonclicklistener-onclick-onclicklistener","title":"3\u3001\u5047\u5982\u60f3 Hook \u6240\u6709\u7684 android.view.View.OnClickListener \u7684 onClick\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u60f3\u5168\u5c40\u76d1\u6d4b\u6240\u6709\u7684\u8bbe\u7f6e OnClickListener \u7684\u70b9\u51fb\u4e8b\u4ef6\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a","text":"<pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS //type \u4e00\u5b9a\u662f EXTENDS \u56e0\u4e3a\u4f60\u60f3 hook \u6240\u6709\u7ee7\u627f\u4e86 OnClickListener \u7684\u7c7b\n)\nclass MatchOnClick : MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u8fd9\u5757\u63d0\u793a\u4e0b\uff0c\u5bf9\u4e8e\u4f7f\u7528\u4e86 lambda \u70b9\u51fb\u76d1\u542c\u7684\uff1b</p> <p>ProceedJoinPoint \u7684 target \u4e0d\u662f android.view.View.OnClickListener</p> <ul> <li>\u5bf9\u4e8eJava target \u662f \u6240\u5728\u6587\u4ef6\u6700\u5916\u5c42\u7684\u90a3\u4e2a\u7c7b\u7684\u5bf9\u8c61</li> <li>\u5bf9\u4e8eKotlin target \u662f null</li> </ul> <p>invoke \u56de\u8c03\u7684 methodName \u4e5f\u4e0d\u662f onClick \u800c\u662f\u7f16\u8bd1\u65f6\u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u540d\uff0c\u7c7b\u4f3c\u4e8e\u8fd9\u6837 onCreate$lambda$14 \u91cc\u8fb9\u5305\u542b\u4e86 lambda \u5173\u952e\u5b57</p> <p>\u5bf9\u4e8e onClick(view:View) \u7684 view</p> <ul> <li>\u5982\u679c\u662f Kotlin \u7684\u4ee3\u7801 ProceedJoinPoint.args[1]</li> <li>\u5982\u679c\u662f Java \u7684\u4ee3\u7801 ProceedJoinPoint.args[0]</li> </ul> <p>\u8fd9\u5757\u4e0d\u5728\u7ee7\u7eed\u8d58\u8ff0\u4e86\uff0c\u81ea\u5df1\u7528\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86\uff1b</p> <p>\u603b\u7ed3\u4e0b\uff1a\u5176\u5b9e\u5bf9\u4e8e\u6240\u6709\u7684 lambda \u7684 ProceedJoinPoint.args</p> <ul> <li>\u5982\u679c\u662f Kotlin \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5207\u70b9\u6240\u5728\u6587\u4ef6\u6700\u5916\u5c42\u7684\u90a3\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u540e\u8fb9\u7684\u53c2\u6570\u5c31\u662f hook \u65b9\u6cd5\u7684\u6240\u6709\u53c2\u6570</li> <li>\u5982\u679c\u662f Java \u4ece\u7b2c\u4e00\u4e2a\u53c2\u6570\u5f00\u59cb\u5c31\u662f hook \u65b9\u6cd5\u7684\u6240\u6709\u53c2\u6570</li> </ul>"},{"location":"zh/Implications/#4-permission","title":"4\u3001\u76f8\u4fe1\u5927\u5bb6\u5728\u4f7f\u7528\u6743\u9650 <code>@Permission</code> \u65f6\uff0c\u53ef\u80fd\u4f1a\u60f3\u73b0\u5728\u53ea\u6709\u83b7\u5f97\u6743\u9650\u8fdb\u5165\u65b9\u6cd5\uff0c\u800c\u6ca1\u6709\u65e0\u6743\u9650\u7684\u56de\u8c03\uff0c\u4e0b\u8fb9\u4f8b\u5b50\u6559\u4f60\u600e\u4e48\u505a","text":"<ul> <li>\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6743\u9650\u62d2\u7edd\u7684\u63a5\u53e3\uff0c\u5728\u8fd9\u6211\u5b9a\u4e49\u7684\u56de\u8c03\u4e00\u4e2a\u662f <code>@Permission</code> \uff0c\u53e6\u4e00\u4e2a\u662f\u6743\u9650\u6846\u67b6\u8fd4\u56de\u7684\u7ed3\u679c\uff08\u5728\u8fd9\u6211\u7528\u7684\u662frxpermissions\uff0c\u4f60\u968f\u610f\uff09     <pre><code>interface PermissionRejectListener {\n    fun onReject(permission:com.flyjingfish.android_aop_core.annotations.Permission,permissionResult: Permission)\n}\n</code></pre></li> <li>\u4f7f\u7528 <code>@Permission</code> \u6743\u9650\u6ce8\u89e3\uff0c\u5e76\u7ed9\u5176\u65b9\u6cd5\u6240\u5728\u5bf9\u8c61\u5b9e\u73b0 <code>PermissionRejectListener</code> \u63a5\u53e3     <pre><code>// \u5728\u4f7f\u7528 @Permission \u7684\u5bf9\u8c61\u4e0a\u5b9e\u73b0 PermissionRejectListener \u63a5\u53e3\nclass MainActivity: BaseActivity2(), PermissionRejectListener{\n    lateinit var binding:ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        binding.btnPermission.setOnClickListener {\n            toGetPicture()\n        }\n        binding.btnPermission2.setOnClickListener {\n            toOpenCamera()\n        }\n    }\n\n    @Permission(tag = \"toGetPicture\",value = [Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE])\n    fun toGetPicture(){\n        //\u67e5\u627e\u56fe\u7247\n    }\n\n    @Permission(tag = \"toOpenCamera\",value = [Manifest.permission.CAMERA])\n    fun toOpenCamera(){\n        //\u6253\u5f00\u76f8\u673a\n    }\n\n    override fun onReject(permission:Permission,permissionResult: com.tbruyelle.rxpermissions3.Permission) {\n        //\u6839\u636e tag \u6765\u533a\u5206\u662f\u54ea\u4e2a\u65b9\u6cd5\u7684\u6743\u9650\u88ab\u62d2\u7edd\u4e86\n        if (permission.tag == \"toGetPicture\"){\n\n        }else if (permission.tag == \"toOpenCamera\"){\n\n        }\n    }\n}\n</code></pre></li> <li>\u5728\u4f60\u7684 <code>Application</code> \u4e0a\u8bbe\u7f6e\u8bf7\u6c42\u6743\u9650\u7684\u4ee3\u7801     <pre><code>class MyApp2 : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        AndroidAop.setOnPermissionsInterceptListener(object : OnPermissionsInterceptListener {\n            @SuppressLint(\"CheckResult\")\n            override fun requestPermission(\n                joinPoint: ProceedJoinPoint,\n                permission: Permission,\n                call: OnRequestPermissionListener\n            ) {\n                val target = joinPoint.getTarget()\n                val permissions: Array&lt;out String&gt; = permission.value\n                when (target) {\n                    is FragmentActivity -&gt; {\n                        val rxPermissions = RxPermissions((target as FragmentActivity?)!!)\n                        rxPermissions.requestEach(*permissions)\n                            .subscribe { permissionResult: com.tbruyelle.rxpermissions3.Permission -&gt;\n                                call.onCall(permissionResult.granted)\n                                //\ud83d\udc47\u5173\u952e\u5728\u8fd9\ud83d\udc47\n                                if (!permissionResult.granted &amp;&amp; target is PermissionRejectListener) {\n                                    (target as PermissionRejectListener).onReject(\n                                        permission,\n                                        permissionResult\n                                    )\n                                }\n                            }\n                    }\n\n                    is Fragment -&gt; {\n                        val rxPermissions = RxPermissions((target as Fragment?)!!)\n                        rxPermissions.requestEach(*permissions)\n                            .subscribe { permissionResult: com.tbruyelle.rxpermissions3.Permission -&gt;\n                                call.onCall(permissionResult.granted)\n                                //\ud83d\udc47\u5173\u952e\u5728\u8fd9\ud83d\udc47\n                                if (!permissionResult.granted &amp;&amp; target is PermissionRejectListener) {\n                                    (target as PermissionRejectListener).onReject(\n                                        permission,\n                                        permissionResult\n                                    )\n                                }\n                            }\n                    }\n\n                    else -&gt; {\n                        // TODO: target \u4e0d\u662f FragmentActivity \u6216 Fragment \uff0c\u8bf4\u660e\u6ce8\u89e3\u6240\u5728\u65b9\u6cd5\u4e0d\u5728\u5176\u4e2d\uff0c\u8bf7\u81ea\u884c\u5904\u7406\u8fd9\u79cd\u60c5\u51b5 \n                        // \u5efa\u8bae\uff1a\u5207\u70b9\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a FragmentActivity \u6216 Fragment \uff0c\u7136\u540e joinPoint.args[0] \u5c31\u53ef\u4ee5\u62ff\u5230\n                    }\n                }\n            }\n        })\n\n    }\n}\n</code></pre></li> </ul> <p>Note</p> <p>\u8fd9\u4e2a\u6280\u5de7\u7684\u6838\u5fc3\u70b9\u5728\u4e8e \u201c\u89e3\u51b3\u4e0d\u80fd\u8c03\u7528\u5207\u70b9\u65b9\u6cd5\u6240\u5728\u5bf9\u8c61\u7684\u65b9\u6cd5\u7684\u95ee\u9898\u201d \uff0c\u901a\u8fc7\u4e3a\u5207\u70b9\u65b9\u6cd5\u6240\u5728\u5bf9\u8c61\u589e\u52a0\u63a5\u53e3\u7684\u65b9\u5f0f\uff0c\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u5e76\u4e14\u6700\u91cd\u8981\u7684\u662f \u505a\u5230\u4e86\u901a\u7528</p>"},{"location":"zh/Implications/#5-agp8-arouter-androidaop","title":"5\u3001\u4e09\u65b9\u8def\u7531\u5e93\u6ca1\u6709\u9002\u914d AGP8 \uff1f\u4e0b\u9762\u4ee5 ARouter \u4e3a\u4f8b\u6559\u4f60\u5982\u4f55\u5229\u7528 AndroidAOP \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898","text":"<p>ARouter \u63d2\u4ef6\u5e93\u4e3b\u8981\u5e72\u4e86\u70b9\u4ec0\u4e48\u5462\uff1f\u4e3a\u4ec0\u4e48 AndroidAOP \u80fd\u89e3\u51b3\uff1f\u5176\u5b9e\u5b83\u7684\u63d2\u4ef6\u5e93\u5c31\u662f\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a</p> <ul> <li>1\u3001\u627e\u4e09\u79cd\u7c7b\u3002</li> <li>2\u3001\u81ea\u52a8\u6ce8\u518c\u8fd9\u4e09\u79cd\u7c7b\u3002</li> </ul> <p>\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801</p> <pre><code>object AlibabaCollect {\n    private val classNameSet = mutableSetOf&lt;String&gt;()\n\n    @AndroidAopCollectMethod(\n        regex = \"com.alibaba.android.arouter.routes.*?\",\n        collectType = CollectType.DIRECT_EXTENDS\n    )\n    @JvmStatic\n    fun collectIRouteRoot(sub: Class&lt;out IRouteRoot&gt;){\n        Log.e(\"AlibabaCollect\",\"collectIRouteRoot=$sub\")\n        classNameSet.add(sub.name)\n    }\n\n    @AndroidAopCollectMethod(\n        regex = \"com.alibaba.android.arouter.routes.*?\",\n        collectType = CollectType.DIRECT_EXTENDS\n    )\n    @JvmStatic\n    fun collectIProviderGroup(sub: Class&lt;out IProviderGroup&gt;){\n        Log.e(\"AlibabaCollect\",\"collectIProviderGroup=$sub\")\n        classNameSet.add(sub.name)\n    }\n\n    @AndroidAopCollectMethod(\n        regex = \"com.alibaba.android.arouter.routes.*?\",\n        collectType = CollectType.DIRECT_EXTENDS\n    )\n    @JvmStatic\n    fun collectIInterceptorGroup(sub: Class&lt;out IInterceptorGroup&gt;){\n        Log.e(\"AlibabaCollect\",\"collectIInterceptorGroup=$sub\")\n        classNameSet.add(sub.name)\n    }\n\n    fun getClassNameSet() :MutableSet&lt;String&gt;{\n        return classNameSet\n    }\n}\n</code></pre> <p>\u4e0a\u8fb9\u7684\u4ee3\u7801\u5c31\u662f ARouter \u7684\u63d2\u4ef6\u5e72\u7684\u7b2c1\u4e2a\u4e8b\uff0c\u5373\u641c\u7d22\u8fd9\u4e09\u79cd\u7c7b</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"com.alibaba.android.arouter.core.LogisticsCenter\",\n    methodName = [\"loadRouterMap\"],\n    type = MatchType.SELF\n)\nclass ARouterMatch :MatchClassMethod {\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        val any = joinPoint.proceed()\n        val registerMethod = LogisticsCenter::class.java.getDeclaredMethod(\"register\",java.lang.String::class.java)\n        registerMethod.isAccessible = true\n        val classNameSet = AlibabaCollect.getClassNameSet()\n        classNameSet.forEach {\n            registerMethod.invoke(null,it)\n            Log.e(\"ARouterMatch\",\"registerMethod=$it\")\n        }\n        return any\n    }\n}\n</code></pre> <p>\u4e0a\u8fb9\u5c31\u662f ARouter \u7684\u63d2\u4ef6\u5e72\u7684\u7b2c2\u4e2a\u4e8b\uff0c\u5c31\u662f\u4ed6\u5728 <code>ARouter.init(this)</code> \u4ee3\u7801\u5185\u8c03\u7528\u4e86 <code>LogisticsCenter.loadRouterMap()</code> ,\u628a\u8fd9\u4e09\u79cd\u7c7b\u5168\u90e8\u6ce8\u518c\u8fdb\u53bb\u3002\u4ec5\u6b64\u800c\u5df2</p> <p>\u7ecf\u8fc7\u8fd9\u8fb9\u8fd9\u4e24\u6b65\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u5220\u6389 <code>classpath \"com.alibaba:arouter-register:?\"</code> \u4e86,\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8fb9\u7684\u914d\u7f6e\u53ea\u6709\u60a8\u5173\u95ed\u4e86 <code>androidAop.debugMode = false</code> \u624d\u6709\u6548\u54e6\uff5e\u53e6\u5916\u56e0\u4e3aARouter\u4e0d\u52a0\u63d2\u4ef6\u4e5f\u53ef\u4ee5\uff0c\u56e0\u6b64\u5f53\u4f60\u6d4b\u8bd5\u6ca1\u95ee\u9898\u540e\u4f9d\u7136\u53ef\u4ee5\u5f00\u542fdebugMode\u7b49\u5230\u6253release\u5305\u65f6\u518d\u5173\u95eddebugMode\u5373\u53ef\uff08\u6700\u65b0\u7248\u672c\u52a0\u4e0a\u8fd9\u53e5<code>androidAop.debugMode.variantOnlyDebug = true</code>\u65e0\u9700\u624b\u52a8\u5173\u95ed\uff09</p> <p>Note</p> <p>\u6700\u540e\u5f53\u4f60\u8c03\u7528 <code>ARouter.init(this)</code> \u540e\uff0c\u770b\u5230\u4e0b\u8fb9\u7684\u65e5\u5fd7\u4e4b\u540e\u4ee3\u8868\u4ee3\u7801\u5df2\u751f\u6548\uff01\u6700\u540e\u7684\u6700\u540e\u60a8\u522b\u5fd8\u4e86\u5bf9 <code>com.alibaba.android.arouter.core.LogisticsCenter</code> \u505a\u9632\u6df7\u6dc6\u5904\u7406\uff0c\u56e0\u4e3a\u4e0a\u8fb9\u7528\u5230\u4e86\u53cd\u5c04</p> <pre><code>Load router map by arouter-auto-register plugin.\n</code></pre>"},{"location":"zh/Implications/#_1","title":"\u7efc\u4e0a\u6240\u8ff0\uff0c\u5176\u5b9e\u5207\u9762\u80fd\u7ed9\u6211\u4eec\u5f00\u53d1\u5e26\u6765\u5f88\u591a\u4fbf\u643a\u4e4b\u5904\uff0c\u5173\u952e\u770b\u5927\u5bb6\u600e\u4e48\u7528\u4e86","text":""},{"location":"zh/Pointcut_return/","title":"\u5207\u70b9\u65b9\u6cd5\u8fd4\u56de\u503c","text":""},{"location":"zh/Pointcut_return/#_1","title":"\u666e\u901a\u51fd\u6570","text":"<p>\u5bf9\u4e8e @AndroidAopPointCut \u548c @AndroidAopMatchClassMethod \u8fd9\u4e24\u79cd\u5207\u9762\u90fd\u6709\u5176\u5207\u9762\u56de\u8c03\u5904\u7406\u7c7b\u5206\u522b\u662f</p> <ul> <li>@AndroidAopPointCut \u5bf9\u5e94 BasePointCut <pre><code>interface BasePointCut&lt;T : Annotation&gt; {\n    fun invoke(joinPoint: ProceedJoinPoint, anno: T): Any?\n}\n</code></pre></li> <li>@AndroidAopMatchClassMethod \u5bf9\u5e94 MatchClassMethod <pre><code>interface MatchClassMethod {\n    fun invoke(joinPoint: ProceedJoinPoint, methodName:String): Any?\n}\n</code></pre></li> </ul> <p>Note</p> <p>\u53ef\u4ee5\u770b\u5230 \u4e24\u4e2a invoke \u65b9\u6cd5\u90fd\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u8fd9\u4e2a\u8fd4\u56de\u503c\u5c06\u4f1a\u66ff\u6362\u6389\u5207\u5165\u70b9\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u8f6c\u5316\u4e3a\u539f\u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u4f46\u662f\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff0c\u5219\u6ca1\u6709\u8fd4\u56de\u503c</p>"},{"location":"zh/Pointcut_return/#_2","title":"\u8fd4\u56de\u503c\u662f\u4ec0\u4e48","text":"<ul> <li>\u5982\u679c\u5207\u9762\u65b9\u6cd5 \u6709\u8fd4\u56de\u503c \uff0cinvoke \u7684\u8fd4\u56de\u503c\u5c31\u662f\u5207\u9762\u65b9\u6cd5\u8fd4\u56de\u503c</li> <li>\u53e6\u5916\u5982\u679c\u5207\u9762\u65b9\u6cd5 \u6709\u8fd4\u56de\u503c \uff0cinvoke \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u8981\u548c\u5207\u9762\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u4fdd\u6301\u4e00\u81f4</li> <li>\u5982\u679c\u5207\u9762\u65b9\u6cd5 \u6ca1\u6709\u8fd4\u56de\u503c \uff0c\u8fd9\u5757\u8fd4\u56de\u4ec0\u4e48\u65e0\u6240\u8c13\u7684</li> </ul> <p><pre><code>@MyAnno\npublic int numberAdd(int value1,int value2){\n    int result = value1+value2;\n    return result;\n}\n</code></pre> <pre><code>public class MyAnnoCut implements BasePointCut&lt;MyAnno&gt; {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull MyAnno anno) {\n        int value1 = (int) joinPoint.args[0];\n        int value2 = (int) joinPoint.args[1];\n        int result = value1 * value2;\n        return result;\n    }\n}\n</code></pre> \u4f8b\u5982\u4e0a\u8fb9 numberAdd \u65b9\u6cd5 return \u662f\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0\uff0c\u8fdb\u5165\u5207\u9762\u540e\uff0c\u6211\u5c31\u60f3\u6539\u6210\u4e24\u4e2a\u6570\u76f8\u4e58\uff0c\u6240\u4ee5\u8fd4\u56de\u503c\u662f\u4ec0\u4e48\u5462\uff1f\u76f8\u4fe1\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86</p>"},{"location":"zh/Pointcut_return/#suspend","title":"suspend \u51fd\u6570","text":"<ul> <li>BasePointCutSuspend \u7ee7\u627f\u81ea BasePointCut <pre><code>interface BasePointCutSuspend&lt;T : Annotation&gt;:BasePointCut&lt;T&gt; {\n    suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: T)\n}\n</code></pre></li> <li>MatchClassMethodSuspend \u7ee7\u627f\u81ea MatchClassMethod <pre><code>interface MatchClassMethodSuspend : MatchClassMethod {\n    suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, methodName: String)\n    ...\n}\n</code></pre></li> </ul> <p>Note</p> <p>\u5bf9\u4e8e\u5207\u70b9\u51fd\u6570\u662f suspend \u51fd\u6570\u7684\uff0c\u91c7\u7528\u4e0a\u8ff0\u4e24\u79cd\u7c7b\u578b\u66f4\u597d\u4e00\u4e9b\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528 <code>BasePointCut</code>\u3001<code>MatchClassMethod</code> \u5176\u8fd4\u56de\u503c\u5fc5\u987b\u662f <code>joinPoint.proceed()</code> \u7684\u8fd4\u56de\u503c\uff0c\u5982\u9700\u4fee\u6539\u8fd4\u56de\u503c\u8bf7\u770b\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>class MyAnnoCut5 : BasePointCutSuspend&lt;MyAnno5&gt; {\n    override suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: MyAnno5){\n        withContext(Dispatchers.IO) {\n            //\u901a\u8fc7\u8bbe\u7f6e OnSuspendReturnListener \u6765\u4fee\u6539\u8fd4\u56de\u503c onReturn \u7684\u8fd4\u56de\u503c\u5c31\u662f suspend \u5207\u70b9\u51fd\u6570\u7684\u8fd4\u56de\u503c\n            joinPoint.proceed(object : OnSuspendReturnListener {\n                override fun onReturn(proceedReturn: ProceedReturn): Any? {\n                    return (proceedReturn.proceed() as Int)+100\n                }\n            })\n        }\n\n    }\n}\n</code></pre> <p>Note</p> <p>\u6b64\u5904 onReturn \u7684\u89e3\u91ca\u540c\u6b64\u5904\u7684\u8fd4\u56de\u503c\u662f\u4ec0\u4e48</p>"},{"location":"zh/ProceedJoinPoint/","title":"ProceedJoinPoint","text":""},{"location":"zh/ProceedJoinPoint/#_1","title":"\u7b80\u8ff0","text":"<p>\u5207\u5165\u70b9\u65b9\u6cd5\u76f8\u5173\u4fe1\u606f\uff0c\u5305\u62ec\u5207\u70b9\u65b9\u6cd5\u53c2\u6570\u3001\u5207\u70b9\u5bf9\u8c61\u3001\u7ee7\u7eed\u6267\u884c\u539f\u6709\u65b9\u6cd5\u903b\u8f91\u7b49</p>"},{"location":"zh/ProceedJoinPoint/#proceed","title":"proceed","text":""},{"location":"zh/ProceedJoinPoint/#1","title":"1\u3001\u6267\u884c\u539f\u6765\u65b9\u6cd5\u7684\u903b\u8f91","text":"<p>\u5728\u8fd9\u4ecb\u7ecd\u4e0b \u5728\u4f7f\u7528 <code>ProceedJoinPoint</code> \u8fd9\u4e2a\u5bf9\u8c61\u7684 <code>proceed()</code> \u6216 <code>proceed(args)</code> \u8868\u793a\u6267\u884c\u539f\u6765\u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u533a\u522b\u662f\uff1a</p> <ul> <li><code>proceed()</code> \u4e0d\u4f20\u53c2\uff0c\u8868\u793a\u4e0d\u6539\u53d8\u5f53\u521d\u7684\u4f20\u5165\u53c2\u6570</li> <li><code>proceed(args)</code> \u6709\u53c2\u6570\uff0c\u8868\u793a\u6539\u5199\u5f53\u65f6\u4f20\u5165\u7684\u53c2\u6570\uff0c\u6ce8\u610f\u4f20\u5165\u7684\u53c2\u6570\u4e2a\u6570\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u8981\u548c\u5207\u9762\u65b9\u6cd5\u4fdd\u6301\u4e00\u81f4</li> <li>\u4e0d\u8c03\u7528 <code>proceed</code> \u5c31\u4e0d\u4f1a\u6267\u884c\u62e6\u622a\u5207\u9762\u65b9\u6cd5\u5185\u7684\u4ee3\u7801</li> </ul>"},{"location":"zh/ProceedJoinPoint/#2","title":"2\u3001\u6267\u884c\u4e0b\u4e00\u4e2a\u5207\u9762","text":"<p>\u540c\u4e00\u4e2a\u65b9\u6cd5\u5b58\u5728\u591a\u4e2a\u6ce8\u89e3\u6216\u5339\u914d\u5207\u9762\u65f6\uff0c<code>proceed</code> \u8868\u793a\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5207\u9762\uff0c\u90a3\u5177\u4f53\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f</p> <ul> <li>\u591a\u4e2a\u5207\u9762\u53e0\u52a0\u5230\u4e00\u4e2a\u65b9\u6cd5\u4e0a\u65f6\u6ce8\u89e3\u4f18\u5148\u4e8e\u5339\u914d\u5207\u9762\uff0c\u6ce8\u89e3\u5207\u9762\u4e4b\u95f4\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u6267\u884c</li> <li>\u8c03\u7528 <code>proceed</code> \u624d\u4f1a\u6267\u884c\u4e0b\u4e00\u4e2a\u5207\u9762\uff0c\u591a\u4e2a\u5207\u9762\u4e2d\u6700\u540e\u4e00\u4e2a\u5207\u9762\u6267\u884c <code>proceed</code> \u624d\u4f1a\u8c03\u7528\u5207\u5165\u65b9\u6cd5\u5185\u7684\u4ee3\u7801</li> <li>\u5728\u524d\u8fb9\u5207\u9762\u4e2d\u8c03\u7528 <code>proceed(args)</code> \u53ef\u66f4\u65b0\u65b9\u6cd5\u4f20\u5165\u53c2\u6570\uff0c\u5e76\u5728\u4e0b\u4e00\u4e2a\u5207\u9762\u4e2d\u4e5f\u4f1a\u62ff\u5230\u4e0a\u4e00\u5c42\u66f4\u65b0\u7684\u53c2\u6570</li> <li>\u5b58\u5728\u5f02\u6b65\u8c03\u7528 <code>proceed</code> \u65f6\uff0c\u7b2c\u4e00\u4e2a\u5f02\u6b65\u8c03\u7528 <code>proceed</code> \u5207\u9762\u7684\u8fd4\u56de\u503c\uff08\u5c31\u662f invoke \u7684\u8fd4\u56de\u503c\uff09\u5c31\u662f\u5207\u5165\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff1b\u5426\u5219\u6ca1\u6709\u5f02\u6b65\u8c03\u7528 <code>proceed</code>\uff0c\u5219\u8fd4\u56de\u503c\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5207\u9762\u7684\u8fd4\u56de\u503c</li> </ul> <p> \ud83d\udc47\u6267\u884c\u987a\u5e8f\u53ca\u8fd4\u56de\u793a\u610f\u56fe\ud83d\udc47 </p> <pre><code>graph LR\nCall[\u8c03\u7528\u65b9\u6cd5] --&gt; |\u8fdb\u5165\u5207\u9762| A[\u6ce8\u89e3\u5207\u97621];\nA --&gt; |\u540c\u6b65proceed| B[\u6ce8\u89e3\u5207\u97622];\nB --&gt; |\u540c\u6b65proceed| C[\u5339\u914d\u5207\u9762];\nC --&gt; |\u540c\u6b65proceed| From[\u6267\u884c\u539f\u65b9\u6cd5];\nFrom --&gt; |return| C;\nC --&gt; |return| B;\nB --&gt; |return| A;\nA --&gt; |return| Call;</code></pre> <p> \ud83d\udc47\u5b58\u5728\u5f02\u6b65\u8c03\u7528\u7684\u793a\u610f\u56fe\ud83d\udc47 </p> <pre><code>graph LR\nCall[\u8c03\u7528\u65b9\u6cd5] --&gt; |\u8fdb\u5165\u5207\u9762| A[\u5207\u9762];\nA --&gt; |\u5f00\u542f\u5f02\u6b65\u7ebf\u7a0b| B[\u7ebf\u7a0b];\nB --&gt; |\u5f02\u6b65proceed| From[\u5176\u4f59\u5207\u9762];\nFrom --&gt; |return| B;\nA --&gt; |&lt;span style='color:red'&gt;\u56e0\u4e3a\u5f02\u6b65\u7ebf\u7a0b\u4f1a\u76f4\u63a5return&lt;/span&gt;| Call;</code></pre> <p> \ud83d\udc47\u4e0d\u8c03\u7528proceed\u793a\u610f\u56fe\ud83d\udc47 </p> <pre><code>graph LR\nCall[\u8c03\u7528\u65b9\u6cd5] --&gt; |\u8fdb\u5165\u5207\u9762| A[\u5207\u97621];\nA --&gt; |proceed| B[\u5207\u97622];\nB -..-&gt; |&lt;span style='color:red'&gt;X&lt;/span&gt;| C[\u5207\u97623];\nC -..-&gt; |&lt;span style='color:red'&gt;X&lt;/span&gt;| From[\u6267\u884c\u539f\u65b9\u6cd5];\nB --&gt; |&lt;span style='color:red'&gt;\u4e0d\u8c03\u7528proceed\u76f4\u63a5return&lt;/span&gt;| A;\nA --&gt; |return| Call;</code></pre>"},{"location":"zh/ProceedJoinPoint/#3proceedjoinpointsuspend-proceed","title":"3\u3001<code>ProceedJoinPointSuspend</code> \u7684 <code>proceed</code> \u65b9\u6cd5","text":"<p>ProceedJoinPointSuspend \u65b0\u589e\u4e24\u4e2a\u5305\u542b <code>OnSuspendReturnListener</code> \u7684 <code>proceed</code> \u65b9\u6cd5\uff0c\u65b0\u589e\u4e24\u4e2a\u5305\u542b <code>OnSuspendReturnListener2</code> \u7684 <code>proceedIgnoreOther</code> \u65b9\u6cd5</p> <ul> <li>\u65b0\u589e\u7684\u4e24\u4e2a <code>proceed</code> \u65b9\u6cd5 \u548c \u539f\u672c\u7684 <code>proceed</code> \u65b9\u6cd5\uff0c\u903b\u8f91\u548c\u666e\u901a\u51fd\u6570\u6709\u6240\u4e0d\u540c\uff0c\u8c03\u7528\u540e\u8fd4\u56de\u503c\u4e0d\u662f\u5207\u70b9\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u4f46\u5176\u4ed6\u903b\u8f91\u548c\u4e0a\u8fb9\u6240\u8ff0\u4e24\u70b9\u662f\u4e00\u6837\u7684</li> <li>\u65b0\u589e\u7684\u4e24\u4e2a <code>proceed</code> \u65b9\u6cd5\u4f20\u5165\u7684 <code>OnSuspendReturnListener</code> \u53ef\u4ee5\u901a\u8fc7\u56de\u8c03\u7684 <code>ProceedReturn</code> \u62ff\u5230\u5207\u70b9\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u901a\u8fc7 <code>onReturn</code> \u53ef\u4ee5\u4fee\u6539\u5207\u70b9\u51fd\u6570\u7684\u8fd4\u56de\u503c</li> <li>\u65b0\u589e\u7684\u4e24\u4e2a <code>proceedIgnoreOther</code> \u65b9\u6cd5\u662f\u4e0d\u518d\u6267\u884c\u5207\u70b9\u51fd\u6570\u5185\u4ee3\u7801\u5e76\u4fee\u6539\u5207\u70b9\u51fd\u6570\u7684\u8fd4\u56de\u503c \u8be6\u60c5\u70b9\u6b64\u67e5\u770b</li> </ul> <p>Note</p> <p><code>ProceedJoinPointSuspend</code> \u65b0\u589e\u7684\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u90fd\u662f\u7528\u6765\u4fee\u6539\u8c03\u7528\u5207\u70b9 suspend \u51fd\u6570\u5904\u7684\u8fd4\u56de\u503c\u7684\uff0csuspend \u7684\u51fd\u6570\u4e0d\u53ef\u4ee5\u518d\u901a\u8fc7\u4fee\u6539return\u503c\u4fee\u6539\u8c03\u7528\u5904\u7684\u8fd4\u56de\u503c   1\u3001\u8c03\u7528 \u65b0\u589e\u7684proceed\u51fd\u6570 \u5728\u56de\u8c03\u91cc\u4f7f\u7528 <code>ProceedReturn.proceed</code> \u624d\u76f8\u5f53\u4e8e\u4e0a\u56fe\u4e2d\u5404\u4e2a\u5207\u9762\u95f4\u8c03\u7528 <code>proceed</code> \u7684\u8fc7\u7a0b  2\u3001\u8c03\u7528 \u65b0\u589e\u7684proceedIgnoreOther\u51fd\u6570 \u5728\u56de\u8c03\u91cc\u76f8\u5f53\u4e8e\u4e0a\u56fe\u4e2d \u4e0d\u8c03\u7528proceed\u76f4\u63a5return  3\u3001\u5728 suspend \u7684\u5207\u9762\u4e2d\u5fc5\u987b\u8981\u8c03\u7528\u4e0a\u8ff0\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5426\u5219\u4f1a\u51fa\u95ee\u9898</p>"},{"location":"zh/ProceedJoinPoint/#getargs","title":"getArgs","text":"<p>\u5c31\u662f\u5207\u70b9\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u7684\u4f20\u5165\u7684\u6240\u6709\u53c2\u6570</p> <p>\u8fd9\u5757\u6709\u5173\u4e8e lambda \u8868\u8fbe\u5f0f\u7684 args \u662f\u548b\u56de\u4e8b\u4ecb\u7ecd</p>"},{"location":"zh/ProceedJoinPoint/#getoriginalargs","title":"getOriginalArgs()","text":"<p>\u548c args \u4e00\u6837\u7684\u4e1c\u897f\uff0c\u53ea\u662f\u5f15\u7528\u5730\u5740\u4e0d\u540c\uff0c\u6570\u7ec4\u91cc\u8fb9\u7684\u5bf9\u8c61\u5f15\u7528\u5730\u5740\u76f8\u540c\uff0c\u5728\u540c\u4e00\u4e2a\u65b9\u6cd5\u5b58\u5728\u591a\u4e2a\u6ce8\u89e3\u6216\u5339\u914d\u5207\u9762\u65f6\uff0c\u8c03\u7528 proceed(args) \u4f1a\u6539\u53d8 args \u5f15\u7528\u5730\u5740\uff0c\u6216\u8005\u6539\u53d8args\u91cc\u8fb9\u7684\u5f15\u7528\u5730\u5740\uff0c\u901a\u8fc7 getOriginalArgs() \u53ef\u4ee5\u62ff\u5230\u6700\u521d\u8fdb\u5207\u70b9\u65b9\u6cd5\u65f6\u53c2\u6570</p>"},{"location":"zh/ProceedJoinPoint/#gettarget","title":"getTarget","text":"<p>\u5982\u679c\u5207\u70b9\u65b9\u6cd5\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0ctarget \u5c31\u662f\u5207\u70b9\u65b9\u6cd5\u6240\u5728\u5bf9\u8c61\uff0c\u5982\u679c\u5207\u70b9\u65b9\u6cd5\u662f\u9759\u6001\u65b9\u6cd5\uff0ctarget \u5c31\u662f null</p> <p>PS\uff1aProceedJoinPoint.target \u5982\u679c\u4e3anull\u7684\u8bdd\u662f\u56e0\u4e3a\u6ce8\u5165\u7684\u65b9\u6cd5\u662f\u9759\u6001\u7684\uff0c\u4e00\u822c\u662f Java \u7684\u9759\u6001\u65b9\u6cd5\u548c Kotlin \u7684\u88ab@JvmStatic\u4fee\u9970\u7684\u51fd\u6570\u3001\u9876\u5c42\u51fd\u6570\u3001lamaba\u8868\u8fbe\u5f0f\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5</p> <p>\u8fd9\u5757\u6709\u5173\u4e8e lambda \u8868\u8fbe\u5f0f\u7684 target \u662f\u548b\u56de\u4e8b\u4ecb\u7ecd</p>"},{"location":"zh/ProceedJoinPoint/#gettargetmethod","title":"getTargetMethod()","text":"<p>\u8fd4\u56de\u5207\u70b9\u65b9\u6cd5\u76f8\u5173\u4fe1\u606f\uff0c\u4f8b\u5982\u65b9\u6cd5\u540d\uff0c\u53c2\u6570\u540d\uff0c\u53c2\u6570\u7c7b\u578b\uff0c\u8fd4\u56de\u7c7b\u578b\u7b49\u7b49\u2026\u2026\u5177\u4f53\u7684\u53ef\u4ee5\u5728\u65b9\u6cd5\u8fd4\u56de\u7684\u7c7b\u91cc(AopMethod)\u53bb\u67e5\u770b</p> <p>\u8fd9\u5757\u6709\u5173\u4e8e lambda \u8868\u8fbe\u5f0f\u7684 getTargetMethod \u662f\u548b\u56de\u4e8b\u4ecb\u7ecd</p>"},{"location":"zh/ProceedJoinPoint/#gettargetclass","title":"getTargetClass()","text":"<p>\u8fd4\u56de\u5207\u70b9\u65b9\u6cd5\u6240\u5728\u7c7b\u7684 Class&lt;?&gt; \u5bf9\u8c61</p>"},{"location":"zh/ProceedReturn/","title":"ProceedReturn","text":""},{"location":"zh/ProceedReturn/#proceed","title":"proceed()","text":"<p>\u7ee7\u7eed\u6267\u884c\u8fd4\u56de\u503c\u4ee3\u7801\u5757\u7684\u4ee3\u7801\uff0c\u5176\u8fd4\u56de\u503c\u5c31\u662f suspend \u51fd\u6570\u771f\u6b63\u7684\u8fd4\u56de\u503c\uff0c\u5982\u9700\u4fee\u6539\u4f20\u5165\u53c2\u6570\u8fd8\u662f\u4f7f\u7528 <code>ProceedJoinPoint</code> \u6765\u4fee\u6539</p>"},{"location":"zh/Suspend_cut/","title":"Suspend \u5207\u70b9\u51fd\u6570","text":"<p>\u5728\u4f60\u4f7f\u7528 <code>@AndroidAopPointCut</code> \u548c <code>@AndroidAopMatchClassMethod</code> \u4e24\u79cd\u5207\u9762\u65f6\uff0c\u5982\u679c\u5207\u5165\u51fd\u6570\u662f <code>suspend</code> \u4fee\u9970\u7684\uff0c\u4f60\u6709\u4e24\u79cd\u5207\u9762\u5904\u7406\u7c7b\u9009\u62e9</p>"},{"location":"zh/Suspend_cut/#1-suspend-basepointcut-matchclassmethod","title":"1\u3001\u4e0d\u5b8c\u5168\u652f\u6301 <code>suspend</code> \u7684 BasePointCut \u548c MatchClassMethod","text":"<p>\u5f53\u4f60\u9009\u62e9\u7b2c1\u79cd\u65f6\uff0cAndroidAOP\u5c31\u4f1a\u5f53\u666e\u901a\u51fd\u6570\u53bb\u5904\u7406\uff0c\u4f46\u8bb0\u4f4f\u8fd9\u662f\u4e0d\u53ef\u4ee5\u4fee\u6539\u8fd4\u56de\u503c\uff0c\u53ea\u80fd\u8fd4\u56de <code>joinPoint.proceed()</code> \u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u53ef\u4ee5\u4fee\u6539\u8fd4\u56de\u7ed3\u679c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>class MyAnnoCut3 : BasePointCut&lt;MyAnno3&gt; {\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: MyAnno3): Any? {\n        Log.e(\"MyAnnoCut3\", \"====invoke=====\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>Note</p> <p>\u867d\u7136\u4e0d\u53ef\u4ee5\u4fee\u6539\u8fd4\u56de\u7ed3\u679c\uff0c\u4f46\u53ef\u4ee5\u4e0d\u8c03\u7528 <code>joinPoint.proceed()</code> \uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u4f20\u5165\u53c2\u6570\u4f8b\u5982 <code>joinPoint.proceed(1,2)</code></p>"},{"location":"zh/Suspend_cut/#2-suspend-basepointcutsuspend-matchclassmethodsuspend","title":"2\u3001\u652f\u6301 <code>suspend</code> \u7684 BasePointCutSuspend \u548c MatchClassMethodSuspend","text":"<p>\u5f53\u4f60\u9009\u62e9\u7b2c2\u79cd\u65f6\uff0c\u4f60\u9700\u8981\u5728 invokeSuspend \u4e2d\u53bb\u6307\u660e\u7ebf\u7a0b \u4f8b\u5982\u4f7f\u7528 <code>withContext</code> \u51fd\u6570\uff0c\u4f8b\u5982</p> <pre><code>class MyAnnoCut3 : BasePointCutSuspend&lt;MyAnno3&gt; {\n    override suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: MyAnno3) {\n        withContext(Dispatchers.Main) {\n            ...\n            joinPoint.proceed(object :OnSuspendReturnListener{\n                override fun onReturn(proceedReturn: ProceedReturn): Any? {\n                    val result = proceedReturn.proceed()\n                    Log.e(\"MyAnnoCut3\", \"====onReturn=====${proceedReturn.returnType},result=$result\")\n                    return (result as Int)+100\n                }\n\n            })\n        }\n\n    }\n}\n</code></pre> <p>Note</p> <p>1\u3001\u5982\u679c\u4f60\u4e0d\u4f7f\u7528 <code>withContext</code> \u51fd\u6570\uff0c\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5207\u70b9\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u65f6\u7684 <code>ClassCastException</code> \u5f02\u5e38\u3002\u4f7f\u7528\u8fd9\u4e2a\u5207\u9762\u5904\u7406\u7c7b\u7684\u597d\u5904\u662f\u53ef\u4ee5\u4fee\u6539\u8fd4\u56de\u7ed3\u679c\uff08\u5177\u4f53\u4ecb\u7ecd\uff09\uff0c\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6 suspend \u51fd\u6570  2\u3001\u5728withContext\u51fd\u6570\u6700\u540e\u4e00\u884c\u5c3d\u91cf\u662f <code>joinPoint.proceed</code> \u6216 <code>joinPoint.proceedIgnoreOther</code></p> <p>Warning</p> <p>\u5982\u679c\u5207\u70b9\u51fd\u6570\u4e0d\u662f <code>suspend</code> \u51fd\u6570\uff0c\u5373\u4f7f\u4f7f\u7528 <code>BasePointCutSuspend</code> \u548c <code>MatchClassMethodSuspend</code> \u4e5f\u4f9d\u65e7\u4f1a\u56de\u8c03 <code>invoke</code> \u65b9\u6cd5\uff0c\u800c\u4e0d\u4f1a\u56de\u8c03 <code>invokeSuspend</code> \u65b9\u6cd5</p>"},{"location":"zh/Suspend_cut/#proceed","title":"\u53e6\u5916\u5bf9\u4e8e\u666e\u901a\u5207\u9762\u5904\u7406\u7c7b\u4e0d\u8c03\u7528 <code>proceed()</code> \u76f4\u63a5\u8fd4\u56de\u7684\uff0c\u4f8b\u5982\uff1a","text":"<p><pre><code>class MyAnnoCut3 : BasePointCut&lt;MyAnno3&gt; {\n    override fun invoke(joinPoint: ProceedJoinPoint, anno: MyAnno3): Any? {\n        Log.e(\"MyAnnoCut3\", \"====invoke=====\")\n        return null\n    }\n}\n</code></pre> suspend \u7684\u5904\u7406\u65b9\u5f0f\u662f</p> <pre><code>class MyAnnoCut3 : BasePointCutSuspend&lt;MyAnno3&gt; {\n    override suspend fun invokeSuspend(joinPoint: ProceedJoinPointSuspend, anno: MyAnno3) {\n        withContext(Dispatchers.Main) {\n            ...\n            joinPoint.proceedIgnoreOther(object :OnSuspendReturnListener2{\n                override fun onReturn(proceedReturn: ProceedReturn2): Any? {\n                    Log.e(\"MyAnnoCut3\", \"====invokeSuspend=====\")\n                    return null\n                }\n\n            })\n        }\n\n    }\n}\n</code></pre>"},{"location":"zh/android_aop_extra/","title":"\u6269\u5c55\u5e93","text":""},{"location":"zh/android_aop_extra/#_1","title":"\u5f15\u5165\u4f9d\u8d56\u5e93","text":"GroovyKotlin <pre><code>dependencies {\n    //\u975e\u5fc5\u987b\u9879 \ud83d\udc47\u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u6ce8\u89e3\u5207\u9762\n    implementation \"io.github.flyjingfish:androidaop-extra:2.7.1\"\n}\n</code></pre> <pre><code>dependencies {\n    //\u975e\u5fc5\u987b\u9879 \ud83d\udc47\u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u6ce8\u89e3\u5207\u9762\n    implementation(\"io.github.flyjingfish:androidaop-extra:2.7.1\")\n}\n</code></pre>"},{"location":"zh/android_aop_extra/#_2","title":"\u672c\u5e93\u5185\u7f6e\u4e86\u4e00\u4e9b\u529f\u80fd\u6ce8\u89e3\u53ef\u4f9b\u4f60\u76f4\u63a5\u4f7f\u7528","text":"\u6ce8\u89e3\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u529f\u80fd\u8bf4\u660e @SingleClick value = \u5feb\u901f\u70b9\u51fb\u7684\u95f4\u9694\uff0c\u9ed8\u8ba41000ms \u5355\u51fb\u6ce8\u89e3\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u53ea\u6709\u5355\u51fb\u65f6\u624d\u53ef\u8fdb\u5165 @DoubleClick value = \u4e24\u6b21\u70b9\u51fb\u7684\u6700\u5927\u7528\u65f6\uff0c\u9ed8\u8ba4300ms \u53cc\u51fb\u6ce8\u89e3\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u53cc\u51fb\u65f6\u624d\u53ef\u8fdb\u5165 @IOThread ThreadType = \u7ebf\u7a0b\u7c7b\u578b \u5207\u6362\u5230\u5b50\u7ebf\u7a0b\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5185\u7684\u4ee3\u7801\u5207\u6362\u5230\u5b50\u7ebf\u7a0b\u6267\u884c @MainThread \u65e0\u53c2\u6570 \u5207\u6362\u5230\u4e3b\u7ebf\u7a0b\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5185\u7684\u4ee3\u7801\u5207\u6362\u5230\u4e3b\u7ebf\u7a0b\u6267\u884c @OnLifecycle<sup>*</sup> value = Lifecycle.Event \u76d1\u542c\u751f\u547d\u5468\u671f\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5185\u7684\u4ee3\u7801\u5728\u5bf9\u5e94\u751f\u547d\u5468\u671f\u5185\u624d\u53bb\u6267\u884c @TryCatch value = \u4f60\u81ea\u5b9a\u4e49\u52a0\u7684\u4e00\u4e2aflag \u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4e3a\u60a8\u7684\u65b9\u6cd5\u5305\u88f9\u4e00\u5c42 try catch \u4ee3\u7801 @Permission<sup>*</sup> tag = \u81ea\u5b9a\u4e49\u6807\u8bb0value = \u6743\u9650\u7684\u5b57\u7b26\u4e32\u6570\u7ec4 \u7533\u8bf7\u6743\u9650\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u60a8\u7684\u4ee3\u7801\u5728\u83b7\u53d6\u6743\u9650\u540e\u624d\u6267\u884c @Scheduled initialDelay = \u5ef6\u8fdf\u5f00\u59cb\u65f6\u95f4interval = \u95f4\u9694repeatCount = \u91cd\u590d\u6b21\u6570isOnMainThread = \u662f\u5426\u4e3b\u7ebf\u7a0bid = \u552f\u4e00\u6807\u8bc6 \u5b9a\u65f6\u4efb\u52a1\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u6267\u884c\u4e00\u6b21\uff0c\u8c03\u7528AndroidAop.shutdownNow(id)\u6216AndroidAop.shutdown(id)\u53ef\u505c\u6b62 @Delay delay = \u5ef6\u8fdf\u65f6\u95f4isOnMainThread = \u662f\u5426\u4e3b\u7ebf\u7a0bid = \u552f\u4e00\u6807\u8bc6 \u5ef6\u8fdf\u4efb\u52a1\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u6267\u884c\uff0c\u8c03\u7528AndroidAop.shutdownNow(id)\u6216AndroidAop.shutdown(id)\u53ef\u53d6\u6d88 @CheckNetwork tag = \u81ea\u5b9a\u4e49\u6807\u8bb0toastText = \u65e0\u7f51\u7edc\u65f6toast\u63d0\u793ainvokeListener = \u662f\u5426\u63a5\u7ba1\u68c0\u67e5\u7f51\u7edc\u903b\u8f91 \u68c0\u67e5\u7f51\u7edc\u662f\u5426\u53ef\u7528\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5728\u6709\u7f51\u7edc\u624d\u53ef\u8fdb\u53bb @CustomIntercept value = \u4f60\u81ea\u5b9a\u4e49\u52a0\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u7684flag \u81ea\u5b9a\u4e49\u62e6\u622a\uff0c\u914d\u5408 AndroidAop.setOnCustomInterceptListener \u4f7f\u7528\uff0c\u5c5e\u4e8e\u4e07\u91d1\u6cb9 <p>( * \u652f\u6301 suspend \u51fd\u6570\uff0c\u8fbe\u5230\u6761\u4ef6\u65f6\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u652f\u6301\u8fd4\u56de\u7c7b\u578b\u4e0d\u662f Unit \u7c7b\u578b\u7684suspend\u51fd\u6570)</p> <p>\u4e0a\u8ff0\u6ce8\u89e3\u4f7f\u7528\u793a\u4f8b\u90fd\u5728\u8fd9,\u8fd8\u6709\u8fd9,\u8fd8\u6709\u8fd9</p> <ul> <li> <p>@OnLifecycle</p> <ul> <li>1\u3001@OnLifecycle \u52a0\u5230\u7684\u65b9\u6cd5\u6240\u5c5e\u5bf9\u8c61\u5fc5\u987b\u662f\u5c5e\u4e8e\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea FragmentActivity \u6216 Fragment\u7684\u65b9\u6cd5\u624d\u6709\u7528\uff0c\u6216\u8005\u6ce8\u89e3\u65b9\u6cd5\u7684\u5bf9\u8c61\u5b9e\u73b0 LifecycleOwner \u4e5f\u53ef\u4ee5</li> <li>2\u3001\u5982\u679c\u7b2c1\u70b9\u4e0d\u7b26\u5408\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u7ed9\u5207\u9762\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a\u7b2c1\u70b9\u7684\u7c7b\u578b\uff0c\u5728\u8c03\u7528\u5207\u9762\u65b9\u6cd5\u4f20\u5165\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f8b\u5982\uff1a   <pre><code>public class StaticClass {\n    @SingleClick(5000)\n    @OnLifecycle(Lifecycle.Event.ON_RESUME)\n    public static void onStaticPermission(MainActivity activity, int maxSelect , ThirdActivity.OnPhotoSelectListener back){\n        back.onBack();\n    }\n\n}\n</code></pre></li> </ul> </li> <li> <p>@TryCatch \u4f7f\u7528\u6b64\u6ce8\u89e3\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4ee5\u4e0b\u8bbe\u7f6e\uff08\u975e\u5fc5\u987b\uff09 <pre><code>AndroidAop.INSTANCE.setOnThrowableListener(new OnThrowableListener() {\n    @Nullable\n    @Override\n    public Object handleThrowable(@NonNull String flag, @Nullable Throwable throwable,TryCatch tryCatch) {\n        // TODO: 2023/11/11 \u53d1\u751f\u5f02\u5e38\u53ef\u6839\u636e\u4f60\u5f53\u65f6\u4f20\u5165\u7684flag\u4f5c\u51fa\u76f8\u5e94\u5904\u7406\uff0c\u5982\u679c\u9700\u8981\u6539\u5199\u8fd4\u56de\u503c\uff0c\u5219\u5728 return \u5904\u8fd4\u56de\u5373\u53ef\n        return 3;\n    }\n});\n</code></pre></p> </li> <li> <p>@Permission \u4f7f\u7528\u6b64\u6ce8\u89e3\u5fc5\u987b\u914d\u5408\u4ee5\u4e0b\u8bbe\u7f6e\uff08\u6b64\u6b65\u4e3a\u5fc5\u987b\u8bbe\u7f6e\u7684\uff0c\u5426\u5219\u662f\u6ca1\u6548\u679c\u7684\uff09</p> <p>\ud83d\udca1\ud83d\udca1\ud83d\udca1\u5b8c\u5584\u4f7f\u7528\u542f\u793a</p> <pre><code>AndroidAop.INSTANCE.setOnPermissionsInterceptListener(new OnPermissionsInterceptListener() {\n    @SuppressLint(\"CheckResult\")\n    @Override\n    public void requestPermission(@NonNull ProceedJoinPoint joinPoint, @NonNull Permission permission, @NonNull OnRequestPermissionListener call) {\n        Object target = joinPoint.getTarget();\n        String[] permissions = permission.value();\n        if (target instanceof FragmentActivity){\n            RxPermissions rxPermissions = new RxPermissions((FragmentActivity) target);\n            rxPermissions.request(permission.value()).subscribe(call::onCall);\n        }else if (target instanceof Fragment){\n            RxPermissions rxPermissions = new RxPermissions((Fragment) target);\n            rxPermissions.request(permission.value()).subscribe(call::onCall);\n        }else {\n            // TODO: target \u4e0d\u662f FragmentActivity \u6216 Fragment \uff0c\u8bf4\u660e\u6ce8\u89e3\u6240\u5728\u65b9\u6cd5\u4e0d\u5728\u5176\u4e2d\uff0c\u8bf7\u81ea\u884c\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\n            // \u5efa\u8bae\uff1a\u5207\u70b9\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a FragmentActivity \u6216 Fragment \uff0c\u7136\u540e joinPoint.args[0] \u5c31\u53ef\u4ee5\u62ff\u5230\n        }\n    }\n});\n</code></pre> </li> <li> <p>@CustomIntercept \u4f7f\u7528\u6b64\u6ce8\u89e3\u4f60\u5fc5\u987b\u914d\u5408\u4ee5\u4e0b\u8bbe\u7f6e\uff08\u6b64\u6b65\u4e3a\u5fc5\u987b\u8bbe\u7f6e\u7684\uff0c\u5426\u5219\u8fd8\u6709\u4ec0\u4e48\u610f\u4e49\u5462\uff1f\uff09     <pre><code>AndroidAop.INSTANCE.setOnCustomInterceptListener(new OnCustomInterceptListener() {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull CustomIntercept customIntercept) {\n        // TODO: 2023/11/11 \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91 \u5728\u5408\u9002\u7684\u5730\u65b9\u8c03\u7528 joinPoint.proceed()\uff0c\n        //  joinPoint.proceed(args)\u53ef\u4ee5\u4fee\u6539\u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u6539\u5199\u8fd4\u56de\u503c\uff0c\u5219\u5728 return \u5904\u8fd4\u56de\u5373\u53ef\n\n        return null;\n    }\n});\n</code></pre></p> </li> <li> <p>@CheckNetwork \u4f7f\u7528\u6b64\u6ce8\u89e3\u4f60\u53ef\u4ee5\u914d\u5408\u4ee5\u4e0b\u8bbe\u7f6e</p> <ul> <li> <p>\u6743\u9650\u662f\u5fc5\u987b\u52a0\u7684   <pre><code>&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n</code></pre></p> </li> <li> <p>\u4ee5\u4e0b\u8bbe\u7f6e\u4e3a\u53ef\u9009\u8bbe\u7f6e\u9879   <pre><code>AndroidAop.INSTANCE.setOnCheckNetworkListener(new OnCheckNetworkListener() {\n    @Nullable\n    @Override\n    public Object invoke(@NonNull ProceedJoinPoint joinPoint, @NonNull CheckNetwork checkNetwork, boolean availableNetwork) {\n        return null;\n    }\n});\n</code></pre></p> </li> <li> <p>\u5728\u4f7f\u7528\u65f6 invokeListener \u8bbe\u7f6e\u4e3atrue\uff0c\u5373\u53ef\u8fdb\u5165\u4e0a\u8fb9\u56de\u8c03   <pre><code>@CheckNetwork(invokeListener = true)\nfun toSecondActivity(){\n    startActivity(Intent(this,SecondActivity::class.java))\n}\n</code></pre></p> </li> <li> <p>\u53e6\u5916\u5185\u7f6e Toast \u53ef\u4ee5\u8ba9\u4f60\u63a5\u7ba1\uff08\u610f\u601d\u4e0d\u662f\u8bf4\u4f60\u81ea\u5df1\u5199\u7684 Toast \u4f1a\u8d70\u8fd9\u4e2a\u56de\u8c03\uff0c\u800c\u662f\u8fd9\u4e2a\u5e93\u4f7f\u7528 Toast \u65f6\u4f1a\u56de\u8c03\u8fd9\u91cc\uff09   <pre><code>AndroidAop.INSTANCE.setOnToastListener(new OnToastListener() {\n    @Override\n    public void onToast(@NonNull Context context, @NonNull CharSequence text, int duration) {\n\n    }\n});\n</code></pre></p> </li> </ul> </li> </ul> <p>\ud83d\udc46\u4ee5\u4e0a\u6240\u6709\u7684\u7684\u76d1\u542c\uff0c\u6700\u597d\u653e\u5230\u4f60\u7684 application \u4e2d</p>"},{"location":"zh/getting_started/","title":"\u5165\u95e8","text":""},{"location":"zh/getting_started/#_1","title":"\u7248\u672c\u9650\u5236","text":"<p>\u6700\u4f4eGradle\u7248\u672c\uff1a7.6\ud83d\udc47\uff08\u652f\u63018.0\u4ee5\u4e0a\uff09</p> <p></p> <p>\u6700\u4f4eSDK\u7248\u672c\uff1aminSdkVersion &gt;= 21</p>"},{"location":"zh/getting_started/#_2","title":"\u4f7f\u7528\u6b65\u9aa4","text":"<p>\u5728\u5f00\u59cb\u4e4b\u524d\u53ef\u4ee5\u7ed9\u9879\u76ee\u4e00\u4e2aStar\u5417\uff1f\u975e\u5e38\u611f\u8c22\uff0c\u4f60\u7684\u652f\u6301\u662f\u6211\u552f\u4e00\u7684\u52a8\u529b\u3002\u6b22\u8fceStar\u548cIssues!</p> <p>\u672c\u5e93\u4ed3\u5e93\u5730\u5740\u5728 Maven central\uff0c\u5f53\u4f60\u83b7\u53d6\u4e0d\u5230\u4f9d\u8d56\u5305\u65f6\uff0c\u8bf7\u5c06 \u963f\u91cc\u7b49\u955c\u50cf\u5730\u5740 \u653e\u5728 mavenCentral() \u4e4b\u540e</p>"},{"location":"zh/getting_started/#_3","title":"\u4e00\u3001\u5f15\u5165\u63d2\u4ef6\uff0c\u4e0b\u8fb9\u4e24\u79cd\u65b9\u5f0f\u4e8c\u9009\u4e00\uff08\u5fc5\u987b\uff09","text":""},{"location":"zh/getting_started/#apply","title":"\u65b9\u5f0f\u4e00\uff1a<code>apply</code> \u65b9\u5f0f\uff08\u63a8\u8350\uff09","text":"<p>  \u5728 \u9879\u76ee\u6839\u76ee\u5f55 \u7684 <code>build.gradle</code> \u91cc\u4f9d\u8d56\u63d2\u4ef6</p> GroovyKotlin <ul> <li> <p>\u65b0\u7248\u672c</p> <pre><code>plugins {\n    //\ud83d\udc47\u5fc5\u987b\u9879 (1)\ud83d\udc48 apply \u8bbe\u7f6e\u4e3a true \u81ea\u52a8\u4e3a\u6240\u6709module\u201c\u9884\u201d\u914d\u7f6e debugMode\uff0cfalse\u5219\u6309\u4e0b\u8fb9\u6b65\u9aa4\u4e94\u914d\u7f6e debugMode \u7684\u624b\u52a8\u6a21\u5f0f\n    id \"io.github.flyjingfish.androidaop\" version \"2.7.1\" apply true\n}\n</code></pre> <ol> <li> \u5982\u679c\u4f60\u7684\u9879\u76ee\u5185\u5b58\u5728 <code>com.google.dagger.hilt.android</code> \u63d2\u4ef6\uff0c\u8bf7\u628a\u672c\u63d2\u4ef6\u653e\u5728\u5176\u4e4b\u524d</li> </ol> </li> <li> <p>\u6216\u8005\u8001\u7248\u672c     <pre><code>buildscript {\n  dependencies {\n      //\ud83d\udc47\u5fc5\u987b\u9879 (1)\ud83d\udc48\n      classpath \"io.github.flyjingfish:androidaop-plugin:2.7.1\"\n  }\n}\n// \ud83d\udc47\u52a0\u4e0a\u8fd9\u53e5\u81ea\u52a8\u4e3a\u6240\u6709module\u201c\u9884\u201d\u914d\u7f6edebugMode\uff0c\u4e0d\u52a0\u5219\u6309\u4e0b\u8fb9\u6b65\u9aa4\u4e94\u914d\u7f6e debugMode \u7684\u624b\u52a8\u6a21\u5f0f\napply plugin: \"android.aop\"\n</code></pre></p> <ol> <li> \u5982\u679c\u4f60\u7684\u9879\u76ee\u5185\u5b58\u5728 <code>com.google.dagger:hilt-android-gradle-plugin</code> \u63d2\u4ef6\uff0c\u8bf7\u628a\u672c\u63d2\u4ef6\u653e\u5728\u5176\u4e4b\u524d</li> </ol> </li> </ul> <ul> <li> <p>\u65b0\u7248\u672c</p> <pre><code>plugins {\n    //\ud83d\udc47\u5fc5\u987b\u9879 (1)\ud83d\udc48 apply \u8bbe\u7f6e\u4e3a true \u81ea\u52a8\u4e3a\u6240\u6709module\u201c\u9884\u201d\u914d\u7f6edebugMode\uff0cfalse\u5219\u6309\u4e0b\u8fb9\u6b65\u9aa4\u4e94\u914d\u7f6e debugMode \u7684\u624b\u52a8\u6a21\u5f0f\n    id(\"io.github.flyjingfish.androidaop\") version \"2.7.1\" apply true\n}\n</code></pre> <ol> <li> \u5982\u679c\u4f60\u7684\u9879\u76ee\u5185\u5b58\u5728 <code>com.google.dagger.hilt.android</code> \u63d2\u4ef6\uff0c\u8bf7\u628a\u672c\u63d2\u4ef6\u653e\u5728\u5176\u4e4b\u524d</li> </ol> </li> <li> <p>\u6216\u8005\u8001\u7248\u672c     <pre><code>buildscript {\n  dependencies {\n      //\ud83d\udc47\u5fc5\u987b\u9879 (1)\ud83d\udc48\n      classpath(\"io.github.flyjingfish:androidaop-plugin:2.7.1\")\n  }\n}\n// \ud83d\udc47\u52a0\u4e0a\u8fd9\u53e5\u81ea\u52a8\u4e3a\u6240\u6709module\u201c\u9884\u201d\u914d\u7f6edebugMode\uff0c\u4e0d\u52a0\u5219\u6309\u4e0b\u8fb9\u6b65\u9aa4\u4e94\u914d\u7f6e debugMode \u7684\u624b\u52a8\u6a21\u5f0f\napply(plugin = \"android.aop\")\n</code></pre></p> <ol> <li> \u5982\u679c\u4f60\u7684\u9879\u76ee\u5185\u5b58\u5728 <code>com.google.dagger:hilt-android-gradle-plugin</code> \u63d2\u4ef6\uff0c\u8bf7\u628a\u672c\u63d2\u4ef6\u653e\u5728\u5176\u4e4b\u524d</li> </ol> </li> </ul> <p>Note</p> <p>\u5982\u679c\u4f60\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86 hilt \u63d2\u4ef6\uff0c\u6ce8\u610f\u6587\u4e2d\u63d0\u5230\u7684\u5bfc\u5165\u63d2\u4ef6\u7684\u987a\u5e8f\uff08\u70b9\u51fb\u4e0a\u8fb9\u7684 \u201c+\u201d \u53ef\u770b\u5230\u66f4\u591a\u4fe1\u606f\uff09</p> <p>  \u5728 com.android.application\uff08\u4ee5\u53cacom.android.dynamic-feature\uff09 \u7684 <code>build.gradle</code> \u6dfb\u52a0</p> GroovyKotlin <ul> <li> <p>\u65b0\u7248\u672c</p> <pre><code>//\u5fc5\u987b\u9879 \ud83d\udc47\nplugins {\n    ...\n    id 'android.aop'//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n}\n</code></pre> </li> <li> <p>\u6216\u8005\u8001\u7248\u672c</p> <pre><code>//\u5fc5\u987b\u9879 \ud83d\udc47\napply plugin: 'android.aop' //\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n</code></pre> </li> </ul> <ul> <li> <p>\u65b0\u7248\u672c</p> <pre><code>//\u5fc5\u987b\u9879 \ud83d\udc47\nplugins {\n    ...\n    id(\"android.aop\")//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n}\n</code></pre> </li> <li> <p>\u6216\u8005\u8001\u7248\u672c</p> <pre><code>//\u5fc5\u987b\u9879 \ud83d\udc47\napply(plugin = \"android.aop\") //\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n</code></pre> </li> </ul> <p>Warning</p> <p><code>id 'android.aop'</code> \u8fd9\u53e5\u5c3d\u91cf\u653e\u5728\u6700\u540e\u4e00\u884c\uff0c\u5c24\u5176\u662f\u5fc5\u987b\u5728 <code>id 'com.android.application'</code> \u3001 <code>id 'com.android.library'</code> \u6216 <code>id 'com.android.dynamic-feature'</code> \u7684\u540e\u8fb9</p>"},{"location":"zh/getting_started/#plugins","title":"\u65b9\u5f0f\u4e8c\uff1a<code>plugins</code> \u65b9\u5f0f\uff08\u4e0d\u63a8\u8350\uff09","text":"<ul> <li>\u76f4\u63a5\u5728 com.android.application\uff08\u4ee5\u53cacom.android.dynamic-feature\uff09 \u7684 <code>build.gradle</code> \u6dfb\u52a0</li> </ul> GroovyKotlin <pre><code>//\u5fc5\u987b\u9879 \ud83d\udc47\nplugins {\n    ...\n    id \"io.github.flyjingfish.androidaop\" version \"2.7.1\"//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n}\n</code></pre> <pre><code>//\u5fc5\u987b\u9879 \ud83d\udc47\nplugins {\n    ...\n    id(\"io.github.flyjingfish.androidaop\") version \"2.7.1\"//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n}\n</code></pre>"},{"location":"zh/getting_started/#kotlin","title":"\u4e8c\u3001\u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u5207\u9762\uff0c\u5e76\u4e14\u4ee3\u7801\u662f <code>Kotlin</code> (\u975e\u5fc5\u987b)","text":"<ul> <li>\u5728 \u9879\u76ee\u6839\u76ee\u5f55 \u7684 <code>build.gradle</code> \u91cc\u4f9d\u8d56\u63d2\u4ef6</li> </ul> GroovyKotlin <pre><code>plugins {\n    //\u975e\u5fc5\u987b\u9879 \ud83d\udc47\uff0c\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u5207\u9762\uff0c\u5e76\u4e14\u4f7f\u7528 android-aop-ksp \u8fd9\u4e2a\u5e93\u7684\u8bdd\u9700\u8981\u914d\u7f6e \uff0c\u4e0b\u8fb9\u7248\u672c\u53f7\u6839\u636e\u4f60\u9879\u76ee\u7684 Kotlin \u7248\u672c\u51b3\u5b9a\n    id 'com.google.devtools.ksp' version '1.8.0-1.0.9' apply false\n}\n</code></pre> <pre><code>plugins {\n    //\u975e\u5fc5\u987b\u9879 \ud83d\udc47\uff0c\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u5207\u9762\uff0c\u5e76\u4e14\u4f7f\u7528 android-aop-ksp \u8fd9\u4e2a\u5e93\u7684\u8bdd\u9700\u8981\u914d\u7f6e \uff0c\u4e0b\u8fb9\u7248\u672c\u53f7\u6839\u636e\u4f60\u9879\u76ee\u7684 Kotlin \u7248\u672c\u51b3\u5b9a\n    id(\"com.google.devtools.ksp\") version \"1.8.0-1.0.9\" apply false\n}\n</code></pre> <p>Kotlin \u548c KSP Github \u7684\u5339\u914d\u7248\u672c\u53f7\u5217\u8868</p>"},{"location":"zh/getting_started/#_4","title":"\u4e09\u3001\u5f15\u5165\u4f9d\u8d56\u5e93(\u5fc5\u987b)","text":"GroovyKotlin <pre><code>plugins {\n    //\u975e\u5fc5\u987b\u9879 \ud83d\udc47\uff0c\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u5207\u9762\uff0c\u5e76\u4e14\u4f7f\u7528 android-aop-ksp \u8fd9\u4e2a\u5e93\u7684\u8bdd\u9700\u8981\u914d\u7f6e \n    id 'com.google.devtools.ksp'\n}\n\ndependencies {\n    //\ud83d\udc47\u5fc5\u987b\u9879 \n    implementation \"io.github.flyjingfish:androidaop-core:2.7.1\"\n    //\ud83d\udc47\u975e\u5fc5\u987b\u9879 (1)\ud83d\udc48 \u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u6ce8\u89e3\u5207\u9762\n    implementation \"io.github.flyjingfish:androidaop-extra:2.7.1\" \n\n    //\ud83d\udc47\u5fc5\u987b\u9879 \u5982\u679c\u60a8\u9879\u76ee\u5185\u5df2\u7ecf\u6709\u4e86\u8fd9\u9879\u4e0d\u7528\u52a0\u4e5f\u53ef\u4ee5\n    implementation \"androidx.appcompat:appcompat:1.3.0\" // \u81f3\u5c11\u57281.3.0\u53ca\u4ee5\u4e0a\n\n    //\ud83d\udc47\u4e8c\u9009\u4e00 (2)\ud83d\udc48\u70b9\u51fb+\u67e5\u770b\u8be6\u7ec6\u8bf4\u660e\uff0c\u26a0\ufe0f\u652f\u6301Java\u548cKotlin\u4ee3\u7801\u5199\u7684\u5207\u9762\n    ksp \"io.github.flyjingfish:androidaop-apt:2.7.1\"\n\n    //\ud83d\udc47\u4e8c\u9009\u4e00 (3)\ud83d\udc48\u70b9\u51fb+\u67e5\u770b\u8be6\u7ec6\u8bf4\u660e\uff0c\u26a0\ufe0f\u53ea\u9002\u7528\u4e8eJava\u4ee3\u7801\u5199\u7684\u5207\u9762\n    annotationProcessor \"io.github.flyjingfish:androidaop-apt:2.7.1\"\n    //\u26a0\ufe0f\u4e0a\u8fb9\u7684 ksp \u548c annotationProcessor \u4e8c\u9009\u4e00\n    //\u5982\u679c\u53ea\u662f\u4f7f\u7528 android-aop-extra \u4e2d\u7684\u529f\u80fd\u5c31\u4e0d\u9700\u8981\u9009\u62e9\u8fd9\u4e24\u9879\n}\n</code></pre> <ol> <li> \u6b64\u5e93\u5185\u7f6e\u4e86\u4f7f\u7528 @AndroidAopPointCut \u5b9a\u4e49\u7684\u4e00\u4e9b\u529f\u80fd\u6ce8\u89e3</li> <li> \u5f53\u4f60\u4f7f\u7528\u6b64\u5904\u4ecb\u7ecd\u7684\u4e94\u4e2a\u81ea\u5b9a\u4e49\u5207\u9762\u6ce8\u89e3\u65f6\uff0c\u5c31\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4f7f\u7528 <code>androidaop-apt</code></li> <li> \u5f53\u4f60\u4f7f\u7528\u6b64\u5904\u4ecb\u7ecd\u7684\u4e94\u4e2a\u81ea\u5b9a\u4e49\u5207\u9762\u6ce8\u89e3\u65f6\uff0c\u5c31\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4f7f\u7528 <code>androidaop-apt</code></li> </ol> <pre><code>plugins {\n    //\u975e\u5fc5\u987b\u9879 \ud83d\udc47\uff0c\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u5207\u9762\uff0c\u5e76\u4e14\u4f7f\u7528 android-aop-ksp \u8fd9\u4e2a\u5e93\u7684\u8bdd\u9700\u8981\u914d\u7f6e \n    id(\"com.google.devtools.ksp\")\n}\n\ndependencies {\n    //\ud83d\udc47\u5fc5\u987b\u9879 \n    implementation(\"io.github.flyjingfish:androidaop-core:2.7.1\")\n    //\ud83d\udc47\u975e\u5fc5\u987b\u9879 (1)\ud83d\udc48 \u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u6ce8\u89e3\u5207\u9762\n    implementation(\"io.github.flyjingfish:androidaop-extra:2.7.1\")\n\n    //\ud83d\udc47\u5fc5\u987b\u9879 \u5982\u679c\u60a8\u9879\u76ee\u5185\u5df2\u7ecf\u6709\u4e86\u8fd9\u9879\u4e0d\u7528\u52a0\u4e5f\u53ef\u4ee5\n    implementation(\"androidx.appcompat:appcompat:1.3.0\") // \u81f3\u5c11\u57281.3.0\u53ca\u4ee5\u4e0a\n\n    //\ud83d\udc47\u4e8c\u9009\u4e00 (2)\ud83d\udc48\u70b9\u51fb+\u67e5\u770b\u8be6\u7ec6\u8bf4\u660e\uff0c\u26a0\ufe0f\u652f\u6301Java\u548cKotlin\u4ee3\u7801\u5199\u7684\u5207\u9762\n    ksp(\"io.github.flyjingfish:androidaop-apt:2.7.1\")\n\n    //\ud83d\udc47\u4e8c\u9009\u4e00 (3)\ud83d\udc48\u70b9\u51fb+\u67e5\u770b\u8be6\u7ec6\u8bf4\u660e\uff0c\u26a0\ufe0f\u53ea\u9002\u7528\u4e8eJava\u4ee3\u7801\u5199\u7684\u5207\u9762\n    annotationProcessor(\"io.github.flyjingfish:androidaop-apt:2.7.1\")\n    //\u26a0\ufe0f\u4e0a\u8fb9\u7684 ksp \u548c annotationProcessor \u4e8c\u9009\u4e00\n    //\u5982\u679c\u53ea\u662f\u4f7f\u7528 android-aop-extra \u4e2d\u7684\u529f\u80fd\u5c31\u4e0d\u9700\u8981\u9009\u62e9\u8fd9\u4e24\u9879\n}\n</code></pre> <ol> <li> \u6b64\u5e93\u5185\u7f6e\u4e86\u4f7f\u7528 @AndroidAopPointCut \u5b9a\u4e49\u7684\u4e00\u4e9b\u529f\u80fd\u6ce8\u89e3</li> <li> \u5f53\u4f60\u4f7f\u7528\u6b64\u5904\u4ecb\u7ecd\u7684\u4e94\u4e2a\u81ea\u5b9a\u4e49\u5207\u9762\u6ce8\u89e3\u65f6\uff0c\u5c31\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4f7f\u7528 <code>androidaop-apt</code></li> <li> \u5f53\u4f60\u4f7f\u7528\u6b64\u5904\u4ecb\u7ecd\u7684\u4e94\u4e2a\u81ea\u5b9a\u4e49\u5207\u9762\u6ce8\u89e3\u65f6\uff0c\u5c31\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4f7f\u7528 <code>androidaop-apt</code></li> </ol> <p>Note</p> <p>\u63d0\u793a\uff1aksp \u6216 annotationProcessor\u53ea\u80fd\u626b\u63cf\u5f53\u524d module \uff0c\u5728\u54ea\u4e2a module \u4e2d\u6709\u81ea\u5b9a\u4e49\u5207\u9762\u4ee3\u7801\u5c31\u52a0\u5728\u54ea\u4e2a module\uff0c\u4f46\u662f\u81ea\u5b9a\u4e49\u7684\u5207\u9762\u4ee3\u7801\u662f\u5168\u5c40\u751f\u6548\u7684\uff1b\u5fc5\u987b\u4f9d\u8d56\u9879\u53ef\u4ee5\u901a\u8fc7 api \u65b9\u5f0f\u53ea\u52a0\u5230\u516c\u5171 module \u4e0a</p>"},{"location":"zh/getting_started/#app-buildgradle-androidaopconfig","title":"\u56db\u3001\u5728 app \u7684build.gradle\u6dfb\u52a0 androidAopConfig \u914d\u7f6e\u9879\uff08\u6b64\u6b65\u4e3a\u53ef\u9009\u914d\u7f6e\u9879\uff09","text":"<ul> <li>\u76f8\u5173\u5f00\u53d1\u914d\u7f6e</li> </ul> GroovyKotlin <pre><code>plugins {\n    ...\n    id 'android.aop'//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n}\nandroidAopConfig {\n    // enabled \u4e3a false \u5207\u9762\u4e0d\u518d\u8d77\u4f5c\u7528\uff0c\u9ed8\u8ba4\u4e0d\u5199\u4e3a true\n    enabled true \n    // include \u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u5168\u90e8\u626b\u63cf\uff0c\u8bbe\u7f6e\u540e\u53ea\u626b\u63cf\u8bbe\u7f6e\u7684\u5305\u540d\u7684\u4ee3\u7801\n    include '\u4f60\u9879\u76ee\u7684\u5305\u540d','\u81ea\u5b9a\u4e49module\u7684\u5305\u540d','\u81ea\u5b9a\u4e49module\u7684\u5305\u540d'\n    // exclude \u662f\u626b\u63cf\u65f6\u6392\u9664\u7684\u5305\n    // \u53ef\u6392\u9664 kotlin \u76f8\u5173\uff0c\u63d0\u9ad8\u901f\u5ea6\n    exclude 'kotlin.jvm', 'kotlin.internal','kotlinx.coroutines.internal', 'kotlinx.coroutines.android'\n    // \u6392\u9664\u6253\u5305\u7684\u5b9e\u4f53\u540d\n    excludePackaging 'license/NOTICE' , 'license/LICENSE.dom-software.txt' , 'license/LICENSE'\n\n    // verifyLeafExtends \u662f\u5426\u5f00\u542f\u9a8c\u8bc1\u53f6\u5b50\u7ee7\u627f\uff0c\u9ed8\u8ba4\u6253\u5f00\uff0c@AndroidAopMatchClassMethod \u548c @AndroidAopCollectMethod \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e LEAF_EXTENDS\uff0c\u53ef\u4ee5\u5173\u95ed\n    verifyLeafExtends true\n    //\u9ed8\u8ba4\u5173\u95ed\uff0c\u5f00\u542f\u5728 Build \u6216 \u6253\u5305\u540e \u5c06\u4f1a\u751f\u6210\u5207\u70b9\u4fe1\u606f\u6587\u4ef6\u5728 app/build/tmp/(cutInfo.json\u3001cutInfo.html)\n    cutInfoJson false\n}\nandroid {\n    ...\n}\n</code></pre> <pre><code>plugins {\n    ...\n    id(\"android.aop\")//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\n}\nandroidAopConfig {\n    // enabled \u4e3a false \u5207\u9762\u4e0d\u518d\u8d77\u4f5c\u7528\uff0c\u9ed8\u8ba4\u4e0d\u5199\u4e3a true\n    enabled = true \n    // include \u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u5168\u90e8\u626b\u63cf\uff0c\u8bbe\u7f6e\u540e\u53ea\u626b\u63cf\u8bbe\u7f6e\u7684\u5305\u540d\u7684\u4ee3\u7801\n    include(\"\u4f60\u9879\u76ee\u7684\u5305\u540d\",\"\u81ea\u5b9a\u4e49module\u7684\u5305\u540d\",\"\u81ea\u5b9a\u4e49module\u7684\u5305\u540d\")\n    // exclude \u662f\u626b\u63cf\u65f6\u6392\u9664\u7684\u5305\n    // \u53ef\u6392\u9664 kotlin \u76f8\u5173\uff0c\u63d0\u9ad8\u901f\u5ea6\n    exclude(\"kotlin.jvm\", \"kotlin.internal\",\"kotlinx.coroutines.internal\", \"kotlinx.coroutines.android\")\n    // \u6392\u9664\u6253\u5305\u7684\u5b9e\u4f53\u540d\n    excludePackaging(\"license/NOTICE\" , \"license/LICENSE.dom-software.txt\" , \"license/LICENSE\")\n\n    // verifyLeafExtends \u662f\u5426\u5f00\u542f\u9a8c\u8bc1\u53f6\u5b50\u7ee7\u627f\uff0c\u9ed8\u8ba4\u6253\u5f00\uff0c@AndroidAopMatchClassMethod \u548c @AndroidAopCollectMethod \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e LEAF_EXTENDS\uff0c\u53ef\u4ee5\u5173\u95ed\n    verifyLeafExtends = true\n    //\u9ed8\u8ba4\u5173\u95ed\uff0c\u5f00\u542f\u5728 Build \u6216 \u6253\u5305\u540e \u5c06\u4f1a\u751f\u6210\u5207\u70b9\u4fe1\u606f\u6587\u4ef6\u5728 app/build/tmp/(cutInfo.json\u3001cutInfo.html)\n    cutInfoJson = false\n}\nandroid {\n    ...\n}\n</code></pre> <p>Note</p> <p>1\u3001include \u548c exclude\u652f\u6301\u7cbe\u786e\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7c7b 2\u3001\u5408\u7406\u4f7f\u7528 include \u548c exclude \u53ef\u63d0\u9ad8\u7f16\u8bd1\u901f\u5ea6\uff0c\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528 include \u8bbe\u7f6e\u4f60\u9879\u76ee\u7684\u76f8\u5173\u5305\u540d\uff08\u5305\u62ec app \u548c\u81ea\u5b9a\u4e49 module \u7684\uff09 3\u3001@AndroidAopMatchClassMethod \u548c @AndroidAopCollectMethod \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e LEAF_EXTENDS,\u5c31\u4e3b\u52a8\u8bbe\u7f6e verifyLeafExtends \u4e3a false \u4e5f\u53ef\u4ee5\u63d0\u901f</p> <p>Warning</p> <p>\u8bbe\u7f6e\u5b8c\u4e86 include \u548c exclude \u6240\u6709\u5207\u9762\u53ea\u5728\u60a8\u8bbe\u7f6e\u89c4\u5219\u4e4b\u5185\u624d\u6709\u6548\uff0c\u9ebb\u70e6\u8bb0\u4f4f\u81ea\u5df1\u7684\u8bbe\u7f6e\uff01\u53e6\u5916\u8bbe\u7f6e\u6b64\u5904\u4e4b\u540e\u7531\u4e8e Android Studio \u53ef\u80fd\u6709\u7f13\u5b58\uff0c\u5efa\u8bae\u5148 clean \u518d\u7ee7\u7eed\u5f00\u53d1</p>"},{"location":"zh/getting_started/#_5","title":"\u4e94\u3001\u5f00\u53d1\u4e2d\u53ef\u8bbe\u7f6e\u6253\u5305\u65b9\u5f0f\uff08\u6b64\u6b65\u4e3a\u53ef\u9009\u914d\u7f6e\u9879\uff0c\u5efa\u8bae\u914d\u7f6e\u6b64\u9879\u52a0\u901f\u5f00\u53d1\uff09","text":""},{"location":"zh/getting_started/#fastdex","title":"\u65b9\u5f0f\u4e00\uff08fastDex \u6a21\u5f0f\uff09","text":"<p>\u5728 \u6839\u76ee\u5f55 \u7684 <code>gradle.properties</code> \u6dfb\u52a0\u5982\u4e0b\u8bbe\u7f6e</p> <pre><code>androidAop.fastDex = true //\u52a0\u901f dexBuilder\u9636\u6bb5\uff08\u9ed8\u8ba4false\uff09\nandroidAop.fastDex.variantOnlyDebug = false //\u53ea\u5728 debug \u8d77\u4f5c\u7528\uff08\u9ed8\u8ba4false\uff09\n</code></pre> <p>Note</p> <p>1\u3001<code>androidAop.fastDex</code> \u8bbe\u7f6e\u4e3a true \u65f6\u5219\u4f1a\u5bf9 dexBuilder \u4efb\u52a1\u8fdb\u884c \u589e\u91cf\u7f16\u8bd1 \u4f18\u5316\u52a0\u901f\uff0c\u8bf7\u6ce8\u610f\u6b64\u9879\u8bbe\u7f6e\u5728\u4e0d\u5904\u4e8e debugMode \u6a21\u5f0f\u4e0b\u624d\u6709\u4f5c\u7528 2\u3001<code>androidAop.fastDex.variantOnlyDebug</code> \u8bbe\u7f6e\u4e3a true \u65f6 release \u5305\u4f1a\u5ffd\u7565 <code>androidAop.fastDex = true</code> \u7684\u8bbe\u7f6e 3\u3001\u5982\u679c\u4f60\u9879\u76ee\u4e2d\u5b58\u5728\u5176\u4ed6\u4f7f\u7528 <code>toTransform</code> \u7684\u63d2\u4ef6\uff0c\u8bf7\u8c03\u6574\u4efb\u52a1\u6267\u884c\u987a\u5e8f\u5c06 <code>xxAssembleAndroidAopTask</code> \u4efb\u52a1\u653e\u5728\u6700\u540e\uff0c\u5426\u5219\u6548\u679c\u5c06\u4f1a\u6709\u6240\u6298\u6263 4\u3001\u5982\u679c\u4f60\u9879\u76ee\u6709\u5176\u4ed6\u4f7f\u7528 <code>toTransform</code> \u7684\u63d2\u4ef6\uff0c\u5982\u67d0\u4e9b Router\uff0c\u5efa\u8bae\u4f7f\u7528\u672c\u65b9\u5f0f\u4e00</p>"},{"location":"zh/getting_started/#debugmode","title":"\u65b9\u5f0f\u4e8c\uff08debugMode \u6a21\u5f0f\uff09","text":"<p>\u5982\u679c\u4f60\u914d\u7f6e\u8fd9\u4e00\u6b65\u7684 debugMode \uff0c\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u597d\u4e0b\u8fb9\u6bcf\u4e00\u884c\u7684\u8bf4\u660e\uff0c\u4e0d\u8981\u65e0\u8111\u590d\u5236\uff0c\u5c24\u5176\u662f\u60f3\u5207\u4e09\u65b9 jar \u5305\u7684</p> <p>\u4ee5\u4e0b\u7684\u914d\u7f6e\u6b65\u9aa4\u540c\u6837\u4e5f\u9002\u7528\u4e8e \u7ec4\u4ef6\u5316\u7684\u573a\u666f \u70b9\u6b64\u67e5\u770b</p> <p>  \u4e3a \u6240\u6709\u7684\u5b50module \u4e5f\u4f9d\u8d56\u63d2\u4ef6\uff0c\u8bf7\u6309\u7167\u4e0a\u8ff0 \u6b65\u9aa4\u4e00\u7684\u65b9\u5f0f\u4e00\u914d\u7f6e\u9879\u76ee\uff0c\u7136\u540e\u4ee5\u4e0b\u65b9\u5f0f\u4e8c\u9009\u4e00</p> <ul> <li> <p>\u81ea\u52a8\u6a21\u5f0f\uff1a\uff08\u63a8\u8350\uff09</p> <p>\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u4e00\u7684\u65b9\u5f0f\u4e00\u914d\u7f6e\u9879\u76ee\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e2a\u65b9\u5f0f\u81ea\u52a8\u4e3a\u6240\u6709 Android \u7684 module\uff08\u4e0d\u5305\u62ec <code>com.android.dynamic-feature</code> \u7684module\uff09 \u5e94\u7528 debugMode</p> </li> <li> <p>\u624b\u52a8\u6a21\u5f0f\uff1a\uff08\u4e0d\u63a8\u8350\uff09</p> <p>\u8bf7\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u4e00\u7684\u65b9\u5f0f\u4e00\u914d\u7f6e\u9879\u76ee\u540e\uff0c\u624b\u52a8\u4e3a \u9700\u8981\u7684\u5b50 module \u6a21\u5757 \u8bbe\u7f6e\uff0c\u4f8b\u5982\uff1a</p> GroovyKotlin <pre><code>plugins {\n    ...\n    id 'android.aop'//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\uff0c\u5c24\u5176\u662f\u5fc5\u987b\u5728 `id 'com.android.application'` \u6216 `id 'com.android.library'` \u7684\u540e\u8fb9\n}\n</code></pre> <pre><code>plugins {\n    ...\n    id(\"android.aop\")//\u6700\u597d\u653e\u5728\u6700\u540e\u4e00\u884c\uff0c\u5c24\u5176\u662f\u5fc5\u987b\u5728 `id(\"com.android.application\")` \u6216 `id(\"com.android.library\")` \u7684\u540e\u8fb9\n}\n</code></pre> </li> </ul> <p>Note</p> <p>1\u3001\u8fd9\u4e2a\u65b9\u5f0f\u53ef\u4ee5\u53ea\u4e3a\u4f60\u52a0\u8fc7\u7684 module \u5e94\u7528 debugMode\uff0c\u6ca1\u52a0\u7684 module \u91cc\u8fb9\u7684\u76f8\u5173\u5207\u9762\u4e0d\u4f1a\u751f\u6548 2\u3001\u5982\u679c\u4f60\u7684 module \u662f Java\u6216Kotlin \u7684 Library\uff0c\u81ea\u52a8\u6a21\u5f0f\u53ea\u80fd\u8ba9\u6240\u6709\u7684 Android \u7684 Library\uff0c\u9700\u8981\u91c7\u7528\u624b\u52a8\u6a21\u5f0f\u5355\u72ec\u4e3a\u4f60\u7684 module \u914d\u7f6e\u624d\u4f1a\u751f\u6548\uff0c<code>com.android.dynamic-feature</code> \u9700\u8981\u624b\u52a8\u52a0\u4e0a\u6b64\u63d2\u4ef6</p> <p>  \u5728 \u6839\u76ee\u5f55 \u7684 <code>gradle.properties</code> \u6dfb\u52a0\u5982\u4e0b\u8bbe\u7f6e</p> <pre><code>androidAop.debugMode=true //\u8bbe\u7f6e\u4e3a true \u8d70\u60a8\u9879\u76ee\u5f53\u524d\u7684\u6253\u5305\u65b9\u5f0f \uff0cfalse \u5219\u4e3a\u5168\u91cf\u6253\u5305\u65b9\u5f0f\uff0c\u4e0d\u5199\u9ed8\u8ba4false\n</code></pre> <p>Warning</p> <p>1\u3001\u8bf7\u6ce8\u610f\u8bbe\u7f6e\u4e3a true \u65f6\u7f16\u8bd1\u901f\u5ea6\u4f1a\u53d8\u5feb\u4f46\u90e8\u5206\u529f\u80fd\u5c06\u5931\u6548\uff0c\u53ea\u4f1a\u4e3a\u8bbe\u7f6e\u7684 module \u7ec7\u5165 aop \u4ee3\u7801\uff0c\u4e09\u65b9jar\u5305 \u4e0d\u4f1a\u7ec7\u5165\u4ee3\u7801\uff0c\u56e0\u6b64\u6253\u6b63\u5f0f\u5305\u65f6\u8bf7\u6ce8\u610f\u5173\u95ed\u6b64\u9879\u914d\u7f6e\u5e76clean\u9879\u76ee 2\u3001\u5982\u679c\u8bbe\u7f6e\u4e86 <code>org.gradle.parallel = true</code>\uff0c\u5982\u6709bug\u8bf7\u6ce8\u610f\u8c03\u6574\u5404\u4e2a module compileXXJavaWithJavac \u4efb\u52a1\u7684\u987a\u5e8f\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u5173\u95ed\u8fd9\u9879\u914d\u7f6e</p> <p>  \u5728 \u6839\u76ee\u5f55 \u7684 <code>gradle.properties</code> \u6dfb\u52a0\u5982\u4e0b\u8bbe\u7f6e</p> <pre><code>androidAop.debugMode.variantOnlyDebug = true //\u9ed8\u8ba4\u4e0d\u5199\u8fd9\u9879\u5c31\u662ftrue\n</code></pre> <p>Note</p> <p>1\u3001\u8fd9\u9879\u4e0d\u5199\u9ed8\u8ba4\u5c31\u662ftrue\uff0c\u8bf7\u6ce8\u610f\u8bbe\u7f6e\u4e3a true \u65f6 release \u5305\u4f1a\u5ffd\u7565 <code>androidAop.debugMode = true</code> \u7684\u8bbe\u7f6e\u81ea\u52a8\u8d70\u5168\u91cf\u6253\u5305\u65b9\u5f0f\uff08\u76f8\u5f53\u4e8e\u4e34\u65f6\u5173\u95ed\u4e86debugMode\uff09\uff0c\u8bbe\u4e3a false \u65f6\u5219\u6ca1\u6709\u8fd9\u79cd\u6548\u679c  2\u3001\u6b64\u9879\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u56e0\u6b64release\u5305\u65e0\u9700\u624b\u52a8\u5173\u95ed <code>androidAop.debugMode</code> 3\u3001\u6b64\u9879\u53ea\u5bf9 Android \u7684 Library \u6709\u6548,\u5bf9 Java \u6216 Kotlin \u7684 Library \u65e0\u6548</p> <p>  \u5728 \u6839\u76ee\u5f55 \u7684 <code>gradle.properties</code> \u6dfb\u52a0\u5982\u4e0b\u8bbe\u7f6e\uff08\u975e\u5fc5\u987b\u9879\uff09</p> <pre><code>androidAop.debugMode.buildConfig = true //\u8bbe\u7f6e\u4e3a true \u8868\u793a\u5bfc\u51fa\u4e00\u4e2a DebugModeBuildConfig.java \u6587\u4ef6\uff0c\u4e0d\u5199\u9ed8\u8ba4\u4e3a true\n</code></pre> <p>Note</p> <p>1\u3001\u56e0\u4e3a\u6709\u4e9b module \u7684\u4ee3\u7801\u53ea\u6709 kotlin \u4ee3\u7801\uff0c\u5bfc\u81f4 debugMode \u65e0\u6cd5\u751f\u6548\uff0c\u8bbe\u7f6e\u4e3atrue\u53ef\u63d2\u5165\u4e00\u4e2a java \u4ee3\u7801\u5373\u53ef\u751f\u6548\uff0c\u5982\u679c\u4e0d\u9700\u8981\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a false\uff0c\u4f46\u9700\u8981\u4f60\u624b\u52a8\u521b\u5efa\u4e00\u4e2a java \u4ee3\u7801  2\u3001\u5982\u679c debugMode \u65e0\u6cd5\u751f\u6548\uff0c\u53ef\u8003\u8651\u5173\u95ed\u6b64\u9879\u914d\u7f6e\uff0c\u6dfb\u52a0\u8bbe\u7f6e <code>android.defaults.buildfeatures.buildconfig=true</code></p>"},{"location":"zh/getting_started/#_6","title":"\u5176\u4ed6\u914d\u7f6e\uff08\u9009\u586b\uff0c\u8ffd\u6c42\u6781\u81f4\u53ef\u4ee5\u914d\u7f6e\u8fd9\u9879\uff09","text":"<p>\u5728 \u6839\u76ee\u5f55 \u7684 <code>gradle.properties</code> \u6dfb\u52a0\u5982\u4e0b\u8bbe\u7f6e</p> <pre><code>androidAop.reflectInvokeMethod = true //\u8bbe\u7f6e\u4e3a true \u53cd\u5c04\u6267\u884c\u5207\u9762\u65b9\u6cd5 \uff0c\u4e0d\u5199\u9ed8\u8ba4 false\nandroidAop.reflectInvokeMethod.variantOnlyDebug = true // \u8bbe\u7f6e\u4e3a true \u5219\u53ea\u4f1a\u5728 debug \u4e0b\u624d\u6709\u6548\uff0c\u4e0d\u5199\u9ed8\u8ba4false\nandroidAop.reflectInvokeMethod.static = true // \u8bbe\u7f6e\u4e3a true \u6a21\u62df\u4e86\u975e\u53cd\u5c04\u7684\u60c5\u51b5\uff0c\u4e0d\u5199\u9ed8\u8ba4true\n</code></pre> <p>Note</p> <p>1\u3001<code>androidAop.reflectInvokeMethod</code> \u8bbe\u7f6e\u4e3a true \u53cd\u5c04\u6267\u884c\u5207\u9762\u65b9\u6cd5\u4f1a\u52a0\u5feb\u6253\u5305\u901f\u5ea6\uff0c\u8bbe\u7f6e\u4e3a false \u4e8c\u6b21\u7f16\u8bd1\u901f\u5ea6\u548c\u5f00\u542f\u53cd\u5c04\u901f\u5ea6\u662f\u57fa\u672c\u4e00\u6837\u7684 2\u3001\u8bf7\u6ce8\u610f<code>androidAop.reflectInvokeMethod.variantOnlyDebug</code> \u8bbe\u7f6e\u4e3a true \u65f6 release \u5305\u4f1a\u5ffd\u7565 <code>androidAop.reflectInvokeMethod = true</code> \u7684\u8bbe\u7f6e\u81ea\u52a8\u4e0d\u8d70\u53cd\u5c04\uff0c\u8bbe\u4e3a false \u65f6\u5219\u6ca1\u6709\u8fd9\u79cd\u6548\u679c\uff08\u4e0d\u5199\u9ed8\u8ba4false\uff09 3\u3001<code>androidAop.reflectInvokeMethod.static</code> \u8bbe\u7f6e\u4e3a true \u6a21\u62df\u4e86\u975e\u53cd\u5c04\u7684\u60c5\u51b5\u517c\u987e\u4e86\u53cd\u5c04\u7684\u7f16\u8bd1\u901f\u5ea6\uff0c\u4e0d\u5199\u9ed8\u8ba4true\uff0c\u5982\u679c\u60f3\u4f7f\u7528\u53cd\u5c04\u5efa\u8bae\u8bbe\u7f6e\u6b64\u9879\u4e3a true\u3002\u8bbe\u7f6e\u4e3a false \u5219\u4e3a\u7eaf\u53cd\u5c04  4\u3001<code>androidAop.reflectInvokeMethod.variantOnlyDebug</code> \u53ea\u5bf9 Android \u7684 Library \u6709\u6548,\u5bf9 Java \u6216 Kotlin \u7684 Library \u65e0\u6548</p>"},{"location":"zh/getting_started/#cleankeepaopcache","title":"CleanKeepAopCache","text":"<p>\u5f53\u4f60\u60f3\u8981 clean \u9879\u76ee\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\uff0c\u65b9\u4fbf clean \u540e\u4f7f\u7f16\u8bd1\u65f6\u95f4\u51cf\u5c11\u4e00\u4e9b</p> <ul> <li> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528</p> <pre><code>./gradlew aaaCleanKeepAopCache\n</code></pre> </li> <li> <p>\u53cc\u51fb\u547d\u4ee4</p> <p></p> </li> </ul> <p>\u5982\u679c\u627e\u4e0d\u5230 <code>aaaCleanKeepAopCache</code> \u547d\u4ee4\uff0c\u4f60\u9700\u8981\u5728 \u6839\u76ee\u5f55 \u7684 <code>build.gradle</code> \u6dfb\u52a0\u5982\u4e0b\u8bbe\u7f6e</p> GroovyKotlin <pre><code>apply plugin: 'android.aop.clean'\n</code></pre> <pre><code>apply(plugin = \"android.aop.clean\")\n</code></pre>"},{"location":"zh/getting_started/#_7","title":"\u672c\u5e93\u5185\u7f6e\u4e86\u4e00\u4e9b\u529f\u80fd\u6ce8\u89e3\u53ef\u4f9b\u4f60\u76f4\u63a5\u4f7f\u7528","text":"\u6ce8\u89e3\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u529f\u80fd\u8bf4\u660e @SingleClick value = \u5feb\u901f\u70b9\u51fb\u7684\u95f4\u9694\uff0c\u9ed8\u8ba41000ms \u5355\u51fb\u6ce8\u89e3\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u53ea\u6709\u5355\u51fb\u65f6\u624d\u53ef\u8fdb\u5165 @DoubleClick value = \u4e24\u6b21\u70b9\u51fb\u7684\u6700\u5927\u7528\u65f6\uff0c\u9ed8\u8ba4300ms \u53cc\u51fb\u6ce8\u89e3\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u53cc\u51fb\u65f6\u624d\u53ef\u8fdb\u5165 @IOThread ThreadType = \u7ebf\u7a0b\u7c7b\u578b \u5207\u6362\u5230\u5b50\u7ebf\u7a0b\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5185\u7684\u4ee3\u7801\u5207\u6362\u5230\u5b50\u7ebf\u7a0b\u6267\u884c @MainThread \u65e0\u53c2\u6570 \u5207\u6362\u5230\u4e3b\u7ebf\u7a0b\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5185\u7684\u4ee3\u7801\u5207\u6362\u5230\u4e3b\u7ebf\u7a0b\u6267\u884c @OnLifecycle<sup>*</sup> value = Lifecycle.Event \u76d1\u542c\u751f\u547d\u5468\u671f\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5185\u7684\u4ee3\u7801\u5728\u5bf9\u5e94\u751f\u547d\u5468\u671f\u5185\u624d\u53bb\u6267\u884c @TryCatch value = \u4f60\u81ea\u5b9a\u4e49\u52a0\u7684\u4e00\u4e2aflag \u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4e3a\u60a8\u7684\u65b9\u6cd5\u5305\u88f9\u4e00\u5c42 try catch \u4ee3\u7801 @Permission<sup>*</sup> tag = \u81ea\u5b9a\u4e49\u6807\u8bb0value = \u6743\u9650\u7684\u5b57\u7b26\u4e32\u6570\u7ec4 \u7533\u8bf7\u6743\u9650\u7684\u64cd\u4f5c\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u60a8\u7684\u4ee3\u7801\u5728\u83b7\u53d6\u6743\u9650\u540e\u624d\u6267\u884c @Scheduled initialDelay = \u5ef6\u8fdf\u5f00\u59cb\u65f6\u95f4interval = \u95f4\u9694repeatCount = \u91cd\u590d\u6b21\u6570isOnMainThread = \u662f\u5426\u4e3b\u7ebf\u7a0bid = \u552f\u4e00\u6807\u8bc6 \u5b9a\u65f6\u4efb\u52a1\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u6267\u884c\u4e00\u6b21\uff0c\u8c03\u7528AndroidAop.shutdownNow(id)\u6216AndroidAop.shutdown(id)\u53ef\u505c\u6b62 @Delay delay = \u5ef6\u8fdf\u65f6\u95f4isOnMainThread = \u662f\u5426\u4e3b\u7ebf\u7a0bid = \u552f\u4e00\u6807\u8bc6 \u5ef6\u8fdf\u4efb\u52a1\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\uff0c\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u6267\u884c\uff0c\u8c03\u7528AndroidAop.shutdownNow(id)\u6216AndroidAop.shutdown(id)\u53ef\u53d6\u6d88 @CheckNetwork tag = \u81ea\u5b9a\u4e49\u6807\u8bb0toastText = \u65e0\u7f51\u7edc\u65f6toast\u63d0\u793ainvokeListener = \u662f\u5426\u63a5\u7ba1\u68c0\u67e5\u7f51\u7edc\u903b\u8f91 \u68c0\u67e5\u7f51\u7edc\u662f\u5426\u53ef\u7528\uff0c\u52a0\u5165\u6b64\u6ce8\u89e3\u53ef\u4f7f\u4f60\u7684\u65b9\u6cd5\u5728\u6709\u7f51\u7edc\u624d\u53ef\u8fdb\u53bb @CustomIntercept value = \u4f60\u81ea\u5b9a\u4e49\u52a0\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u7684flag \u81ea\u5b9a\u4e49\u62e6\u622a\uff0c\u914d\u5408 AndroidAop.setOnCustomInterceptListener \u4f7f\u7528\uff0c\u5c5e\u4e8e\u4e07\u91d1\u6cb9 <p>Note</p> <p>\u4ee5\u4e0a\u529f\u80fd\u4f4d\u4e8e <code>android-aop-extra</code> \u5e93\u4e2d\uff0c\u8be6\u7ec6\u8bf4\u660e\u8bf7\u770b\u6587\u6863</p>"},{"location":"zh/getting_started/#_8","title":"\u81ea\u5b9a\u4e49\u5207\u9762","text":"<p>\u672c\u7bc7\u4ecb\u7ecd\u662f\u5927\u7eb2\u5f0f\u7684\u5927\u81f4\u8bb2\u89e3</p> <ul> <li>@AndroidAopPointCut \u662f\u4e3a\u65b9\u6cd5\u52a0\u6ce8\u89e3\u7684\u5207\u9762</li> <li>@AndroidAopMatchClassMethod \u662f\u5339\u914d\u7c7b\u7684\u65b9\u6cd5\u7684\u5207\u9762</li> <li>@AndroidAopReplaceClass \u662f\u66ff\u6362\u65b9\u6cd5\u8c03\u7528\u7684</li> <li>@AndroidAopModifyExtendsClass \u662f\u4fee\u6539\u7ee7\u627f\u7c7b</li> <li>@AndroidAopCollectMethod \u662f\u6536\u96c6\u7ee7\u627f\u7c7b</li> </ul>"},{"location":"zh/getting_started/#androidaoppointcut-wiki","title":"\u4e00\u3001@AndroidAopPointCut \u662f\u5728\u65b9\u6cd5\u4e0a\u901a\u8fc7\u6ce8\u89e3\u7684\u5f62\u5f0f\u505a\u5207\u9762\u7684\uff0c\u4e0a\u8ff0\u4e2d\u6ce8\u89e3\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u505a\u7684\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf7\u770bwiki\u6587\u6863","text":"<p>\u2003\u2003\u4e0b\u9762\u4ee5 @CustomIntercept \u4e3a\u4f8b\u4ecb\u7ecd\u4e0b\u8be5\u5982\u4f55\u4f7f\u7528</p> <ul> <li> <p>\u521b\u5efa\u6ce8\u89e3(\u5c06 @AndroidAopPointCut \u52a0\u5230\u4f60\u7684\u6ce8\u89e3\u4e0a)</p> KotlinJava <pre><code>@AndroidAopPointCut(CustomInterceptCut::class)\n@Target(\n        AnnotationTarget.FUNCTION,\n        AnnotationTarget.PROPERTY_GETTER,\n        AnnotationTarget.PROPERTY_SETTER\n)\n@Retention(\n        AnnotationRetention.RUNTIME\n)\nannotation class CustomIntercept(vararg val value: String = [])\n</code></pre> <pre><code>@AndroidAopPointCut(CustomInterceptCut.class)\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomIntercept {\n    String[] value() default {};\n}\n</code></pre> </li> <li> <p>\u521b\u5efa\u6ce8\u89e3\u5904\u7406\u5207\u9762\u7684\u7c7b\uff08\u9700\u8981\u5b9e\u73b0 BasePointCut \u63a5\u53e3\uff0c\u5b83\u7684\u6cdb\u578b\u586b\u4e0a\u8fb9\u7684\u6ce8\u89e3\uff09</p> <pre><code>class CustomInterceptCut : BasePointCut&lt;CustomIntercept&gt; {\n    override fun invoke(\n        joinPoint: ProceedJoinPoint,\n        annotation: CustomIntercept //annotation\u5c31\u662f\u4f60\u52a0\u5230\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\n    ): Any? {\n        // \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91\n        // joinPoint.proceed() \u8868\u793a\u7ee7\u7eed\u6267\u884c\u5207\u70b9\u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u4e0d\u8c03\u7528\u6b64\u65b9\u6cd5\u4e0d\u4f1a\u6267\u884c\u5207\u70b9\u65b9\u6cd5\u91cc\u8fb9\u7684\u4ee3\u7801\n        // \u5173\u4e8e ProceedJoinPoint \u53ef\u4ee5\u770bwiki \u6587\u6863\uff0c\u8be6\u7ec6\u70b9\u51fb\u4e0b\u65b9\u94fe\u63a5\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u5173\u4e8e ProceedJoinPoint \u4f7f\u7528\u8bf4\u660e\uff0c\u4e0b\u6587\u7684 ProceedJoinPoint \u540c\u7406</p> </li> <li> <p>\u4f7f\u7528</p> <p>\u76f4\u63a5\u5c06\u4f60\u5199\u7684\u6ce8\u89e3\u52a0\u5230\u4efb\u610f\u4e00\u4e2a\u65b9\u6cd5\u4e0a\uff0c\u4f8b\u5982\u52a0\u5230\u4e86 onCustomIntercept() \u5f53 onCustomIntercept() \u88ab\u8c03\u7528\u65f6\u9996\u5148\u4f1a\u8fdb\u5165\u5230\u4e0a\u6587\u63d0\u5230\u7684 CustomInterceptCut \u7684 invoke \u65b9\u6cd5\u4e0a</p> <pre><code>@CustomIntercept(\"\u6211\u662f\u81ea\u5b9a\u4e49\u6570\u636e\")\nfun onCustomIntercept(){\n\n}\n</code></pre> </li> </ul>"},{"location":"zh/getting_started/#androidaopmatchclassmethod","title":"\u4e8c\u3001@AndroidAopMatchClassMethod \u662f\u505a\u5339\u914d\u67d0\u7c7b\u53ca\u5176\u5bf9\u5e94\u65b9\u6cd5\u7684\u5207\u9762\u7684","text":"<p> \u5339\u914d\u65b9\u6cd5\u652f\u6301\u7cbe\u51c6\u5339\u914d\uff0c\u70b9\u6b64\u770bwiki\u8be6\u7ec6\u4f7f\u7528\u6587\u6863</p> <ul> <li> <p>\u4f8b\u5b50\u4e00</p> <pre><code>package com.flyjingfish.test_lib;\n\npublic class TestMatch {\n    public void test1(int value1,String value2){\n\n    }\n\n    public String test2(int value1,String value2){\n        return value1+value2;\n    }\n}\n</code></pre> <p>\u5047\u5982 TestMatch \u662f\u8981\u5339\u914d\u7684\u7c7b\uff0c\u800c\u4f60\u60f3\u8981\u5339\u914d\u5230 test2 \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4e0b\u8fb9\u662f\u5339\u914d\u5199\u6cd5\uff1a</p> <pre><code>package com.flyjingfish.test_lib.mycut;\n\n@AndroidAopMatchClassMethod(\n        targetClassName = \"com.flyjingfish.test_lib.TestMatch\",\n        methodName = [\"test2\"],\n        type = MatchType.SELF\n)\nclass MatchTestMatchMethod : MatchClassMethod {\n  override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n    Log.e(\"MatchTestMatchMethod\",\"======\"+methodName+\",getParameterTypes=\"+joinPoint.getTargetMethod().getParameterTypes().length);\n    // \u5728\u6b64\u5199\u4f60\u7684\u903b\u8f91 \n    //\u4e0d\u60f3\u6267\u884c\u539f\u6765\u65b9\u6cd5\u903b\u8f91\uff0c\ud83d\udc47\u5c31\u4e0d\u8c03\u7528\u4e0b\u8fb9\u8fd9\u53e5\n    return joinPoint.proceed()\n  }\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u4e0a\u65b9 AndroidAopMatchClassMethod \u8bbe\u7f6e\u7684 type \u662f MatchType.SELF \u8868\u793a\u53ea\u5339\u914d TestMatch \u8fd9\u4e2a\u7c7b\u81ea\u8eab\uff0c\u4e0d\u8003\u8651\u5176\u5b50\u7c7b</p> <p>  \u4e0d\u662f\u6240\u6709\u7c7b\u90fd\u53ef\u4ee5Hook\u8fdb\u53bb\uff0c<code>type</code> \u7c7b\u578b\u4e3a <code>SELF</code> \u65f6\uff0c<code>targetClassName</code> \u6240\u8bbe\u7f6e\u7684\u7c7b\u5fc5\u987b\u662f\u5b89\u88c5\u5305\u91cc\u7684\u4ee3\u7801\u3002\u4f8b\u5982\uff1aToast \u8fd9\u4e2a\u7c7b\u5728 android.jar \u91cc\u8fb9\u662f\u4e0d\u884c\u7684</p> </li> <li> <p>\u4f8b\u5b50\u4e8c</p> <p>\u5047\u5982\u60f3 Hook \u6240\u6709\u7684 android.view.View.OnClickListener \u7684 onClick\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u60f3\u5168\u5c40\u76d1\u6d4b\u6240\u6709\u7684\u8bbe\u7f6e OnClickListener \u7684\u70b9\u51fb\u4e8b\u4ef6\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>@AndroidAopMatchClassMethod(\n    targetClassName = \"android.view.View.OnClickListener\",\n    methodName = [\"onClick\"],\n    type = MatchType.EXTENDS //type \u4e00\u5b9a\u662f EXTENDS \u56e0\u4e3a\u4f60\u60f3 hook \u6240\u6709\u7ee7\u627f\u4e86 OnClickListener \u7684\u7c7b\n)\nclass MatchOnClick : MatchClassMethod {\n//    @SingleClick(5000) //\u8054\u5408 @SingleClick \uff0c\u7ed9\u6240\u6709\u70b9\u51fb\u589e\u52a0\u9632\u591a\u70b9\uff0c6\u4e0d6\n    override fun invoke(joinPoint: ProceedJoinPoint, methodName: String): Any? {\n        Log.e(\"MatchOnClick\", \"=====invoke=====$methodName\")\n        return joinPoint.proceed()\n    }\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u4e0a\u65b9 AndroidAopMatchClassMethod \u8bbe\u7f6e\u7684 type \u662f MatchType.EXTENDS \u8868\u793a\u5339\u914d\u6240\u6709\u7ee7\u627f\u81ea OnClickListener \u7684\u5b50\u7c7b\uff0c\u53e6\u5916\u66f4\u591a\u7ee7\u627f\u65b9\u5f0f\uff0c\u8bf7\u53c2\u8003Wiki\u6587\u6863</p> <p>\u6ce8\u610f\uff1a\u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u8be5\u65b9\u6cd5\uff0c\u5219\u5207\u9762\u65e0\u6548\uff0c\u4f7f\u7528 overrideMethod \u53ef\u5ffd\u7565\u6b64\u9650\u5236\u8be6\u60c5\u70b9\u6b64</p> </li> </ul>"},{"location":"zh/getting_started/#androidaopreplaceclass","title":"\u4e09\u3001@AndroidAopReplaceClass \u662f\u505a\u66ff\u6362\u65b9\u6cd5\u8c03\u7528\u7684","text":"<p>\u2003\u2003\u6b64\u65b9\u5f0f\u662f\u5bf9 @AndroidAopMatchClassMethod \u7684\u4e00\u4e2a\u8865\u5145\uff0c\u70b9\u6b64\u770bwiki\u8be6\u7ec6\u8bf4\u660e\u6587\u6863</p> <ul> <li> <p>Java\u5199\u6cd5</p> <pre><code>@AndroidAopReplaceClass(\n        \"android.widget.Toast\"\n)\npublic class ReplaceToast {\n    @AndroidAopReplaceMethod(\n            \"android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int)\"\n    )\n    //  \u56e0\u4e3a\u88ab\u66ff\u6362\u65b9\u6cd5\u662f\u9759\u6001\u7684\uff0c\u6240\u4ee5\u53c2\u6570\u7c7b\u578b\u53ca\u987a\u5e8f\u548c\u88ab\u66ff\u6362\u65b9\u6cd5\u4e00\u4e00\u5bf9\u5e94\n    public static Toast makeText(Context context, CharSequence text, int duration) {\n        return Toast.makeText(context, \"ReplaceToast-\"+text, duration);\n    }\n    @AndroidAopReplaceMethod(\n            \"void setGravity(int , int , int )\"\n    )\n    //  \u56e0\u4e3a\u88ab\u66ff\u6362\u65b9\u6cd5\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u6240\u4ee5\u53c2\u6570\u7b2c\u4e00\u4e2a\u662f\u88ab\u66ff\u6362\u7c7b\uff0c\u4e4b\u540e\u7684\u53c2\u6570\u548c\u88ab\u66ff\u6362\u65b9\u6cd5\u4e00\u4e00\u5bf9\u5e94\n    public static void setGravity(Toast toast,int gravity, int xOffset, int yOffset) {\n        toast.setGravity(Gravity.CENTER, xOffset, yOffset);\n    }\n    @AndroidAopReplaceMethod(\n            \"void show()\"\n    )\n    //  \u867d\u7136\u88ab\u66ff\u6362\u65b9\u6cd5\u6ca1\u6709\u53c2\u6570\uff0c\u4f46\u56e0\u4e3a\u5b83\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ecd\u7136\u662f\u88ab\u66ff\u6362\u7c7b\n    public static void show(Toast toast) {\n        toast.show();\n    }\n}\n</code></pre> <p>\u8be5\u4f8b\u610f\u601d\u5c31\u662f\u51e1\u662f\u4ee3\u7801\u4e2d\u5199<code>Toast.makeText</code>\u548c<code>Toast.show</code>  ...\u7684\u5730\u65b9\u90fd\u88ab\u66ff\u6362\u6210<code>ReplaceToast.makeText</code>\u548c<code>ReplaceToast.show</code> ...</p> </li> <li> <p>Kotlin\u5199\u6cd5</p> <pre><code>@AndroidAopReplaceClass(\"android.util.Log\")\nobject ReplaceLog {\n    @AndroidAopReplaceMethod(\"int e(java.lang.String,java.lang.String)\")\n    @JvmStatic\n    fun e( tag:String, msg:String) :Int{\n        return Log.e(tag, \"ReplaceLog-$msg\")\n    }\n}\n</code></pre> <p>\u8be5\u4f8b\u610f\u601d\u5c31\u662f\u51e1\u662f\u4ee3\u7801\u4e2d\u5199<code>Log.e</code>\u7684\u5730\u65b9\u90fd\u88ab\u66ff\u6362\u6210<code>ReplaceLog.e</code></p> </li> </ul>"},{"location":"zh/getting_started/#androidaopmodifyextendsclass","title":"\u56db\u3001@AndroidAopModifyExtendsClass \u662f\u4fee\u6539\u76ee\u6807\u7c7b\u7684\u7ee7\u627f\u7c7b","text":"<p>\u2003\u2003\u901a\u5e38\u662f\u5728\u67d0\u4e2a\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u4e2d\u66ff\u6362\u6389\u5176\u4e2d\u4e00\u5c42\uff0c\u7136\u540e\u91cd\u5199\u4e00\u4e9b\u51fd\u6570\uff0c\u5728\u91cd\u5199\u7684\u51fd\u6570\u4e2d\u52a0\u5165\u4e00\u4e9b\u4f60\u60f3\u52a0\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u8d77\u5230\u76d1\u542c\u3001\u6539\u5199\u539f\u6709\u903b\u8f91\u7684\u4f5c\u7528\uff0c\u8be6\u7ec6\u4f7f\u7528\u65b9\u5f0f</p> <ul> <li> <p>\u793a\u4f8b</p> <pre><code>@AndroidAopModifyExtendsClass(\"androidx.appcompat.widget.AppCompatImageView\")\npublic class ReplaceImageView extends ImageView {\n    public ReplaceImageView(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    public void setImageDrawable(@Nullable Drawable drawable) {\n        super.setImageDrawable(drawable);\n        //\u505a\u4e00\u4e9b\u76d1\u6d4b\u6216\u8005\u518d\u6b21\u4fee\u6539\n    }\n}\n</code></pre> <p>\u8be5\u4f8b\u5c31\u662f\u8981\u628a <code>AppCompatImageView</code> \u7684\u7ee7\u627f\u7c7b\u66ff\u6362\u6210 <code>ReplaceImageView</code></p> </li> </ul>"},{"location":"zh/getting_started/#androidaopcollectmethod","title":"\u4e94\u3001@AndroidAopCollectMethod \u662f\u6536\u96c6\u7ee7\u627f\u7c7b","text":"<p>\u2003\u2003\u4f7f\u7528\u8d77\u6765\u6781\u5176\u7b80\u5355\uff0c\u793a\u4f8b\u4ee3\u7801\u5df2\u7ecf\u8bf4\u660e\u4e86\u8be6\u7ec6\u4f7f\u7528\u65b9\u5f0f</p> <ul> <li> <p>\u793a\u4f8b</p> KotlinJava <pre><code>object InitCollect {\n    private val collects = mutableListOf&lt;SubApplication&gt;()\n    private val collectClazz: MutableList&lt;Class&lt;out SubApplication&gt;&gt; = mutableListOf()\n\n    @AndroidAopCollectMethod\n    @JvmStatic\n    fun collect(sub: SubApplication){\n      collects.add(sub)\n    }\n    @AndroidAopCollectMethod\n    @JvmStatic\n    fun collect2(sub:Class&lt;out SubApplication&gt;){\n      collectClazz.add(sub)\n    }\n  //\u76f4\u63a5\u8c03\u8fd9\u4e2a\u65b9\u6cd5\uff08\u65b9\u6cd5\u540d\u4e0d\u9650\uff09\u4e0a\u8fb9\u7684\u51fd\u6570\u4f1a\u88ab\u6089\u6570\u56de\u8c03\n    fun init(application: Application){\n        for (collect in collects) {\n            collect.onCreate(application)\n        }\n    }\n}\n</code></pre> <pre><code>public class InitCollect2 {\n    private static final List&lt;SubApplication2&gt; collects = new ArrayList&lt;&gt;();\n    private static final List&lt;Class&lt;? extends SubApplication2&gt;&gt; collectClazz = new ArrayList&lt;&gt;();\n\n    @AndroidAopCollectMethod\n    public static void collect(SubApplication2 sub){\n        collects.add(sub);\n    }\n\n    @AndroidAopCollectMethod\n    public static void collect3(Class&lt;? extends SubApplication2&gt; sub){\n        collectClazz.add(sub);\n    }\n  //\u76f4\u63a5\u8c03\u8fd9\u4e2a\u65b9\u6cd5\uff08\u65b9\u6cd5\u540d\u4e0d\u9650\uff09\u4e0a\u8fb9\u7684\u51fd\u6570\u4f1a\u88ab\u6089\u6570\u56de\u8c03\n    public static void init(Application application){\n        Log.e(\"InitCollect2\",\"----init----\");\n        for (SubApplication2 collect : collects) {\n            collect.onCreate(application);\n        }\n    }\n}\n</code></pre> </li> </ul>"},{"location":"zh/give_list/","title":"\u6253\u8d4f\u672c\u5e93","text":""},{"location":"zh/give_list/#_1","title":"\u8d5e\u8d4f","text":"<p>\u90fd\u770b\u5230\u8fd9\u91cc\u4e86\uff0c\u5982\u679c\u60a8\u559c\u6b22 AndroidAOP\uff0c\u6216\u611f\u89c9 AndroidAOP \u5e2e\u52a9\u5230\u4e86\u60a8\uff0c\u53ef\u4ee5\u70b9\u53f3\u4e0a\u89d2\u201cStar\u201d\u652f\u6301\u4e00\u4e0b\uff0c\u60a8\u7684\u652f\u6301\u5c31\u662f\u6211\u7684\u52a8\u529b\uff0c\u8c22\u8c22\uff5e \ud83d\ude03</p> <p>\u5982\u679c\u611f\u89c9 AndroidAOP \u4e3a\u60a8\u8282\u7ea6\u4e86\u5927\u91cf\u5f00\u53d1\u65f6\u95f4\u3001\u4e3a\u60a8\u7684\u9879\u76ee\u589e\u5149\u6dfb\u5f69\uff0c\u60a8\u4e5f\u53ef\u4ee5\u626b\u63cf\u4e0b\u9762\u7684\u4e8c\u7ef4\u7801\uff0c\u8bf7\u4f5c\u8005\u559d\u676f\u5496\u5561 \u2615</p> <p>\u5982\u679c\u5728\u6350\u8d60\u7559\u8a00\u4e2d\u5907\u6ce8\u540d\u79f0\uff0c\u5c06\u4f1a\u88ab\u8bb0\u5f55\u5230\u5217\u8868\u4e2d~ \u5982\u679c\u4f60\u4e5f\u662fgithub\u5f00\u6e90\u4f5c\u8005\uff0c\u6350\u8d60\u65f6\u53ef\u4ee5\u7559\u4e0bgithub\u9879\u76ee\u5730\u5740\u6216\u8005\u4e2a\u4eba\u4e3b\u9875\u5730\u5740\uff0c\u94fe\u63a5\u5c06\u4f1a\u88ab\u6dfb\u52a0\u5230\u5217\u8868\u4e2d</p>"},{"location":"zh/give_list/#_2","title":"\u6350\u8d60\u5217\u8868","text":"<p>\u4f60\u4eec\u7684star\u548c\u652f\u6301\u662f\u6211\u524d\u8fdb\u7684\u6700\u5927\u52a8\u529b\uff01</p> \u6635\u79f0 \u65e5\u671f \u65b9\u5f0f \u7559\u8a00 \u53cb\u60c5\u94fe\u63a5 \u8d5e\u8d4f\u91d1\u989d O*e 2024-04-11 \u5fae\u4fe1 aop\u89e3\u51b3\u4e86\u6211\u7684\u95ee\u9898\uff0c\u8bf7\u4f60\u559d\u676f\u745e[\u5496\u5561] / \u00a5 9.99 j*e 2024-04-11 \u5fae\u4fe1 \u8f9b\u82e6\u5927\u4f6c\u8fd9\u4e48\u665a\u5e2e\u6211\u627e\u95ee\u9898 / \u00a5 88 *\u5f20 2024-07-03 \u5fae\u4fe1 / / \u00a5 64.6 *\u541b 2024-09-19 \u5fae\u4fe1 / / \u00a5 66 F*I 2024-10-20 \u5fae\u4fe1 \u611f\u8c22\u89e3\u6211\u71c3\u7709\u4e4b\u6025 / \u00a5 100 *\u52c7 2024-11-13 \u652f\u4ed8\u5b9d / / \u00a5 30 *\u535a 2024-12-09 \u5fae\u4fe1 AndroidAOP\u611f\u8c22\ud83d\ude4f / \u00a5 30 *\u559c 2025-01-16 \u5fae\u4fe1 \u6709\u6548\u89e3\u51b3\u95ee\u9898\uff0c\u7ed9\u4f60\u4e00\u4e2a\u8d5e\uff01 / \u00a5 10 *\u9752 2025-01-21 \u652f\u4ed8\u5b9d / / \u00a5 13 \u6df1\u5ea6\u7528\u6237 2025-01-22 QQ \u611f\u8c22\u7fa4\u4e3b\uff0c\u8bf7\u4f60\u559d\u4e00\u676f\u5496\u5561 / \u00a5 13 **\u5c27 2025-02-13 \u652f\u4ed8\u5b9d \u4eca\u552f\u4e00\u80fd\u7528\u7684\u5b89\u5353AOP\u5e93\uff0c\u4e07\u4e0d\u53ef\u4e8f\u5f85\u4f5c\u8005 / \u00a5 100.01 **\u5929 2025-02-17 \u652f\u4ed8\u5b9d \u611f\u8c22\u4f5c\u8005\u6280\u672f\u652f\u6301\uff0ccoffee\u732e\u4e0a / \u00a5 9.9 **\u5929 2025-02-17 \u652f\u4ed8\u5b9d \u611f\u8c22\u4f5c\u8005\u6280\u672f\u652f\u6301\uff0ccoffee\u732e\u4e0a / \u00a5 6.6 \u8ffd\u68a6/ty: 2025-05-22 QQ \u95ee\u9898\u89e3\u51b3\uff0c\u8c22\u8c22\u7fa4\u4e3b / \u00a5 10"}]}